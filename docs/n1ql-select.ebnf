/****************
 *  N1QL SELECT *
 ****************/

/*
 *  select statement
 */
select ::= subselect (set-op 'ALL'? subselect)* order-by-clause? limit-clause? offset-clause?
set-op ::= 'UNION' | 'INTERSECT' | 'EXCEPT'
subselect ::= select-from | from-select
select-from ::= select-clause from-clause? let-clause? where-clause? group-by-clause?
from-select ::= from-clause let-clause? where-clause? group-by-clause? select-clause

/*
 *  select clause
 */
select-clause ::= 'SELECT' ('ALL' | 'DISTINCT')? (result-expr (',' result-expr)* | ('RAW' | 'ELEMENT') expr)
result-expr ::= (path '.')? '*' | expr ('AS'? alias)?
path ::= identifier ('[' expr ']')? ('.' path)?
alias ::= identifier

/*
 *  from clause
 */
from-clause ::= 'FROM' from-term
from-term ::= from-path ('AS'? alias)? use-keys-clause? | from-term join-clause | from-term nest-clause | from-term unnest-clause
from-path ::= (namespace ':')? path
namespace ::= identifier
use-keys-clause ::= 'USE' 'PRIMARY'? 'KEYS' expr
join-clause ::= join-type? 'JOIN' from-path ('AS'? alias)? on-keys-clause
join-type ::= 'INNER' | 'LEFT' 'OUTER'?
on-keys-clause ::= 'ON' 'PRIMARY'? 'KEYS' expr
nest-clause ::= join-type? 'NEST' from-path ('AS'? alias)? on-keys-clause
unnest-clause ::= join-type? ('UNNEST' | 'FLATTEN') expr ('AS'? alias)?

/*
 *  let clause
 */
let-clause ::= 'LET' alias '=' expr (',' alias '=' expr)*

/*
 *  where clause
 */
where-clause ::= 'WHERE' cond
cond ::= expr

/*
 *  group-by clause
 */
group-by-clause ::= 'GROUP' 'BY' expr (',' expr)* letting-clause? having-clause?
letting-clause ::= 'LETTING' alias '=' expr (',' alias '=' expr)*
having-clause ::= 'HAVING' cond

/*
 *  order-by clause
 */
order-by-clause ::= 'ORDER' 'BY' ordering-term (',' ordering-term)*
ordering-term ::= expr ('ASC' | 'DESC')?

/*
 *  limit clause
 */
limit-clause ::= 'LIMIT' expr

/*
 *  offset clause
 */
offset-clause ::= 'OFFSET' expr

/*
 *  expressions
 */
expr ::= literal | identifier | nested-expr | case-expr | logical-term | comparison-term | arithmetic-term | concatenation-term | function-call | subquery-expr | collection-expr | construction-expr | '(' expr ')'
logical-term ::= cond 'AND' cond | cond 'OR' cond | 'NOT' cond
case-expr ::= simple-case-expr | searched-case-expr
simple-case-expr ::= 'CASE' expr ('WHEN' expr 'THEN' expr)+ ('ELSE' expr)? 'END'
searched-case-expr ::= 'CASE' ('WHEN' cond 'THEN' expr)+ ('ELSE' expr)? 'END'
comparison-term ::= expr '=' expr | expr '==' expr | expr '!=' expr | expr '<>' expr | expr '>' expr | expr '>=' expr | expr '<' expr | expr '<=' expr | expr 'NOT'? 'BETWEEN' expr 'AND' expr | expr 'NOT'? 'LIKE' expr | expr 'IS' 'NOT'? 'VALUED' | expr 'IS' 'NOT'? 'NULL' | expr 'IS' 'NOT'? 'MISSING'
arithmetic-term ::= expr '+' expr | expr '-' expr | expr '*' expr | expr '/' expr | expr '%' expr | '-' expr
concatenation-term ::= expr '||' expr
nested-expr ::= expr '.' (identifier | '(' expr ')') | expr '[' expr (':' expr?)? ']'
subquery-expr ::= '(' select ')'

/*
 *  function calls
 */
function-call ::= function-name '(' ('*' | ('DISTINCT'? expr (',' expr)*))? ')'
function-name ::= identifier

/*
 *  collections
 */
collection-expr ::= exists-expr | in-expr | within-expr | collection-cond | collection-xform
exists-expr ::= 'EXISTS' expr
in-expr ::= expr 'NOT'? 'IN' expr
within-expr ::= expr 'NOT'? 'WITHIN' expr
collection-cond ::= ('ANY' | 'SOME' | 'EVERY') variable ('IN' | 'WITHIN') expr (',' variable ('IN' | 'WITHIN') expr)* ('SATISFIES' cond)? 'END'
collection-xform ::= array-expr | first-expr
array-expr ::= 'ARRAY' expr 'FOR' variable ('IN' | 'WITHIN') expr (',' variable ('IN' | 'WITHIN') expr)* ('WHEN' cond)? 'END'
first-expr ::= 'FIRST' expr 'FOR' variable ('IN' | 'WITHIN') expr (',' variable ('IN' | 'WITHIN') expr)* ('WHEN' cond)? 'END'
variable ::= identifier

/*
 *  construction
 */
construction-expr ::= object | array
object ::= '{' members? '}'
members ::= pair (',' members)?
pair ::= string ':' expr
array ::= '[' elements? ']'
elements ::= expr (',' elements)?

/*
 *  identifiers
 */
identifier ::= unescaped-identifier | escaped-identifier
unescaped-identifier ::= [a-zA-Z_]  ( [0-9a-zA-Z_$] )*
escaped-identifier ::= '`' chars '`'

/*
 *  literals
 */
literal ::= string | number | 'TRUE' | 'FALSE' | 'NULL'
string ::= '"' chars? '"'
chars ::= char chars?
char ::= unicode-character | '\' ('\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' hex-digit hex-digit hex-digit hex-digit )
number ::= int frac? exp?
int ::= '-'? uint
uint ::= digit | non-zero-digit digits
frac ::= '.' digits
exp ::= e digits
digits ::= digit digits?
non-zero-digit ::= [1-9]
digit ::= [0-9]
e ::= ('e' | 'E') ('-' | '+')?
hex-digit ::= [0-9a-fA-F]

/**
 *  comments
 **/
block-comment ::= '/*' ((text)? newline?)+ '*/'
line-comment ::=  '--' (text)? newline?
