/****************
 *  n1ql logic    *
 ****************/

/*
 *  block
 */
terminated-stmt ::= stmt (';' | newline)

block ::= (terminated-stmt)+


/*
 *  stmt
 */
stmt ::= begin | decl | init | assign | unset | sendop | ctrl | lexpr

begin ::= 'BEGIN' block 'END'

decl ::= 'DECLARE' var (',' var)* (':=' lexpr (',' lexpr)*)?

var ::= identifier

init ::= var (',' var)* '::=' lexpr (',' lexpr)*

assign ::= var (',' var)* ':=' lexpr (',' lexpr)*

sendop ::= var '<-' mexpr

unset ::= 'UNSET' mexpr '.' subpath


/*
 *  ctrl
 */
ctrl ::= if | case | loop | break | continue | pass | return | deliver | defer

if ::= 'IF' mcond 'THEN' block ('ELSEIF' mcond 'THEN' block)* ('ELSE' block)? 'END'

case ::= full-case | searched-case

full-case ::= 'CASE' ('WHEN' mcond 'THEN' block)+ ('ELSE' block)? 'END'

searched-case ::= 'CASE' mexpr ('WHEN' mexpr 'THEN' block)+ ('ELSE' block)? 'END'

label ::= label-name ':'

label-name ::= identifier

loop ::= (label)? (while | for)

while ::= 'WHILE' mcond 'DO' block 'END'

for ::= for-iter | for-map

for-iter ::= 'FOR' var 'IN' (mexpr | cursor) 'DO' block 'END'

for-map ::= 'FOR' key-var ',' val-var 'IN' mexpr 'DO' block 'END'

key-var ::= var

val-var ::= var

break ::= 'BREAK' (label-name)?

continue ::= 'CONTINUE' (label-name)?

pass ::= 'PASS'

return ::= 'RETURN' (lexpr (',' lexpr)*)?

deliver ::= 'DELIVER' ('WHEN' commop 'THEN' block)+ ('ELSE' block)? 'END'

commop ::= sendop | rcvop

rcvop ::= var (',' var)? (':=' | '::=') rcvexpr


/*
 *  expr
 */
mexpr ::= expr | rcvexpr | first

mcond ::= mexpr

rcvexpr ::= '<-' mexpr

first ::= 'FIRST' cursor

lexpr ::= mexpr | prepare | cursor

prepare ::= 'PREPARE' (query | mexpr) ('USING' var (',' var)*)?

cursor ::= query | execute

query ::= select | dml-stmt

execute ::= 'EXECUTE' mexpr ('USING' mexpr (',' mexpr)*)?
