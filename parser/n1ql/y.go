//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BY = 57360
const CALL = 57361
const CASE = 57362
const CAST = 57363
const CLUSTER = 57364
const COLLATE = 57365
const COLLECTION = 57366
const COMMIT = 57367
const CONNECT = 57368
const CONTINUE = 57369
const CREATE = 57370
const DATABASE = 57371
const DATASET = 57372
const DATASTORE = 57373
const DECLARE = 57374
const DECREMENT = 57375
const DELETE = 57376
const DERIVED = 57377
const DESC = 57378
const DESCRIBE = 57379
const DISTINCT = 57380
const DO = 57381
const DROP = 57382
const EACH = 57383
const ELEMENT = 57384
const ELSE = 57385
const END = 57386
const EVERY = 57387
const EXCEPT = 57388
const EXCLUDE = 57389
const EXECUTE = 57390
const EXISTS = 57391
const EXPLAIN = 57392
const FALSE = 57393
const FIRST = 57394
const FLATTEN = 57395
const FOR = 57396
const FROM = 57397
const FUNCTION = 57398
const GRANT = 57399
const GROUP = 57400
const GSI = 57401
const HAVING = 57402
const IF = 57403
const IN = 57404
const INCLUDE = 57405
const INCREMENT = 57406
const INDEX = 57407
const INLINE = 57408
const INNER = 57409
const INSERT = 57410
const INTERSECT = 57411
const INTO = 57412
const IS = 57413
const JOIN = 57414
const KEY = 57415
const KEYS = 57416
const KEYSPACE = 57417
const LAST = 57418
const LEFT = 57419
const LET = 57420
const LETTING = 57421
const LIKE = 57422
const LIMIT = 57423
const LSM = 57424
const MAP = 57425
const MAPPING = 57426
const MATCHED = 57427
const MATERIALIZED = 57428
const MERGE = 57429
const MINUS = 57430
const MISSING = 57431
const NAMESPACE = 57432
const NEST = 57433
const NOT = 57434
const NULL = 57435
const NUMBER = 57436
const OBJECT = 57437
const OFFSET = 57438
const ON = 57439
const OPTION = 57440
const OR = 57441
const ORDER = 57442
const OUTER = 57443
const OVER = 57444
const PARTITION = 57445
const PASSWORD = 57446
const PATH = 57447
const POOL = 57448
const PREPARE = 57449
const PRIMARY = 57450
const PRIVATE = 57451
const PRIVILEGE = 57452
const PROCEDURE = 57453
const PUBLIC = 57454
const RAW = 57455
const REALM = 57456
const REDUCE = 57457
const RENAME = 57458
const RETURN = 57459
const RETURNING = 57460
const REVOKE = 57461
const RIGHT = 57462
const ROLE = 57463
const ROLLBACK = 57464
const SATISFIES = 57465
const SCHEMA = 57466
const SELECT = 57467
const SELF = 57468
const SET = 57469
const SHOW = 57470
const SOME = 57471
const START = 57472
const STATISTICS = 57473
const STRING = 57474
const SYSTEM = 57475
const THEN = 57476
const TO = 57477
const TRANSACTION = 57478
const TRIGGER = 57479
const TRUE = 57480
const TRUNCATE = 57481
const UNDER = 57482
const UNION = 57483
const UNIQUE = 57484
const UNNEST = 57485
const UNSET = 57486
const UPDATE = 57487
const UPSERT = 57488
const USE = 57489
const USER = 57490
const USING = 57491
const VALUE = 57492
const VALUED = 57493
const VALUES = 57494
const VIEW = 57495
const WHEN = 57496
const WHERE = 57497
const WHILE = 57498
const WITH = 57499
const WITHIN = 57500
const WORK = 57501
const XOR = 57502
const INT = 57503
const IDENTIFIER = 57504
const IDENTIFIER_ICASE = 57505
const NAMED_PARAM = 57506
const POSITIONAL_PARAM = 57507
const NEXT_PARAM = 57508
const LPAREN = 57509
const RPAREN = 57510
const LBRACE = 57511
const RBRACE = 57512
const LBRACKET = 57513
const RBRACKET = 57514
const RBRACKET_ICASE = 57515
const COMMA = 57516
const COLON = 57517
const INTERESECT = 57518
const EQ = 57519
const DEQ = 57520
const NE = 57521
const LT = 57522
const GT = 57523
const LE = 57524
const GE = 57525
const CONCAT = 57526
const PLUS = 57527
const STAR = 57528
const DIV = 57529
const MOD = 57530
const UMINUS = 57531
const DOT = 57532

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	167, 316,
	-2, 261,
	-1, 117,
	175, 71,
	-2, 72,
	-1, 154,
	53, 80,
	72, 80,
	91, 80,
	143, 80,
	-2, 56,
	-1, 183,
	177, 0,
	178, 0,
	179, 0,
	-2, 225,
	-1, 184,
	177, 0,
	178, 0,
	179, 0,
	-2, 226,
	-1, 185,
	177, 0,
	178, 0,
	179, 0,
	-2, 227,
	-1, 186,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 228,
	-1, 187,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 229,
	-1, 188,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 230,
	-1, 189,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 231,
	-1, 196,
	80, 0,
	-2, 234,
	-1, 197,
	62, 0,
	158, 0,
	-2, 236,
	-1, 198,
	62, 0,
	158, 0,
	-2, 238,
	-1, 300,
	80, 0,
	-2, 235,
	-1, 301,
	62, 0,
	158, 0,
	-2, 237,
	-1, 302,
	62, 0,
	158, 0,
	-2, 239,
}

const yyNprod = 332
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2853

var yyAct = []int{

	170, 3, 638, 627, 471, 636, 628, 329, 330, 546,
	571, 314, 99, 100, 581, 497, 591, 414, 333, 537,
	227, 426, 443, 244, 143, 275, 490, 228, 367, 428,
	104, 412, 223, 425, 162, 476, 139, 322, 165, 452,
	269, 155, 116, 268, 411, 166, 16, 141, 364, 142,
	73, 229, 247, 10, 239, 115, 123, 136, 324, 127,
	59, 210, 294, 276, 190, 140, 351, 349, 371, 147,
	148, 575, 508, 492, 507, 444, 93, 576, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 460, 568, 196, 197, 198, 460,
	488, 350, 368, 292, 77, 128, 278, 474, 444, 277,
	98, 253, 226, 459, 145, 146, 292, 157, 459, 258,
	140, 77, 291, 76, 254, 96, 241, 79, 257, 93,
	158, 295, 296, 297, 98, 291, 80, 81, 82, 280,
	76, 527, 370, 95, 489, 292, 487, 191, 171, 172,
	405, 79, 477, 478, 406, 255, 265, 173, 298, 293,
	295, 296, 297, 472, 291, 252, 284, 213, 215, 217,
	257, 251, 389, 63, 287, 248, 248, 587, 96, 562,
	542, 528, 159, 395, 396, 524, 250, 98, 249, 249,
	460, 286, 397, 385, 300, 301, 302, 255, 281, 283,
	341, 339, 282, 270, 79, 171, 172, 279, 159, 459,
	77, 117, 316, 317, 173, 242, 433, 499, 475, 327,
	323, 97, 325, 83, 78, 80, 81, 82, 119, 76,
	230, 294, 510, 511, 77, 340, 455, 117, 382, 343,
	144, 344, 160, 245, 336, 231, 191, 83, 78, 80,
	81, 82, 117, 76, 353, 328, 354, 299, 637, 357,
	358, 359, 267, 611, 632, 117, 240, 572, 369, 335,
	332, 313, 569, 259, 97, 318, 413, 319, 372, 320,
	326, 267, 337, 387, 544, 290, 563, 77, 526, 149,
	393, 525, 342, 398, 498, 338, 380, 225, 381, 331,
	83, 78, 80, 81, 82, 388, 76, 356, 548, 651,
	352, 362, 363, 650, 292, 617, 332, 646, 618, 607,
	383, 384, 137, 75, 474, 256, 386, 298, 293, 295,
	296, 297, 218, 291, 124, 420, 422, 423, 421, 334,
	138, 294, 501, 599, 191, 419, 436, 191, 191, 191,
	191, 191, 191, 540, 429, 394, 431, 415, 399, 400,
	401, 402, 403, 404, 379, 582, 294, 597, 570, 260,
	192, 418, 450, 440, 216, 442, 457, 238, 543, 315,
	432, 157, 231, 74, 494, 348, 445, 74, 541, 248,
	248, 248, 416, 441, 158, 214, 347, 346, 466, 437,
	438, 439, 249, 249, 249, 212, 463, 323, 464, 461,
	462, 449, 448, 458, 456, 446, 453, 453, 480, 194,
	270, 451, 270, 481, 292, 74, 616, 108, 484, 454,
	454, 493, 483, 644, 485, 486, 496, 193, 293, 295,
	296, 297, 271, 291, 470, 503, 74, 648, 140, 292,
	107, 132, 647, 75, 377, 482, 79, 75, 237, 191,
	233, 512, 298, 293, 295, 296, 297, 130, 291, 518,
	469, 261, 262, 373, 608, 211, 523, 151, 509, 506,
	495, 110, 513, 514, 505, 209, 211, 366, 529, 534,
	531, 532, 374, 273, 131, 75, 530, 613, 641, 595,
	547, 212, 430, 274, 519, 642, 596, 573, 368, 521,
	129, 429, 539, 522, 479, 195, 75, 538, 118, 535,
	72, 533, 106, 558, 114, 84, 561, 551, 112, 111,
	654, 93, 653, 629, 550, 565, 246, 243, 133, 77,
	580, 74, 113, 309, 376, 589, 555, 556, 311, 306,
	552, 553, 504, 78, 80, 81, 82, 502, 76, 567,
	585, 566, 649, 361, 360, 586, 355, 236, 612, 588,
	574, 560, 577, 447, 219, 564, 417, 547, 583, 584,
	96, 601, 378, 594, 49, 375, 600, 593, 590, 98,
	1, 592, 592, 538, 153, 545, 84, 610, 95, 606,
	103, 602, 93, 500, 603, 604, 79, 598, 624, 631,
	94, 491, 547, 622, 623, 609, 427, 85, 614, 615,
	619, 621, 424, 304, 625, 626, 620, 303, 307, 310,
	639, 630, 633, 635, 634, 640, 220, 221, 222, 536,
	473, 643, 520, 232, 41, 40, 645, 39, 22, 2,
	21, 96, 20, 652, 639, 639, 656, 657, 655, 84,
	98, 19, 230, 101, 102, 93, 308, 18, 17, 95,
	9, 8, 7, 6, 5, 4, 97, 79, 407, 408,
	312, 94, 321, 105, 109, 305, 161, 579, 85, 77,
	515, 516, 578, 549, 365, 86, 87, 88, 89, 90,
	91, 92, 83, 78, 80, 81, 82, 266, 76, 150,
	224, 272, 156, 152, 96, 154, 70, 71, 33, 126,
	32, 54, 28, 98, 57, 56, 31, 84, 122, 121,
	120, 409, 95, 93, 30, 134, 135, 27, 50, 24,
	79, 23, 0, 0, 94, 0, 0, 97, 0, 0,
	0, 85, 0, 0, 0, 0, 410, 0, 0, 0,
	77, 467, 0, 0, 468, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	0, 0, 96, 0, 0, 0, 0, 0, 84, 0,
	0, 98, 0, 0, 93, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 94, 0, 231, 0, 0, 0, 0, 85,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 84, 0, 0, 0,
	206, 95, 93, 0, 0, 208, 203, 0, 0, 79,
	0, 0, 0, 94, 0, 0, 0, 0, 97, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 90, 91, 92, 83, 78, 80, 81, 82, 0,
	76, 96, 0, 0, 0, 0, 0, 0, 84, 0,
	98, 230, 0, 0, 93, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	201, 94, 0, 200, 199, 204, 207, 0, 85, 0,
	0, 0, 77, 390, 391, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	0, 76, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 205, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 202, 94, 0, 0, 0, 97, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 288, 0, 0, 289, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 164, 76,
	0, 0, 65, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 93, 0, 0, 97,
	0, 0, 163, 231, 0, 0, 168, 0, 0, 67,
	0, 0, 77, 12, 0, 44, 69, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	84, 285, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 29, 43, 98, 0, 11, 42, 46, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 94, 0, 167, 0, 0,
	0, 0, 85, 0, 0, 96, 0, 0, 0, 0,
	26, 0, 0, 66, 98, 0, 48, 0, 0, 0,
	0, 0, 45, 95, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 47, 25, 0, 51, 52,
	53, 58, 0, 63, 0, 64, 0, 0, 267, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 84, 76, 0, 0, 0, 0, 93, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 77, 0, 0, 62, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 84, 76, 0, 0, 0, 0, 93, 492,
	60, 0, 0, 0, 0, 0, 36, 96, 0, 0,
	0, 0, 61, 0, 0, 0, 98, 0, 0, 0,
	15, 0, 13, 84, 0, 95, 0, 74, 0, 93,
	0, 0, 0, 79, 0, 0, 0, 94, 0, 0,
	34, 0, 0, 0, 85, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 38,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 94, 96, 14,
	0, 0, 0, 0, 85, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 75, 0, 0,
	0, 0, 0, 97, 79, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 85, 77, 37, 35, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 77, 0, 93, 559,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 97, 76, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 77, 557, 93,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 0, 76, 96, 0, 0,
	0, 0, 0, 0, 84, 0, 98, 0, 0, 0,
	93, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 94, 96, 0,
	0, 0, 0, 0, 85, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 96,
	0, 0, 0, 0, 0, 85, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 94,
	0, 0, 0, 97, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 554, 0, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 97, 76, 0, 0, 0, 0,
	0, 435, 0, 84, 0, 0, 0, 77, 465, 93,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 97, 76, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 77, 0,
	93, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 0, 76, 96, 0,
	0, 0, 0, 0, 0, 84, 0, 98, 0, 0,
	0, 93, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 96,
	0, 0, 0, 0, 0, 85, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 264, 0, 0, 79, 0, 0, 0, 94,
	96, 0, 0, 0, 0, 0, 85, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	94, 0, 0, 0, 97, 0, 0, 85, 0, 0,
	0, 345, 0, 0, 434, 0, 0, 77, 0, 0,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 97, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 97, 76, 84, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 86, 87, 88, 89, 90,
	91, 92, 83, 78, 80, 81, 82, 0, 76, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 84, 0, 0, 0,
	0, 95, 93, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 94, 0, 0, 0, 0, 96, 0,
	85, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 0,
	0, 96, 0, 0, 0, 85, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 94, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	125, 76, 0, 0, 97, 0, 0, 0, 65, 68,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	55, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 0, 76, 97, 0, 0,
	0, 0, 168, 0, 0, 67, 0, 0, 0, 12,
	77, 44, 69, 0, 0, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	84, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 43,
	0, 0, 11, 42, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	68, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 96, 26, 0, 0, 66,
	0, 0, 48, 0, 98, 0, 0, 0, 45, 234,
	0, 0, 0, 95, 0, 0, 67, 0, 0, 0,
	12, 79, 44, 69, 0, 94, 0, 0, 0, 0,
	0, 47, 25, 0, 51, 52, 53, 58, 0, 63,
	0, 64, 0, 0, 0, 65, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 55, 0, 29,
	43, 0, 0, 11, 42, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 93, 12, 0, 44, 69,
	0, 97, 0, 0, 0, 0, 0, 26, 0, 0,
	66, 0, 0, 48, 77, 0, 0, 0, 0, 45,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 0, 76, 0, 29, 43, 0, 0, 11,
	42, 46, 47, 25, 96, 51, 52, 53, 58, 0,
	63, 0, 64, 98, 62, 0, 0, 65, 68, 0,
	0, 0, 95, 0, 0, 0, 0, 235, 0, 55,
	79, 0, 93, 26, 94, 0, 66, 60, 0, 48,
	0, 0, 0, 36, 0, 45, 0, 0, 0, 61,
	0, 0, 0, 0, 67, 0, 0, 15, 12, 13,
	44, 69, 0, 0, 74, 0, 0, 0, 47, 25,
	0, 51, 52, 53, 58, 0, 63, 34, 64, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 169, 0, 0, 38, 29, 43, 95,
	97, 11, 42, 46, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 77, 0, 0, 14, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 0, 75, 26, 0, 0, 66, 0,
	0, 48, 0, 0, 65, 68, 0, 45, 0, 0,
	0, 0, 0, 0, 37, 35, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 25, 0, 51, 52, 53, 58, 97, 63, 0,
	64, 67, 0, 0, 0, 12, 0, 44, 69, 0,
	77, 0, 0, 0, 0, 0, 65, 68, 0, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 55, 76,
	65, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 29, 43, 0, 0, 11, 42,
	46, 0, 0, 67, 0, 0, 0, 12, 0, 44,
	69, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 12, 0, 44, 69, 0, 0, 74, 0, 0,
	0, 0, 26, 0, 0, 66, 0, 0, 48, 0,
	0, 0, 0, 0, 45, 0, 29, 43, 0, 0,
	11, 42, 46, 0, 0, 0, 0, 0, 0, 0,
	29, 43, 0, 0, 11, 42, 46, 47, 25, 0,
	51, 52, 53, 58, 0, 63, 0, 64, 517, 0,
	0, 0, 0, 0, 26, 0, 0, 66, 0, 0,
	48, 0, 0, 0, 0, 0, 45, 75, 26, 0,
	0, 66, 0, 0, 48, 65, 68, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 55, 0, 47,
	25, 0, 51, 52, 53, 58, 0, 63, 0, 64,
	392, 0, 0, 47, 25, 0, 51, 52, 53, 58,
	0, 63, 67, 64, 0, 0, 12, 0, 44, 69,
	0, 0, 0, 0, 0, 0, 65, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 65,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 29, 43, 0, 0, 11,
	42, 46, 0, 67, 0, 0, 0, 12, 0, 44,
	69, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 44, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 66, 0, 0, 48,
	0, 0, 0, 0, 0, 45, 29, 43, 0, 0,
	11, 42, 46, 0, 0, 0, 0, 0, 0, 29,
	43, 125, 0, 0, 42, 46, 0, 0, 47, 25,
	0, 51, 52, 53, 58, 0, 63, 0, 64, 0,
	0, 0, 0, 0, 26, 0, 0, 66, 0, 0,
	48, 0, 0, 0, 0, 0, 45, 26, 0, 0,
	66, 0, 0, 48, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	25, 0, 51, 52, 53, 58, 0, 63, 0, 64,
	0, 0, 47, 25, 0, 51, 52, 53, 58, 0,
	63, 0, 64,
}
var yyPact = []int{

	2299, -1000, -1000, 1909, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2668, 2668, 1262, 1262, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2668,
	-1000, -1000, -1000, 381, 459, 458, 487, 90, 448, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61, 2617, -1000, -1000, 2492, -1000,
	402, 386, 473, 190, 2668, 78, 78, 78, 2668, 2668,
	-1000, -1000, 399, 486, 75, 1034, 43, 2668, 2668, 2668,
	2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668,
	2668, 2668, 2668, 2681, 357, 2668, 2668, 2668, 851, 2232,
	39, -1000, -1000, -1000, -67, 405, 391, 370, 328, -1000,
	556, 90, 90, 90, 150, -63, 220, -1000, 90, 2131,
	523, -1000, -1000, 1876, 223, 2668, 47, 1909, -1000, 472,
	81, 471, 90, 90, 1, -9, -1000, -64, -48, -19,
	1909, -4, -1000, 211, -1000, -4, -4, 1841, 1688, 107,
	-1000, 83, 399, -1000, 426, -1000, -1000, -127, -66, -69,
	332, -1000, -35, 2030, 2197, 2668, -1000, -1000, -1000, -1000,
	911, -1000, -1000, 2668, 849, -50, -50, -67, -67, -67,
	368, 2232, 2093, 2309, 2309, 2309, 63, 63, 63, 63,
	278, -1000, 2681, 2668, 2668, 2668, 116, 39, 39, -1000,
	534, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 309,
	394, 2668, 2668, -1000, 332, -1000, 332, -1000, 332, 2668,
	55, 52, 150, 172, -1000, 231, 82, -1000, -1000, -1000,
	83, -1000, 146, 33, 2668, 32, -1000, 223, 2668, -1000,
	2668, 1657, -1000, 300, 299, -1000, 288, -123, -1000, -74,
	-124, -1000, 190, 2668, -1000, 2668, 522, 78, 2668, 2668,
	2668, 520, 519, 78, 78, 429, -1000, 2668, -32, -1000,
	-109, 107, 401, -1000, 263, 220, 76, 82, 82, 25,
	2197, -35, 2668, -35, 652, -14, -1000, 781, -1000, 2478,
	2681, 21, 2668, 2681, 2681, 2681, 2681, 2681, 2681, 143,
	116, 39, 39, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1909, 1909, -1000, -1000,
	-1000, -20, -1000, 720, 124, 284, 124, 284, 107, 126,
	107, 76, 76, 428, -1000, 220, -1000, -1000, 49, -1000,
	1626, -1000, -1000, 1497, 1909, 2668, 90, 90, 90, 81,
	82, 81, -1000, 1909, 1909, -1000, -1000, 1909, 1909, 1909,
	-1000, -1000, -46, -46, 198, -1000, 555, -1000, 83, 1909,
	83, 2668, 429, 103, 103, 2668, -1000, -1000, -1000, -1000,
	150, -72, -1000, -127, -127, 220, -1000, 652, -1000, -1000,
	-1000, -1000, -1000, 1466, -26, -1000, -1000, 2668, 589, -55,
	-55, -68, -68, -68, 253, 2681, 2668, -1000, -1000, -1000,
	-1000, -11, -1000, 51, -22, -21, 441, 2668, -11, -22,
	394, 107, 394, 394, -28, -1000, -77, -30, -1000, 19,
	2668, -1000, 287, 332, -1000, 2668, 1909, 145, 50, -1000,
	-1000, -1000, 226, 513, 2668, 508, -1000, 2668, -32, -1000,
	1909, -1000, -1000, -127, -101, -103, -1000, 652, -1000, 70,
	2668, 220, 220, -1000, -1000, -1000, 518, -1000, 2426, -26,
	-1000, -1000, 124, -1000, 2030, 2668, 17, 141, 138, -33,
	1909, -1000, 13, 206, 394, 206, 206, 76, 2668, 76,
	-1000, -1000, 78, 1909, 280, 12, 1909, -1000, 225, 2668,
	-1000, 173, -1000, 1909, -1000, 23, 220, 82, 82, -1000,
	-1000, -1000, 1435, 150, 150, -1000, -1000, -1000, 1306, -1000,
	-1000, -35, 2668, 1275, 332, 2668, 11, 136, 332, -1000,
	206, -1000, -1000, -1000, 1235, -1000, -79, -1000, 210, 113,
	-1000, 434, 220, -1000, -1000, -97, -1000, 1909, 81, 480,
	-1000, 268, -127, -127, -1000, -1000, -1000, -1000, 1909, 2668,
	206, 1909, -1000, 9, 206, -1000, -1000, 501, 78, 76,
	76, 394, 414, -1000, 270, 240, 2668, -1000, -1000, -1000,
	2668, -1000, 231, 220, 220, 1093, -1000, -1000, -1000, -1000,
	-1000, -1000, -72, -1000, 206, 185, 389, 280, 108, 550,
	-1000, 1909, 423, 268, 268, -1000, -1000, 281, 184, 113,
	145, 2668, 2668, 2668, -1000, -1000, 172, 107, 465, 394,
	-1000, -1000, 1909, 1909, 110, 126, 107, 104, -1000, 2668,
	206, -1000, 413, -1000, 107, -1000, -1000, 341, -1000, 1053,
	-1000, 183, 367, -1000, 362, -1000, 528, 179, 175, 107,
	464, 462, 104, 2668, 2668, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 741, 739, 584, 738, 737, 57, 736, 735, 0,
	53, 64, 36, 340, 40, 43, 51, 27, 20, 24,
	734, 730, 729, 728, 54, 334, 726, 725, 724, 49,
	47, 325, 22, 722, 721, 720, 719, 46, 718, 60,
	717, 716, 715, 520, 713, 41, 39, 712, 711, 21,
	25, 55, 42, 710, 32, 14, 289, 709, 6, 707,
	48, 694, 693, 28, 692, 687, 45, 34, 686, 50,
	684, 683, 37, 682, 379, 11, 61, 680, 679, 678,
	649, 675, 674, 673, 672, 671, 670, 668, 667, 661,
	652, 650, 648, 647, 645, 644, 524, 31, 44, 17,
	35, 642, 640, 4, 19, 639, 16, 7, 33, 622,
	8, 29, 616, 611, 26, 10, 609, 608, 3, 2,
	5, 23, 52, 607, 15, 603, 9, 597, 595, 590,
	38, 585, 18, 582, 58, 576,
}
var yyR1 = []int{

	0, 129, 129, 80, 80, 80, 80, 80, 80, 81,
	82, 83, 84, 85, 85, 85, 85, 85, 86, 92,
	92, 92, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 39, 39, 41, 40, 69, 68, 68, 68,
	68, 68, 130, 130, 67, 67, 66, 66, 66, 18,
	18, 17, 17, 16, 44, 44, 43, 42, 42, 42,
	42, 42, 131, 131, 45, 45, 45, 47, 46, 46,
	46, 51, 52, 50, 50, 54, 54, 53, 132, 132,
	48, 48, 48, 133, 133, 55, 56, 56, 57, 15,
	15, 14, 58, 58, 59, 60, 60, 61, 61, 12,
	12, 62, 62, 63, 64, 64, 65, 71, 71, 70,
	73, 73, 72, 79, 79, 78, 78, 75, 75, 74,
	77, 77, 76, 87, 87, 96, 96, 134, 134, 134,
	135, 135, 98, 98, 97, 103, 103, 102, 101, 101,
	99, 100, 100, 88, 88, 89, 90, 90, 90, 107,
	109, 109, 108, 114, 114, 113, 105, 105, 104, 104,
	19, 106, 32, 32, 110, 112, 112, 111, 91, 91,
	115, 115, 115, 115, 116, 116, 116, 120, 120, 117,
	117, 117, 118, 119, 93, 93, 121, 122, 122, 123,
	123, 124, 124, 124, 128, 128, 126, 127, 127, 94,
	94, 95, 125, 125, 49, 49, 49, 49, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 8, 8, 7, 7, 6, 4, 13,
	13, 5, 5, 5, 20, 21, 21, 22, 25, 25,
	23, 24, 24, 33, 33, 33, 34, 26, 26, 27,
	27, 27, 30, 30, 29, 29, 31, 28, 28, 35,
	36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 4, 1, 3, 4, 3, 4,
	3, 4, 1, 1, 5, 5, 2, 1, 2, 2,
	3, 4, 1, 1, 1, 3, 1, 3, 2, 0,
	1, 1, 2, 1, 0, 1, 2, 1, 1, 4,
	4, 5, 1, 1, 4, 6, 6, 4, 4, 6,
	6, 1, 1, 0, 2, 0, 1, 4, 0, 1,
	0, 1, 2, 0, 1, 4, 0, 1, 2, 1,
	3, 3, 0, 1, 2, 0, 1, 5, 1, 1,
	3, 0, 1, 2, 0, 1, 2, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 1, 0, 1, 2,
	0, 1, 2, 6, 9, 4, 2, 0, 5, 6,
	1, 2, 1, 3, 6, 0, 1, 2, 1, 2,
	2, 0, 3, 6, 9, 7, 8, 7, 7, 2,
	1, 3, 4, 0, 1, 4, 1, 3, 3, 3,
	1, 1, 0, 2, 2, 1, 3, 2, 10, 13,
	0, 6, 6, 6, 0, 6, 6, 0, 6, 2,
	3, 2, 1, 2, 6, 11, 1, 1, 3, 0,
	3, 0, 2, 2, 1, 3, 1, 0, 2, 5,
	5, 6, 0, 3, 1, 3, 3, 4, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 5, 5, 4, 5, 6, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 0,
	1, 1, 1, 1, 3, 1, 1, 3, 4, 5,
	2, 0, 2, 4, 5, 4, 1, 1, 1, 4,
	4, 4, 1, 3, 3, 3, 2, 6, 6, 3,
	1, 1,
}
var yyChk = []int{

	-1000, -129, -80, -9, -81, -82, -83, -84, -85, -86,
	-10, 92, 49, 50, 107, 48, -37, -87, -88, -89,
	-90, -91, -92, -1, -2, 162, 126, -5, -33, 88,
	-20, -26, -35, -38, 68, 146, 34, 145, 87, -93,
	-94, -95, 93, 89, 51, 138, 94, 161, 132, -3,
	-4, 164, 165, 166, -34, 20, -27, -28, 167, -39,
	28, 40, 5, 169, 171, 8, 129, 45, 9, 52,
	-41, -40, -43, -69, 55, 125, 190, 171, 185, 88,
	186, 187, 188, 184, 7, 99, 177, 178, 179, 180,
	181, 182, 183, 13, 92, 80, 62, 158, 71, -9,
	-9, -80, -80, -3, -9, -71, 141, 69, 46, -70,
	100, 70, 70, 55, -96, -51, -52, 162, 70, 167,
	-21, -22, -23, -9, -25, 154, -36, -9, -37, 108,
	65, 108, 65, 65, -8, -7, -6, 132, -13, -12,
	-9, -30, -29, -19, 162, -30, -30, -9, -9, -56,
	-57, 78, -44, -43, -42, -45, -47, -52, -51, 133,
	167, -68, -67, 38, 4, -130, -66, 113, 42, 186,
	-9, 162, 163, 171, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-11, -10, 13, 80, 62, 158, -9, -9, -9, 93,
	92, 89, 151, 15, 94, 132, 9, 95, 14, -74,
	-76, 81, 96, -39, 4, -39, 4, -39, 4, 18,
	-96, -96, -96, -54, -53, 147, 175, -18, -17, -16,
	10, 162, -96, -13, 38, 186, 44, -25, 154, -24,
	43, -9, 168, 65, -121, 162, 65, -122, -52, -51,
	-122, 170, 174, 175, 172, 174, -31, 174, 123, 62,
	158, -31, -31, 54, 54, -58, -59, 155, -15, -14,
	-16, -56, -48, 67, 77, -50, 190, 175, 175, -37,
	174, -67, -130, -67, -9, 190, -18, -9, 172, 175,
	7, 190, 171, 185, 88, 186, 187, 188, 184, -11,
	-9, -9, -9, 93, 89, 151, 15, 94, 132, 9,
	95, 14, -77, -76, -75, -74, -9, -9, -39, -39,
	-39, -73, -72, -9, -134, 167, -134, 167, -54, -107,
	-110, 127, 144, -132, 108, -52, 162, -16, 149, 168,
	-9, 168, -24, -9, -9, 134, 97, 97, 97, 190,
	175, 190, -6, -9, -9, 44, -29, -9, -9, -9,
	44, 44, -30, -30, -60, -61, 58, -63, 79, -9,
	174, 177, -58, 72, 91, -131, 143, 53, -133, 101,
	-18, -49, 162, -52, -52, 168, -66, -9, -18, 186,
	172, 173, 172, -9, -11, 162, 163, 171, -9, -11,
	-11, -11, -11, -11, -11, 7, 174, -79, -78, 11,
	36, -98, -97, 152, -99, 73, 108, -135, -98, -99,
	-58, -110, -58, -58, -109, -108, -49, -112, -111, -49,
	74, -18, -45, 167, 168, 134, -9, -122, -122, -122,
	-121, -52, -121, -32, 154, -32, -69, 18, -15, -14,
	-9, -60, -46, -52, -51, 133, -46, -9, -54, 190,
	171, -50, -50, -18, -18, 172, -9, 172, 175, -11,
	-72, -103, 174, -102, 118, 167, -100, 174, 174, 73,
	-9, -103, -100, -75, -58, -75, -75, 174, 177, 174,
	-114, -113, 54, -9, 97, -37, -9, -124, 149, 167,
	-125, 116, 44, -9, 44, -12, -50, 175, 175, -18,
	162, 163, -9, -18, -18, 172, 173, 172, -9, -97,
	-101, -67, -130, -9, 168, 150, 150, 174, 168, -103,
	-75, -103, -103, -108, -9, -111, -105, -104, -19, -99,
	73, 108, 168, 153, 59, -128, -126, -9, 135, -62,
	-63, -18, -52, -52, 172, -54, -54, 172, -9, 174,
	-37, -9, 168, 150, -37, -103, -114, -32, 174, 62,
	158, -115, 154, 73, -17, 168, 174, -121, -64, -65,
	60, -55, 97, -50, -50, -9, -103, 168, -103, 44,
	-104, -106, -49, -106, -75, 85, 92, 97, -123, 103,
	-126, -9, -132, -18, -18, 168, -103, 134, 85, -99,
	-127, 155, 18, 74, -55, -55, 145, 34, 134, -115,
	-124, -126, -9, -9, -117, -107, -110, -118, -58, 68,
	-75, -116, 154, -58, -110, -58, -120, 154, -119, -9,
	-103, 85, 92, -58, 92, -58, 134, 85, 85, 34,
	134, 134, -118, 68, 68, -120, -119, -119,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	208, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 259, 260, -2, 262, 263, 264, 0,
	266, 267, 268, 107, 0, 0, 0, 0, 0, 19,
	20, 21, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 301, 302, 303, 0, 0, 317, 318, 0, 25,
	0, 0, 0, 293, 299, 0, 0, 0, 0, 0,
	32, 33, 86, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	258, 9, 10, 11, 265, 22, 0, 0, 0, 108,
	0, 0, 0, 0, 75, 0, 49, -2, 0, 299,
	0, 305, 306, 0, 311, 0, 0, 330, 331, 0,
	0, 0, 0, 0, 0, 294, 295, 0, 0, 300,
	99, 0, 322, 0, 160, 0, 0, 0, 0, 92,
	87, 0, 86, 55, -2, 57, 58, 73, 0, 0,
	0, 36, 37, 0, 0, 0, 44, 42, 43, 46,
	49, 209, 210, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, -2, -2, -2, -2, -2, -2, -2,
	0, 269, 0, 0, 0, 0, -2, -2, -2, 240,
	0, 242, 244, 246, 248, 250, 252, 254, 256, 120,
	117, 0, 0, 26, 0, 28, 0, 30, 0, 0,
	127, 127, 75, 0, 76, 78, 0, 126, 50, 51,
	0, 53, 0, 0, 0, 0, 304, 311, 0, 310,
	0, 0, 329, 0, 0, 186, 0, 0, 187, 0,
	0, 292, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 93, 0, 88, 89,
	0, 92, 0, 81, 83, 49, 0, 0, 0, 0,
	0, 38, 0, 39, 49, 0, 48, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 241, 243, 245, 247, 249, 251, 253,
	255, 257, 23, 121, 24, 118, 119, 122, 27, 29,
	31, 109, 110, 113, 0, 0, 0, 0, 92, 92,
	92, 0, 0, 0, 79, 49, 72, 52, 0, 313,
	0, 315, 307, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 296, 297, 100, 319, 323, 326, 324, 325,
	320, 321, 162, 162, 0, 96, 0, 98, 0, 94,
	0, 0, 95, 0, 0, 0, 62, 63, 82, 84,
	75, 74, 204, 73, 73, 49, 45, 49, 40, 47,
	211, 212, 214, 0, 232, 270, 271, 0, 0, 277,
	278, 279, 280, 281, 282, 0, 0, 112, 114, 115,
	116, 135, 132, 0, 141, 130, 0, 0, 135, 141,
	117, 92, 117, 117, 149, 150, 0, 164, 165, 153,
	0, 125, 0, 0, 314, 0, 308, 191, 0, 199,
	200, 188, 202, 0, 0, 0, 34, 0, 103, 90,
	91, 35, 59, 73, 0, 0, 60, 49, 64, 0,
	0, 49, 49, 67, 41, 215, 0, 274, 0, 233,
	111, 123, 0, 136, 0, 0, 0, 0, 0, 131,
	140, 143, 0, 135, 117, 135, 135, 0, 0, 0,
	167, 154, 0, 77, 0, 0, 309, 184, 0, 0,
	201, 0, 327, 163, 328, 101, 49, 0, 0, 61,
	205, 206, 0, 75, 75, 272, 273, 275, 0, 133,
	137, 138, 0, 0, 0, 0, 0, 0, 0, 145,
	135, 147, 148, 151, 153, 166, 162, 156, 0, 170,
	130, 0, 0, 192, 193, 0, 194, 196, 0, 104,
	102, 0, 73, 73, 207, 65, 66, 276, 139, 0,
	135, 142, 128, 0, 135, 146, 152, 0, 0, 0,
	0, 117, 0, 131, 0, 189, 0, 203, 97, 105,
	0, 68, 78, 49, 49, 0, 124, 129, 144, 155,
	157, 158, 161, 159, 135, 0, 0, 0, 197, 0,
	195, 106, 0, 0, 0, 134, 168, 0, 0, 170,
	191, 0, 0, 0, 69, 70, 0, 92, 0, 117,
	185, 198, 190, 85, 174, 92, 92, 177, 182, 0,
	135, 171, 0, 179, 92, 181, 172, 0, 173, 92,
	169, 0, 0, 180, 0, 183, 0, 0, 0, 92,
	0, 0, 177, 0, 0, 175, 176, 178,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:356
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:361
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:382
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:389
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:396
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:403
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		//line n1ql.y:434
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 23:
		//line n1ql.y:438
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:442
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:448
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 26:
		//line n1ql.y:453
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 27:
		//line n1ql.y:458
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:463
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:468
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:473
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:478
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		//line n1ql.y:491
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 35:
		//line n1ql.y:498
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 36:
		//line n1ql.y:513
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 37:
		//line n1ql.y:520
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 38:
		//line n1ql.y:525
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:530
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:535
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 41:
		//line n1ql.y:540
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 44:
		//line n1ql.y:553
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 45:
		//line n1ql.y:558
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 46:
		//line n1ql.y:565
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 47:
		//line n1ql.y:570
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 48:
		//line n1ql.y:575
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 49:
		//line n1ql.y:582
		{
			yyVAL.s = ""
		}
	case 50:
		yyVAL.s = yyS[yypt-0].s
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		//line n1ql.y:593
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 53:
		yyVAL.s = yyS[yypt-0].s
	case 54:
		//line n1ql.y:611
		{
			yyVAL.fromTerm = nil
		}
	case 55:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 56:
		//line n1ql.y:620
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 57:
		//line n1ql.y:627
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 58:
		//line n1ql.y:632
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 59:
		//line n1ql.y:637
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 60:
		//line n1ql.y:642
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 61:
		//line n1ql.y:647
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 64:
		//line n1ql.y:660
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 65:
		//line n1ql.y:665
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:670
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:677
		{
			if yyS[yypt-0].s == "" {
				yylex.Error("Subquery in FROM clause must have an alias.")
			} else {
				yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
			}
		}
	case 68:
		//line n1ql.y:688
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 69:
		//line n1ql.y:693
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 70:
		//line n1ql.y:698
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 71:
		yyVAL.s = yyS[yypt-0].s
	case 72:
		yyVAL.s = yyS[yypt-0].s
	case 73:
		//line n1ql.y:713
		{
			yyVAL.path = nil
		}
	case 74:
		//line n1ql.y:718
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 75:
		//line n1ql.y:725
		{
			yyVAL.expr = nil
		}
	case 76:
		yyVAL.expr = yyS[yypt-0].expr
	case 77:
		//line n1ql.y:734
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 78:
		//line n1ql.y:741
		{
		}
	case 80:
		//line n1ql.y:749
		{
			yyVAL.b = false
		}
	case 81:
		//line n1ql.y:754
		{
			yyVAL.b = false
		}
	case 82:
		//line n1ql.y:759
		{
			yyVAL.b = true
		}
	case 85:
		//line n1ql.y:772
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 86:
		//line n1ql.y:786
		{
			yyVAL.bindings = nil
		}
	case 87:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 88:
		//line n1ql.y:795
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 89:
		//line n1ql.y:802
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 90:
		//line n1ql.y:807
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 91:
		//line n1ql.y:814
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 92:
		//line n1ql.y:828
		{
			yyVAL.expr = nil
		}
	case 93:
		yyVAL.expr = yyS[yypt-0].expr
	case 94:
		//line n1ql.y:837
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 95:
		//line n1ql.y:851
		{
			yyVAL.group = nil
		}
	case 96:
		yyVAL.group = yyS[yypt-0].group
	case 97:
		//line n1ql.y:860
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 98:
		//line n1ql.y:865
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 99:
		//line n1ql.y:872
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 100:
		//line n1ql.y:877
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 101:
		//line n1ql.y:884
		{
			yyVAL.bindings = nil
		}
	case 102:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 103:
		//line n1ql.y:893
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 104:
		//line n1ql.y:900
		{
			yyVAL.expr = nil
		}
	case 105:
		yyVAL.expr = yyS[yypt-0].expr
	case 106:
		//line n1ql.y:909
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 107:
		//line n1ql.y:923
		{
			yyVAL.order = nil
		}
	case 108:
		yyVAL.order = yyS[yypt-0].order
	case 109:
		//line n1ql.y:932
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 110:
		//line n1ql.y:939
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 111:
		//line n1ql.y:944
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 112:
		//line n1ql.y:951
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 113:
		//line n1ql.y:958
		{
			yyVAL.b = false
		}
	case 114:
		yyVAL.b = yyS[yypt-0].b
	case 115:
		//line n1ql.y:967
		{
			yyVAL.b = false
		}
	case 116:
		//line n1ql.y:972
		{
			yyVAL.b = true
		}
	case 117:
		//line n1ql.y:986
		{
			yyVAL.expr = nil
		}
	case 118:
		yyVAL.expr = yyS[yypt-0].expr
	case 119:
		//line n1ql.y:995
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 120:
		//line n1ql.y:1009
		{
			yyVAL.expr = nil
		}
	case 121:
		yyVAL.expr = yyS[yypt-0].expr
	case 122:
		//line n1ql.y:1018
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 123:
		//line n1ql.y:1032
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 124:
		//line n1ql.y:1037
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 125:
		//line n1ql.y:1044
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 126:
		//line n1ql.y:1049
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 132:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 133:
		//line n1ql.y:1072
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 134:
		//line n1ql.y:1079
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 135:
		//line n1ql.y:1086
		{
			yyVAL.projection = nil
		}
	case 136:
		yyVAL.projection = yyS[yypt-0].projection
	case 137:
		//line n1ql.y:1095
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 138:
		//line n1ql.y:1102
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 139:
		//line n1ql.y:1107
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 140:
		//line n1ql.y:1114
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		//line n1ql.y:1121
		{
			yyVAL.expr = nil
		}
	case 142:
		//line n1ql.y:1126
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 143:
		//line n1ql.y:1140
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 144:
		//line n1ql.y:1145
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1159
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1173
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1178
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 148:
		//line n1ql.y:1183
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 149:
		//line n1ql.y:1190
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 150:
		//line n1ql.y:1197
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 151:
		//line n1ql.y:1202
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 152:
		//line n1ql.y:1209
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 153:
		//line n1ql.y:1216
		{
			yyVAL.updateFor = nil
		}
	case 154:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 155:
		//line n1ql.y:1225
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 156:
		//line n1ql.y:1232
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 157:
		//line n1ql.y:1237
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 158:
		//line n1ql.y:1244
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 159:
		//line n1ql.y:1249
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 160:
		yyVAL.s = yyS[yypt-0].s
	case 161:
		//line n1ql.y:1260
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 162:
		//line n1ql.y:1267
		{
			yyVAL.expr = nil
		}
	case 163:
		//line n1ql.y:1272
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 164:
		//line n1ql.y:1279
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 165:
		//line n1ql.y:1286
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 166:
		//line n1ql.y:1291
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 167:
		//line n1ql.y:1298
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 168:
		//line n1ql.y:1312
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 169:
		//line n1ql.y:1318
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 170:
		//line n1ql.y:1326
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 171:
		//line n1ql.y:1331
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 172:
		//line n1ql.y:1336
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 173:
		//line n1ql.y:1341
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1348
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 175:
		//line n1ql.y:1353
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 176:
		//line n1ql.y:1358
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 177:
		//line n1ql.y:1365
		{
			yyVAL.mergeInsert = nil
		}
	case 178:
		//line n1ql.y:1370
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 179:
		//line n1ql.y:1377
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 180:
		//line n1ql.y:1382
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1387
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1394
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 183:
		//line n1ql.y:1401
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 184:
		//line n1ql.y:1415
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-1].keyspaceRef, yyS[yypt-0].indexType)
		}
	case 185:
		//line n1ql.y:1420
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-8].s, yyS[yypt-6].keyspaceRef, yyS[yypt-4].exprs, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].indexType)
		}
	case 186:
		yyVAL.s = yyS[yypt-0].s
	case 187:
		//line n1ql.y:1431
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 188:
		//line n1ql.y:1436
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 189:
		//line n1ql.y:1443
		{
			yyVAL.expr = nil
		}
	case 190:
		//line n1ql.y:1448
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 191:
		//line n1ql.y:1455
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 192:
		//line n1ql.y:1460
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 193:
		//line n1ql.y:1465
		{
			yyVAL.indexType = datastore.GSI
		}
	case 194:
		//line n1ql.y:1472
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 195:
		//line n1ql.y:1477
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 196:
		//line n1ql.y:1484
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 197:
		//line n1ql.y:1495
		{
			yyVAL.expr = nil
		}
	case 198:
		//line n1ql.y:1500
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 199:
		//line n1ql.y:1514
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 200:
		//line n1ql.y:1519
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 201:
		//line n1ql.y:1532
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 202:
		//line n1ql.y:1538
		{
			yyVAL.s = ""
		}
	case 203:
		//line n1ql.y:1543
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 204:
		//line n1ql.y:1557
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 205:
		//line n1ql.y:1562
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 206:
		//line n1ql.y:1567
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 207:
		//line n1ql.y:1574
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 208:
		yyVAL.expr = yyS[yypt-0].expr
	case 209:
		//line n1ql.y:1591
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 210:
		//line n1ql.y:1596
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 211:
		//line n1ql.y:1603
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 212:
		//line n1ql.y:1608
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 213:
		//line n1ql.y:1615
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 214:
		//line n1ql.y:1620
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 215:
		//line n1ql.y:1625
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 216:
		//line n1ql.y:1631
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 217:
		//line n1ql.y:1636
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 218:
		//line n1ql.y:1641
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 219:
		//line n1ql.y:1646
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 220:
		//line n1ql.y:1651
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 221:
		//line n1ql.y:1657
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 222:
		//line n1ql.y:1663
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 223:
		//line n1ql.y:1668
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 224:
		//line n1ql.y:1673
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 225:
		//line n1ql.y:1679
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 226:
		//line n1ql.y:1684
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1689
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1694
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1699
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1704
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1709
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1714
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1719
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1724
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1729
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1734
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1739
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1744
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1749
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 240:
		//line n1ql.y:1754
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 241:
		//line n1ql.y:1759
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 242:
		//line n1ql.y:1764
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 243:
		//line n1ql.y:1769
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 244:
		//line n1ql.y:1774
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 245:
		//line n1ql.y:1779
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 246:
		//line n1ql.y:1784
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 247:
		//line n1ql.y:1789
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 248:
		//line n1ql.y:1794
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 249:
		//line n1ql.y:1799
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 250:
		//line n1ql.y:1804
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 251:
		//line n1ql.y:1809
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 252:
		//line n1ql.y:1814
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 253:
		//line n1ql.y:1819
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 254:
		//line n1ql.y:1824
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 255:
		//line n1ql.y:1829
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 256:
		//line n1ql.y:1834
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 257:
		//line n1ql.y:1839
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 258:
		//line n1ql.y:1844
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 259:
		yyVAL.expr = yyS[yypt-0].expr
	case 260:
		yyVAL.expr = yyS[yypt-0].expr
	case 261:
		//line n1ql.y:1858
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 262:
		//line n1ql.y:1864
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 263:
		yyVAL.expr = yyS[yypt-0].expr
	case 264:
		yyVAL.expr = yyS[yypt-0].expr
	case 265:
		//line n1ql.y:1876
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 266:
		yyVAL.expr = yyS[yypt-0].expr
	case 267:
		yyVAL.expr = yyS[yypt-0].expr
	case 268:
		yyVAL.expr = yyS[yypt-0].expr
	case 269:
		yyVAL.expr = yyS[yypt-0].expr
	case 270:
		//line n1ql.y:1895
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 271:
		//line n1ql.y:1900
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 272:
		//line n1ql.y:1907
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 273:
		//line n1ql.y:1912
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 274:
		//line n1ql.y:1919
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 275:
		//line n1ql.y:1924
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 276:
		//line n1ql.y:1929
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 277:
		//line n1ql.y:1935
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 278:
		//line n1ql.y:1940
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 279:
		//line n1ql.y:1945
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 280:
		//line n1ql.y:1950
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 281:
		//line n1ql.y:1955
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 282:
		//line n1ql.y:1961
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 283:
		//line n1ql.y:1975
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 284:
		//line n1ql.y:1980
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 285:
		//line n1ql.y:1985
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 286:
		//line n1ql.y:1990
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 287:
		//line n1ql.y:1995
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 288:
		//line n1ql.y:2000
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 289:
		//line n1ql.y:2005
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 290:
		yyVAL.expr = yyS[yypt-0].expr
	case 291:
		yyVAL.expr = yyS[yypt-0].expr
	case 292:
		//line n1ql.y:2025
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 293:
		//line n1ql.y:2032
		{
			yyVAL.bindings = nil
		}
	case 294:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 295:
		//line n1ql.y:2041
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 296:
		//line n1ql.y:2046
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 297:
		//line n1ql.y:2053
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 298:
		//line n1ql.y:2060
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 299:
		//line n1ql.y:2067
		{
			yyVAL.exprs = nil
		}
	case 300:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 301:
		//line n1ql.y:2083
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 302:
		//line n1ql.y:2088
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 303:
		//line n1ql.y:2093
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 304:
		//line n1ql.y:2108
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 305:
		yyVAL.expr = yyS[yypt-0].expr
	case 306:
		yyVAL.expr = yyS[yypt-0].expr
	case 307:
		//line n1ql.y:2121
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 308:
		//line n1ql.y:2128
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 309:
		//line n1ql.y:2133
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 310:
		//line n1ql.y:2141
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 311:
		//line n1ql.y:2148
		{
			yyVAL.expr = nil
		}
	case 312:
		//line n1ql.y:2153
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 313:
		//line n1ql.y:2167
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 314:
		//line n1ql.y:2186
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 315:
		//line n1ql.y:2201
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 316:
		yyVAL.s = yyS[yypt-0].s
	case 317:
		yyVAL.expr = yyS[yypt-0].expr
	case 318:
		yyVAL.expr = yyS[yypt-0].expr
	case 319:
		//line n1ql.y:2239
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 320:
		//line n1ql.y:2244
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 321:
		//line n1ql.y:2249
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 322:
		//line n1ql.y:2256
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 323:
		//line n1ql.y:2261
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 324:
		//line n1ql.y:2268
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 325:
		//line n1ql.y:2273
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 326:
		//line n1ql.y:2280
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 327:
		//line n1ql.y:2287
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 328:
		//line n1ql.y:2292
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 329:
		//line n1ql.y:2306
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 330:
		yyVAL.expr = yyS[yypt-0].expr
	case 331:
		//line n1ql.y:2315
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
