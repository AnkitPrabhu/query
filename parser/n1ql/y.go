//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BY = 57360
const CALL = 57361
const CASE = 57362
const CAST = 57363
const CLUSTER = 57364
const COLLATE = 57365
const COLLECTION = 57366
const COMMIT = 57367
const CONNECT = 57368
const CONTINUE = 57369
const CREATE = 57370
const DATABASE = 57371
const DATASET = 57372
const DATASTORE = 57373
const DECLARE = 57374
const DECREMENT = 57375
const DELETE = 57376
const DERIVED = 57377
const DESC = 57378
const DESCRIBE = 57379
const DISTINCT = 57380
const DO = 57381
const DROP = 57382
const EACH = 57383
const ELEMENT = 57384
const ELSE = 57385
const END = 57386
const EVERY = 57387
const EXCEPT = 57388
const EXCLUDE = 57389
const EXECUTE = 57390
const EXISTS = 57391
const EXPLAIN = 57392
const FALSE = 57393
const FIRST = 57394
const FLATTEN = 57395
const FOR = 57396
const FROM = 57397
const FUNCTION = 57398
const GRANT = 57399
const GROUP = 57400
const GSI = 57401
const HAVING = 57402
const IF = 57403
const IN = 57404
const INCLUDE = 57405
const INCREMENT = 57406
const INDEX = 57407
const INLINE = 57408
const INNER = 57409
const INSERT = 57410
const INTERSECT = 57411
const INTO = 57412
const IS = 57413
const JOIN = 57414
const KEY = 57415
const KEYS = 57416
const KEYSPACE = 57417
const LAST = 57418
const LEFT = 57419
const LET = 57420
const LETTING = 57421
const LIKE = 57422
const LIMIT = 57423
const LSM = 57424
const MAP = 57425
const MAPPING = 57426
const MATCHED = 57427
const MATERIALIZED = 57428
const MERGE = 57429
const MINUS = 57430
const MISSING = 57431
const NAMESPACE = 57432
const NEST = 57433
const NOT = 57434
const NULL = 57435
const NUMBER = 57436
const OBJECT = 57437
const OFFSET = 57438
const ON = 57439
const OPTION = 57440
const OR = 57441
const ORDER = 57442
const OUTER = 57443
const OVER = 57444
const PARTITION = 57445
const PASSWORD = 57446
const PATH = 57447
const POOL = 57448
const PREPARE = 57449
const PRIMARY = 57450
const PRIVATE = 57451
const PRIVILEGE = 57452
const PROCEDURE = 57453
const PUBLIC = 57454
const RAW = 57455
const REALM = 57456
const REDUCE = 57457
const RENAME = 57458
const RETURN = 57459
const RETURNING = 57460
const REVOKE = 57461
const RIGHT = 57462
const ROLE = 57463
const ROLLBACK = 57464
const SATISFIES = 57465
const SCHEMA = 57466
const SELECT = 57467
const SELF = 57468
const SET = 57469
const SHOW = 57470
const SOME = 57471
const START = 57472
const STATISTICS = 57473
const STRING = 57474
const SYSTEM = 57475
const THEN = 57476
const TO = 57477
const TRANSACTION = 57478
const TRIGGER = 57479
const TRUE = 57480
const TRUNCATE = 57481
const UNDER = 57482
const UNION = 57483
const UNIQUE = 57484
const UNNEST = 57485
const UNSET = 57486
const UPDATE = 57487
const UPSERT = 57488
const USE = 57489
const USER = 57490
const USING = 57491
const VALUE = 57492
const VALUED = 57493
const VALUES = 57494
const VIEW = 57495
const WHEN = 57496
const WHERE = 57497
const WHILE = 57498
const WITH = 57499
const WITHIN = 57500
const WORK = 57501
const XOR = 57502
const INT = 57503
const IDENTIFIER = 57504
const IDENTIFIER_ICASE = 57505
const NAMED_PARAM = 57506
const POSITIONAL_PARAM = 57507
const NEXT_PARAM = 57508
const LPAREN = 57509
const RPAREN = 57510
const LBRACE = 57511
const RBRACE = 57512
const LBRACKET = 57513
const RBRACKET = 57514
const RBRACKET_ICASE = 57515
const COMMA = 57516
const COLON = 57517
const INTERESECT = 57518
const EQ = 57519
const DEQ = 57520
const NE = 57521
const LT = 57522
const GT = 57523
const LE = 57524
const GE = 57525
const CONCAT = 57526
const PLUS = 57527
const STAR = 57528
const DIV = 57529
const MOD = 57530
const UMINUS = 57531
const DOT = 57532

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	167, 315,
	-2, 260,
	-1, 117,
	175, 69,
	-2, 70,
	-1, 154,
	53, 78,
	72, 78,
	91, 78,
	143, 78,
	-2, 56,
	-1, 181,
	177, 0,
	178, 0,
	179, 0,
	-2, 224,
	-1, 182,
	177, 0,
	178, 0,
	179, 0,
	-2, 225,
	-1, 183,
	177, 0,
	178, 0,
	179, 0,
	-2, 226,
	-1, 184,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 227,
	-1, 185,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 228,
	-1, 186,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 229,
	-1, 187,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 230,
	-1, 194,
	80, 0,
	-2, 233,
	-1, 195,
	62, 0,
	158, 0,
	-2, 235,
	-1, 196,
	62, 0,
	158, 0,
	-2, 237,
	-1, 297,
	80, 0,
	-2, 234,
	-1, 298,
	62, 0,
	158, 0,
	-2, 236,
	-1, 299,
	62, 0,
	158, 0,
	-2, 238,
}

const yyNprod = 331
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3074

var yyAct = []int{

	168, 3, 634, 623, 466, 632, 624, 326, 327, 542,
	567, 311, 99, 100, 577, 492, 587, 410, 225, 422,
	226, 330, 143, 532, 485, 273, 221, 242, 439, 424,
	104, 364, 421, 160, 408, 16, 139, 471, 163, 319,
	245, 448, 155, 267, 407, 361, 115, 164, 141, 142,
	266, 136, 237, 208, 227, 274, 123, 289, 321, 127,
	59, 73, 348, 346, 116, 140, 368, 365, 503, 147,
	148, 10, 292, 293, 294, 502, 288, 469, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 128, 77, 194, 195, 196, 487,
	456, 347, 276, 456, 289, 291, 483, 571, 98, 77,
	80, 81, 82, 572, 76, 145, 146, 440, 275, 455,
	140, 157, 455, 288, 93, 79, 239, 440, 76, 169,
	170, 251, 291, 467, 256, 224, 277, 564, 171, 156,
	522, 252, 367, 79, 484, 482, 472, 255, 473, 402,
	253, 250, 249, 385, 63, 188, 263, 391, 392, 583,
	558, 537, 253, 494, 281, 189, 393, 211, 213, 215,
	523, 519, 284, 96, 248, 401, 338, 169, 170, 247,
	247, 336, 98, 158, 240, 255, 171, 283, 289, 470,
	324, 95, 297, 298, 299, 278, 280, 246, 246, 79,
	279, 295, 290, 292, 293, 294, 268, 288, 77, 322,
	313, 314, 117, 119, 379, 289, 456, 429, 320, 505,
	506, 83, 78, 80, 81, 82, 77, 76, 228, 290,
	292, 293, 294, 337, 288, 455, 451, 340, 158, 341,
	78, 80, 81, 82, 144, 76, 243, 325, 333, 229,
	117, 565, 350, 265, 351, 607, 291, 354, 355, 356,
	190, 310, 189, 329, 257, 117, 366, 117, 238, 97,
	633, 628, 568, 315, 265, 316, 369, 317, 323, 409,
	383, 540, 77, 334, 149, 559, 521, 389, 339, 332,
	394, 520, 377, 493, 378, 83, 78, 80, 81, 82,
	384, 76, 349, 335, 539, 353, 223, 328, 254, 192,
	359, 360, 544, 647, 613, 646, 642, 614, 603, 137,
	75, 469, 496, 74, 329, 382, 535, 191, 124, 132,
	595, 331, 416, 418, 419, 417, 138, 216, 130, 289,
	380, 381, 415, 432, 376, 287, 296, 566, 214, 425,
	210, 427, 295, 290, 292, 293, 294, 312, 288, 189,
	258, 536, 189, 189, 189, 189, 189, 189, 414, 446,
	637, 578, 131, 453, 436, 538, 438, 638, 428, 236,
	229, 129, 157, 593, 433, 434, 435, 114, 74, 441,
	247, 247, 247, 75, 461, 489, 345, 344, 411, 74,
	156, 343, 459, 320, 454, 193, 457, 458, 246, 246,
	246, 445, 437, 452, 475, 447, 444, 450, 450, 476,
	268, 374, 268, 442, 479, 612, 291, 488, 478, 640,
	480, 481, 491, 412, 644, 449, 449, 269, 108, 643,
	370, 498, 465, 390, 140, 212, 395, 396, 397, 398,
	399, 400, 235, 477, 259, 260, 231, 507, 75, 371,
	591, 107, 604, 207, 513, 490, 209, 592, 209, 75,
	72, 518, 504, 189, 151, 501, 508, 509, 271, 609,
	500, 210, 426, 524, 529, 526, 527, 569, 272, 93,
	474, 525, 110, 118, 112, 543, 74, 111, 363, 218,
	219, 220, 514, 516, 425, 650, 230, 534, 517, 289,
	533, 373, 649, 625, 530, 528, 244, 241, 554, 365,
	547, 557, 295, 290, 292, 293, 294, 133, 288, 576,
	561, 585, 546, 106, 74, 551, 552, 113, 96, 499,
	497, 358, 357, 352, 153, 234, 645, 98, 608, 443,
	217, 413, 375, 49, 562, 556, 581, 464, 570, 560,
	563, 582, 372, 1, 79, 584, 75, 548, 549, 103,
	541, 606, 573, 543, 579, 580, 495, 597, 2, 590,
	594, 620, 596, 589, 84, 588, 588, 533, 586, 627,
	93, 486, 101, 102, 423, 602, 420, 204, 599, 600,
	598, 531, 206, 201, 468, 515, 41, 40, 543, 618,
	619, 605, 39, 22, 610, 611, 615, 617, 21, 20,
	621, 622, 616, 19, 18, 17, 635, 626, 629, 631,
	630, 636, 84, 9, 97, 228, 8, 639, 93, 96,
	7, 6, 641, 5, 4, 403, 404, 77, 98, 648,
	635, 635, 652, 653, 651, 309, 318, 95, 105, 109,
	83, 78, 80, 81, 82, 79, 76, 159, 575, 94,
	574, 545, 362, 264, 150, 222, 85, 199, 270, 152,
	198, 197, 202, 205, 154, 70, 71, 96, 33, 126,
	32, 54, 28, 306, 57, 56, 98, 31, 308, 303,
	122, 121, 120, 30, 134, 95, 135, 27, 50, 24,
	23, 0, 0, 79, 0, 0, 0, 94, 0, 0,
	203, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 510,
	511, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 84, 76, 0, 0,
	0, 0, 93, 301, 0, 0, 0, 300, 304, 307,
	0, 0, 0, 97, 0, 0, 0, 229, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 84, 76, 305, 0, 405, 0,
	93, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 302, 0, 0, 0, 95,
	0, 0, 0, 406, 0, 0, 0, 79, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 65,
	68, 0, 0, 0, 0, 79, 0, 0, 0, 94,
	0, 55, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	77, 462, 44, 69, 463, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 84, 76,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 29,
	43, 0, 0, 0, 42, 46, 0, 0, 77, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 84, 76, 0, 0,
	0, 0, 93, 96, 0, 0, 0, 26, 0, 0,
	66, 0, 98, 48, 0, 0, 0, 0, 0, 45,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	85, 0, 47, 25, 0, 51, 52, 53, 58, 0,
	63, 96, 64, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 386, 387, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	84, 76, 0, 228, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 285, 0, 0, 286, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	0, 84, 0, 0, 0, 96, 0, 93, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 162, 0,
	0, 79, 65, 68, 0, 94, 0, 0, 0, 0,
	0, 0, 85, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 161, 0, 0, 98, 166, 0, 0, 67,
	0, 0, 0, 12, 95, 44, 69, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 0, 29, 43, 77, 0, 11, 42, 46, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 84, 282, 0, 0, 0, 165, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	26, 0, 97, 66, 0, 0, 48, 0, 0, 0,
	0, 0, 45, 0, 0, 77, 0, 0, 0, 0,
	0, 86, 87, 88, 89, 90, 91, 92, 83, 78,
	80, 81, 82, 0, 76, 47, 25, 96, 51, 52,
	53, 58, 84, 63, 0, 64, 98, 0, 93, 62,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	167, 0, 0, 79, 0, 0, 0, 94, 0, 0,
	0, 0, 60, 0, 85, 0, 0, 0, 36, 0,
	0, 0, 0, 0, 61, 0, 0, 0, 0, 487,
	0, 0, 15, 0, 13, 0, 0, 96, 0, 74,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 84, 34, 0, 0, 95, 0, 93, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 94, 0, 0,
	0, 38, 0, 97, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 77, 0, 0, 0,
	0, 14, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 0, 76, 96, 0, 0, 75,
	0, 84, 0, 0, 0, 98, 0, 93, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 37,
	35, 0, 79, 97, 0, 0, 94, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 77, 0, 0, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 0, 76, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	84, 0, 0, 0, 95, 0, 93, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 94, 0, 0, 0,
	0, 0, 97, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 555, 0,
	0, 86, 87, 88, 89, 90, 91, 92, 83, 78,
	80, 81, 82, 0, 76, 96, 0, 0, 0, 0,
	84, 0, 0, 0, 98, 0, 93, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 79, 97, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 77, 553, 0, 0, 0,
	0, 86, 87, 88, 89, 90, 91, 92, 83, 78,
	80, 81, 82, 0, 76, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 84,
	0, 0, 0, 95, 0, 93, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 97, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 550, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 0, 76, 96, 0, 0, 0, 0, 84,
	0, 0, 0, 98, 0, 93, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	79, 97, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 77, 460, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 0, 76, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 431, 0, 0, 0,
	84, 0, 95, 0, 0, 0, 93, 0, 0, 0,
	79, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	97, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 84, 0,
	0, 0, 0, 95, 93, 0, 0, 0, 0, 0,
	97, 79, 0, 0, 0, 94, 0, 0, 0, 0,
	430, 0, 85, 77, 0, 0, 0, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 342, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 84, 0, 0,
	0, 95, 0, 93, 0, 0, 0, 0, 0, 79,
	0, 97, 0, 94, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 0, 76, 261, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 84, 0, 0,
	0, 98, 0, 93, 0, 0, 0, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 79, 97,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 77, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	0, 76, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 84, 0, 0, 0,
	95, 0, 93, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 97, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 90, 91, 92, 83, 78, 80, 81, 82, 0,
	76, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 125, 0, 84, 79, 97, 0,
	0, 94, 93, 0, 0, 0, 0, 0, 85, 0,
	0, 77, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 90, 91, 92, 83, 78, 80, 81, 82, 0,
	76, 65, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 166, 0, 97, 67, 95,
	0, 0, 12, 0, 44, 69, 0, 79, 0, 0,
	77, 94, 0, 0, 0, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 29, 43, 0, 0, 11, 42, 46, 0, 0,
	0, 65, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 26,
	0, 232, 66, 0, 0, 48, 0, 0, 67, 0,
	77, 45, 12, 0, 44, 69, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	0, 0, 93, 0, 47, 25, 0, 51, 52, 53,
	58, 0, 63, 0, 64, 0, 0, 0, 0, 0,
	0, 29, 43, 0, 0, 11, 42, 46, 0, 167,
	0, 65, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 26,
	98, 0, 66, 0, 0, 48, 0, 0, 67, 95,
	0, 45, 12, 0, 44, 69, 0, 79, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 25, 0, 51, 52, 53,
	58, 0, 63, 0, 64, 0, 0, 0, 0, 0,
	0, 29, 43, 0, 0, 11, 42, 46, 0, 233,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 26,
	0, 0, 66, 0, 0, 48, 0, 0, 0, 0,
	77, 45, 0, 0, 0, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 62, 76,
	0, 65, 68, 0, 47, 25, 0, 51, 52, 53,
	58, 0, 63, 55, 64, 0, 93, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 36, 0, 167,
	0, 0, 0, 61, 0, 0, 0, 0, 67, 0,
	0, 15, 12, 13, 44, 69, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 34, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	38, 29, 43, 95, 0, 11, 42, 46, 0, 0,
	0, 79, 65, 68, 0, 0, 0, 0, 0, 0,
	14, 0, 0, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 26,
	0, 0, 66, 0, 0, 48, 0, 0, 0, 67,
	0, 45, 0, 12, 0, 44, 69, 0, 37, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 25, 0, 51, 52, 53,
	58, 97, 63, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 29, 43, 77, 0, 11, 42, 46, 0,
	65, 68, 0, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 55, 76, 65, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 0,
	26, 0, 0, 66, 0, 0, 48, 67, 0, 0,
	0, 12, 45, 44, 69, 0, 0, 0, 0, 0,
	0, 67, 0, 0, 0, 12, 0, 44, 69, 0,
	0, 74, 0, 0, 0, 47, 25, 0, 51, 52,
	53, 58, 0, 63, 0, 64, 512, 0, 0, 0,
	29, 43, 0, 0, 11, 42, 46, 0, 0, 0,
	0, 0, 0, 0, 29, 43, 0, 0, 11, 42,
	46, 0, 65, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 0, 26, 0,
	0, 66, 0, 0, 48, 0, 0, 0, 0, 0,
	45, 75, 26, 0, 0, 66, 0, 0, 48, 67,
	0, 0, 0, 12, 45, 44, 69, 0, 0, 0,
	0, 0, 0, 47, 25, 0, 51, 52, 53, 58,
	0, 63, 0, 64, 388, 0, 0, 47, 25, 0,
	51, 52, 53, 58, 0, 63, 0, 64, 0, 0,
	0, 0, 29, 43, 0, 0, 11, 42, 46, 0,
	65, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 66, 0, 0, 48, 67, 0, 0,
	0, 12, 45, 44, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	0, 0, 0, 0, 0, 47, 25, 0, 51, 52,
	53, 58, 0, 63, 0, 64, 0, 0, 0, 0,
	29, 43, 0, 0, 11, 42, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 66, 0, 0, 48, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 25, 0, 51, 52, 53, 58,
	0, 63, 0, 64,
}
var yyPact = []int{

	2533, -1000, -1000, 2089, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2902, 2902, 1374, 1374, -15, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2902,
	-1000, -1000, -1000, 392, 427, 424, 482, 88, 423, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 46, 2814, -1000, -1000, 2726, -1000,
	273, 264, 462, 187, 2902, 82, 82, 82, 2902, 2902,
	-1000, -1000, 396, 479, 105, 1204, 15, 2902, 2902, 2902,
	2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902, 2902,
	2902, 2902, 2902, 881, 247, 2902, 2902, 2902, 588, 2349,
	37, -1000, -1000, -1000, -62, 385, 441, 344, 333, -1000,
	532, 88, 88, 88, 159, -40, 218, -1000, 88, 2293,
	501, -1000, -1000, 2020, 225, 2902, 16, 2089, -1000, 452,
	84, 451, 88, 88, -18, -23, -1000, -44, -31, -24,
	2089, 11, -1000, 202, -1000, 11, 11, 1960, 1891, 98,
	-1000, 87, 396, -1000, 411, -1000, -135, -57, -73, -1000,
	-38, 2203, 2383, 2902, -1000, -1000, -1000, -1000, 1123, -1000,
	-1000, 2902, 989, -76, -76, -62, -62, -62, 55, 2349,
	2169, 2543, 2543, 2543, 111, 111, 111, 111, 338, -1000,
	881, 2902, 2902, 2902, 476, 37, 37, -1000, 684, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 254, 387, 2902,
	2902, -1000, 268, -1000, 268, -1000, 268, 2902, 42, 23,
	159, 180, -1000, 223, 86, -1000, -1000, -1000, 87, -1000,
	154, 13, 2902, 8, -1000, 225, 2902, -1000, 2902, 1823,
	-1000, 304, 300, -1000, 299, -127, -1000, -74, -128, -1000,
	187, 2902, -1000, 2902, 499, 82, 2902, 2902, 2902, 498,
	497, 82, 82, 440, -1000, 2902, -32, -1000, -111, 98,
	368, -1000, 243, 218, 52, 86, 86, 2383, -38, 2902,
	-38, 625, -33, -1000, 941, -1000, 2712, 881, -5, 2902,
	881, 881, 881, 881, 881, 881, 168, 476, 37, 37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2089, 2089, -1000, -1000, -1000, -25, -1000,
	807, 127, 325, 127, 325, 98, 119, 98, 52, 52,
	408, -1000, 218, -1000, -1000, 50, -1000, 1752, -1000, -1000,
	1692, 2089, 2902, 88, 88, 88, 84, 86, 84, -1000,
	2089, 2089, -1000, -1000, 2089, 2089, 2089, -1000, -1000, -27,
	-27, 195, -1000, 531, -1000, 87, 2089, 87, 2902, 440,
	103, 103, 2902, -1000, -1000, -1000, -1000, 159, -68, -1000,
	-135, -135, -1000, 625, -1000, -1000, -1000, -1000, -1000, 1623,
	17, -1000, -1000, 2902, 759, -114, -114, -67, -67, -67,
	44, 881, 2902, -1000, -1000, -1000, -1000, -41, -1000, 22,
	-28, -26, 417, 2902, -41, -28, 387, 98, 387, 387,
	-29, -1000, -71, -30, -1000, 45, 2902, -1000, 298, 268,
	-1000, 2902, 2089, 144, -4, -1000, -1000, -1000, 206, 496,
	2902, 495, -1000, 2902, -32, -1000, 2089, -1000, -1000, -135,
	-100, -107, -1000, 625, -1000, 57, 2902, 218, 218, -1000,
	-1000, 577, -1000, 2624, 17, -1000, -1000, 127, -1000, 2203,
	2902, 3, 141, 136, -34, 2089, -1000, 2, 203, 387,
	203, 203, 52, 2902, 52, -1000, -1000, 82, 2089, 253,
	-7, 2089, -1000, 222, 2902, -1000, 177, -1000, 2089, -1000,
	-12, 218, 86, 86, -1000, -1000, -1000, 1563, 159, 159,
	-1000, -1000, -1000, 1494, -1000, -1000, -38, 2902, 1434, 268,
	2902, -8, 135, 268, -1000, 203, -1000, -1000, -1000, 1365,
	-1000, -37, -1000, 189, 118, -1000, 414, 218, -1000, -1000,
	-1000, -61, -1000, 2089, 84, 469, -1000, 274, -135, -135,
	-1000, -1000, -1000, -1000, 2089, 2902, 203, 2089, -1000, -9,
	203, -1000, -1000, 487, 82, 52, 52, 387, 375, -1000,
	286, 227, 2902, -1000, -1000, -1000, 2902, -1000, 223, 218,
	218, 1305, -1000, -1000, -1000, -1000, -1000, -1000, -68, -1000,
	203, 184, 377, 253, 100, 530, -1000, 2089, 405, 274,
	274, -1000, -1000, 280, 183, 118, 144, 2902, 2902, 2902,
	-1000, -1000, 180, 98, 445, 387, -1000, -1000, 2089, 2089,
	117, 119, 98, 116, -1000, 2902, 203, -1000, 285, -1000,
	98, -1000, -1000, 337, -1000, 1174, -1000, 182, 354, -1000,
	349, -1000, 512, 181, 179, 98, 444, 437, 116, 2902,
	2902, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 710, 709, 553, 708, 707, 51, 706, 704, 0,
	71, 155, 36, 336, 43, 50, 54, 20, 18, 22,
	703, 702, 701, 700, 52, 328, 697, 695, 694, 49,
	48, 308, 28, 692, 691, 690, 689, 35, 688, 60,
	686, 685, 684, 470, 679, 42, 41, 678, 19, 25,
	46, 64, 675, 26, 14, 284, 674, 6, 673, 45,
	672, 671, 31, 670, 668, 47, 33, 667, 61, 659,
	658, 39, 656, 357, 11, 53, 655, 646, 645, 578,
	644, 643, 641, 640, 636, 633, 625, 624, 623, 619,
	618, 613, 612, 607, 606, 387, 34, 44, 17, 37,
	605, 604, 4, 23, 601, 16, 7, 32, 596, 8,
	29, 594, 591, 24, 10, 589, 581, 3, 2, 5,
	27, 40, 580, 15, 576, 9, 571, 570, 563, 38,
	562, 21, 552, 58, 551,
}
var yyR1 = []int{

	0, 128, 128, 79, 79, 79, 79, 79, 79, 80,
	81, 82, 83, 84, 84, 84, 84, 84, 85, 91,
	91, 91, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 39, 39, 41, 40, 68, 67, 67, 67,
	67, 67, 129, 129, 66, 66, 65, 65, 65, 18,
	18, 17, 17, 16, 44, 44, 43, 42, 42, 42,
	42, 130, 130, 45, 45, 45, 46, 46, 46, 50,
	51, 49, 49, 53, 53, 52, 131, 131, 47, 47,
	47, 132, 132, 54, 55, 55, 56, 15, 15, 14,
	57, 57, 58, 59, 59, 60, 60, 12, 12, 61,
	61, 62, 63, 63, 64, 70, 70, 69, 72, 72,
	71, 78, 78, 77, 77, 74, 74, 73, 76, 76,
	75, 86, 86, 95, 95, 133, 133, 133, 134, 134,
	97, 97, 96, 102, 102, 101, 100, 100, 98, 99,
	99, 87, 87, 88, 89, 89, 89, 106, 108, 108,
	107, 113, 113, 112, 104, 104, 103, 103, 19, 105,
	32, 32, 109, 111, 111, 110, 90, 90, 114, 114,
	114, 114, 115, 115, 115, 119, 119, 116, 116, 116,
	117, 118, 92, 92, 120, 121, 121, 122, 122, 123,
	123, 123, 123, 127, 127, 125, 126, 126, 93, 93,
	94, 124, 124, 48, 48, 48, 48, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 8, 8, 7, 7, 6, 4, 13, 13,
	5, 5, 5, 20, 21, 21, 22, 25, 25, 23,
	24, 24, 33, 33, 33, 34, 26, 26, 27, 27,
	27, 30, 30, 29, 29, 31, 28, 28, 35, 36,
	36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 4, 1, 3, 4, 3, 4,
	3, 4, 1, 1, 5, 5, 2, 1, 2, 2,
	3, 4, 1, 1, 1, 3, 1, 3, 2, 0,
	1, 1, 2, 1, 0, 1, 2, 1, 4, 4,
	5, 1, 1, 4, 6, 6, 4, 6, 6, 1,
	1, 0, 2, 0, 1, 4, 0, 1, 0, 1,
	2, 0, 1, 4, 0, 1, 2, 1, 3, 3,
	0, 1, 2, 0, 1, 5, 1, 1, 3, 0,
	1, 2, 0, 1, 2, 0, 1, 3, 1, 3,
	2, 0, 1, 1, 1, 0, 1, 2, 0, 1,
	2, 6, 9, 4, 2, 0, 5, 6, 1, 2,
	1, 3, 6, 0, 1, 2, 1, 2, 2, 0,
	3, 6, 9, 7, 8, 7, 7, 2, 1, 3,
	4, 0, 1, 4, 1, 3, 3, 3, 1, 1,
	0, 2, 2, 1, 3, 2, 10, 13, 0, 6,
	6, 6, 0, 6, 6, 0, 6, 2, 3, 2,
	1, 2, 6, 11, 1, 1, 3, 0, 3, 0,
	2, 2, 2, 1, 3, 1, 0, 2, 5, 5,
	6, 0, 3, 1, 3, 3, 4, 1, 3, 3,
	5, 5, 4, 5, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 3, 3, 0, 1,
	1, 1, 1, 3, 1, 1, 3, 4, 5, 2,
	0, 2, 4, 5, 4, 1, 1, 1, 4, 4,
	4, 1, 3, 3, 3, 2, 6, 6, 3, 1,
	1,
}
var yyChk = []int{

	-1000, -128, -79, -9, -80, -81, -82, -83, -84, -85,
	-10, 92, 49, 50, 107, 48, -37, -86, -87, -88,
	-89, -90, -91, -1, -2, 162, 126, -5, -33, 88,
	-20, -26, -35, -38, 68, 146, 34, 145, 87, -92,
	-93, -94, 93, 89, 51, 138, 94, 161, 132, -3,
	-4, 164, 165, 166, -34, 20, -27, -28, 167, -39,
	28, 40, 5, 169, 171, 8, 129, 45, 9, 52,
	-41, -40, -43, -68, 55, 125, 190, 171, 185, 88,
	186, 187, 188, 184, 7, 99, 177, 178, 179, 180,
	181, 182, 183, 13, 92, 80, 62, 158, 71, -9,
	-9, -79, -79, -3, -9, -70, 141, 69, 46, -69,
	100, 70, 70, 55, -95, -50, -51, 162, 70, 167,
	-21, -22, -23, -9, -25, 154, -36, -9, -37, 108,
	65, 108, 65, 65, -8, -7, -6, 132, -13, -12,
	-9, -30, -29, -19, 162, -30, -30, -9, -9, -55,
	-56, 78, -44, -43, -42, -45, -51, -50, 133, -67,
	-66, 38, 4, -129, -65, 113, 42, 186, -9, 162,
	163, 171, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -11, -10,
	13, 80, 62, 158, -9, -9, -9, 93, 92, 89,
	151, 15, 94, 132, 9, 95, 14, -73, -75, 81,
	96, -39, 4, -39, 4, -39, 4, 18, -95, -95,
	-95, -53, -52, 147, 175, -18, -17, -16, 10, 162,
	-95, -13, 38, 186, 44, -25, 154, -24, 43, -9,
	168, 65, -120, 162, 65, -121, -51, -50, -121, 170,
	174, 175, 172, 174, -31, 174, 123, 62, 158, -31,
	-31, 54, 54, -57, -58, 155, -15, -14, -16, -55,
	-47, 67, 77, -49, 190, 175, 175, 174, -66, -129,
	-66, -9, 190, -18, -9, 172, 175, 7, 190, 171,
	185, 88, 186, 187, 188, 184, -11, -9, -9, -9,
	93, 89, 151, 15, 94, 132, 9, 95, 14, -76,
	-75, -74, -73, -9, -9, -39, -39, -39, -72, -71,
	-9, -133, 167, -133, 167, -53, -106, -109, 127, 144,
	-131, 108, -51, 162, -16, 149, 168, -9, 168, -24,
	-9, -9, 134, 97, 97, 97, 190, 175, 190, -6,
	-9, -9, 44, -29, -9, -9, -9, 44, 44, -30,
	-30, -59, -60, 58, -62, 79, -9, 174, 177, -57,
	72, 91, -130, 143, 53, -132, 101, -18, -48, 162,
	-51, -51, -65, -9, -18, 186, 172, 173, 172, -9,
	-11, 162, 163, 171, -9, -11, -11, -11, -11, -11,
	-11, 7, 174, -78, -77, 11, 36, -97, -96, 152,
	-98, 73, 108, -134, -97, -98, -57, -109, -57, -57,
	-108, -107, -48, -111, -110, -48, 74, -18, -45, 167,
	168, 134, -9, -121, -121, -121, -120, -51, -120, -32,
	154, -32, -68, 18, -15, -14, -9, -59, -46, -51,
	-50, 133, -46, -9, -53, 190, 171, -49, -49, -18,
	172, -9, 172, 175, -11, -71, -102, 174, -101, 118,
	167, -99, 174, 174, 73, -9, -102, -99, -74, -57,
	-74, -74, 174, 177, 174, -113, -112, 54, -9, 97,
	-37, -9, -123, 149, 167, -124, 116, 44, -9, 44,
	-12, -49, 175, 175, -18, 162, 163, -9, -18, -18,
	172, 173, 172, -9, -96, -100, -66, -129, -9, 168,
	150, 150, 174, 168, -102, -74, -102, -102, -107, -9,
	-110, -104, -103, -19, -98, 73, 108, 168, 153, 82,
	59, -127, -125, -9, 135, -61, -62, -18, -51, -51,
	172, -53, -53, 172, -9, 174, -37, -9, 168, 150,
	-37, -102, -113, -32, 174, 62, 158, -114, 154, 73,
	-17, 168, 174, -120, -63, -64, 60, -54, 97, -49,
	-49, -9, -102, 168, -102, 44, -103, -105, -48, -105,
	-74, 85, 92, 97, -122, 103, -125, -9, -131, -18,
	-18, 168, -102, 134, 85, -98, -126, 155, 18, 74,
	-54, -54, 145, 34, 134, -114, -123, -125, -9, -9,
	-116, -106, -109, -117, -57, 68, -74, -115, 154, -57,
	-109, -57, -119, 154, -118, -9, -102, 85, 92, -57,
	92, -57, 134, 85, 85, 34, 134, 134, -117, 68,
	68, -119, -118, -118,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	207, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 258, 259, -2, 261, 262, 263, 0,
	265, 266, 267, 105, 0, 0, 0, 0, 0, 19,
	20, 21, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 300, 301, 302, 0, 0, 316, 317, 0, 25,
	0, 0, 0, 292, 298, 0, 0, 0, 0, 0,
	32, 33, 84, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	257, 9, 10, 11, 264, 22, 0, 0, 0, 106,
	0, 0, 0, 0, 73, 0, 49, -2, 0, 298,
	0, 304, 305, 0, 310, 0, 0, 329, 330, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 299,
	97, 0, 321, 0, 158, 0, 0, 0, 0, 90,
	85, 0, 84, 55, -2, 57, 71, 0, 0, 36,
	37, 0, 0, 0, 44, 42, 43, 46, 49, 208,
	209, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, -2, -2, -2, -2, -2, -2, -2, 0, 268,
	0, 0, 0, 0, -2, -2, -2, 239, 0, 241,
	243, 245, 247, 249, 251, 253, 255, 118, 115, 0,
	0, 26, 0, 28, 0, 30, 0, 0, 125, 125,
	73, 0, 74, 76, 0, 124, 50, 51, 0, 53,
	0, 0, 0, 0, 303, 310, 0, 309, 0, 0,
	328, 0, 0, 184, 0, 0, 185, 0, 0, 291,
	0, 0, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 91, 0, 86, 87, 0, 90,
	0, 79, 81, 49, 0, 0, 0, 0, 38, 0,
	39, 49, 0, 48, 0, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, -2, -2,
	240, 242, 244, 246, 248, 250, 252, 254, 256, 23,
	119, 24, 116, 117, 120, 27, 29, 31, 107, 108,
	111, 0, 0, 0, 0, 90, 90, 90, 0, 0,
	0, 77, 49, 70, 52, 0, 312, 0, 314, 306,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 295,
	296, 98, 318, 322, 325, 323, 324, 319, 320, 160,
	160, 0, 94, 0, 96, 0, 92, 0, 0, 93,
	0, 0, 0, 61, 62, 80, 82, 73, 72, 203,
	71, 71, 45, 49, 40, 47, 210, 211, 213, 0,
	231, 269, 270, 0, 0, 276, 277, 278, 279, 280,
	281, 0, 0, 110, 112, 113, 114, 133, 130, 0,
	139, 128, 0, 0, 133, 139, 115, 90, 115, 115,
	147, 148, 0, 162, 163, 151, 0, 123, 0, 0,
	313, 0, 307, 189, 0, 198, 199, 186, 201, 0,
	0, 0, 34, 0, 101, 88, 89, 35, 58, 71,
	0, 0, 59, 49, 63, 0, 0, 49, 49, 41,
	214, 0, 273, 0, 232, 109, 121, 0, 134, 0,
	0, 0, 0, 0, 129, 138, 141, 0, 133, 115,
	133, 133, 0, 0, 0, 165, 152, 0, 75, 0,
	0, 308, 182, 0, 0, 200, 0, 326, 161, 327,
	99, 49, 0, 0, 60, 204, 205, 0, 73, 73,
	271, 272, 274, 0, 131, 135, 136, 0, 0, 0,
	0, 0, 0, 0, 143, 133, 145, 146, 149, 151,
	164, 160, 154, 0, 168, 128, 0, 0, 190, 191,
	192, 0, 193, 195, 0, 102, 100, 0, 71, 71,
	206, 64, 65, 275, 137, 0, 133, 140, 126, 0,
	133, 144, 150, 0, 0, 0, 0, 115, 0, 129,
	0, 187, 0, 202, 95, 103, 0, 66, 76, 49,
	49, 0, 122, 127, 142, 153, 155, 156, 159, 157,
	133, 0, 0, 0, 196, 0, 194, 104, 0, 0,
	0, 132, 166, 0, 0, 168, 189, 0, 0, 0,
	67, 68, 0, 90, 0, 115, 183, 197, 188, 83,
	172, 90, 90, 175, 180, 0, 133, 169, 0, 177,
	90, 179, 170, 0, 171, 90, 167, 0, 0, 178,
	0, 181, 0, 0, 0, 90, 0, 0, 175, 0,
	0, 173, 174, 176,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:354
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:359
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:380
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:387
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:394
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:401
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		//line n1ql.y:432
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 23:
		//line n1ql.y:436
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:440
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:446
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 26:
		//line n1ql.y:451
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 27:
		//line n1ql.y:456
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:461
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:466
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:471
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:476
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		//line n1ql.y:489
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 35:
		//line n1ql.y:496
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 36:
		//line n1ql.y:511
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 37:
		//line n1ql.y:518
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 38:
		//line n1ql.y:523
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:528
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:533
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 41:
		//line n1ql.y:538
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 44:
		//line n1ql.y:551
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 45:
		//line n1ql.y:556
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 46:
		//line n1ql.y:563
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 47:
		//line n1ql.y:568
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 48:
		//line n1ql.y:573
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 49:
		//line n1ql.y:580
		{
			yyVAL.s = ""
		}
	case 50:
		yyVAL.s = yyS[yypt-0].s
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		//line n1ql.y:591
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 53:
		yyVAL.s = yyS[yypt-0].s
	case 54:
		//line n1ql.y:609
		{
			yyVAL.fromTerm = nil
		}
	case 55:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 56:
		//line n1ql.y:618
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 57:
		//line n1ql.y:625
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 58:
		//line n1ql.y:630
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 59:
		//line n1ql.y:635
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 60:
		//line n1ql.y:640
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 63:
		//line n1ql.y:653
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 64:
		//line n1ql.y:658
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 65:
		//line n1ql.y:663
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:670
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:675
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 68:
		//line n1ql.y:680
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 69:
		yyVAL.s = yyS[yypt-0].s
	case 70:
		yyVAL.s = yyS[yypt-0].s
	case 71:
		//line n1ql.y:695
		{
			yyVAL.path = nil
		}
	case 72:
		//line n1ql.y:700
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 73:
		//line n1ql.y:707
		{
			yyVAL.expr = nil
		}
	case 74:
		yyVAL.expr = yyS[yypt-0].expr
	case 75:
		//line n1ql.y:716
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 76:
		//line n1ql.y:723
		{
		}
	case 78:
		//line n1ql.y:731
		{
			yyVAL.b = false
		}
	case 79:
		//line n1ql.y:736
		{
			yyVAL.b = false
		}
	case 80:
		//line n1ql.y:741
		{
			yyVAL.b = true
		}
	case 83:
		//line n1ql.y:754
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 84:
		//line n1ql.y:768
		{
			yyVAL.bindings = nil
		}
	case 85:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 86:
		//line n1ql.y:777
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 87:
		//line n1ql.y:784
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 88:
		//line n1ql.y:789
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 89:
		//line n1ql.y:796
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 90:
		//line n1ql.y:810
		{
			yyVAL.expr = nil
		}
	case 91:
		yyVAL.expr = yyS[yypt-0].expr
	case 92:
		//line n1ql.y:819
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 93:
		//line n1ql.y:833
		{
			yyVAL.group = nil
		}
	case 94:
		yyVAL.group = yyS[yypt-0].group
	case 95:
		//line n1ql.y:842
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 96:
		//line n1ql.y:847
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 97:
		//line n1ql.y:854
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 98:
		//line n1ql.y:859
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 99:
		//line n1ql.y:866
		{
			yyVAL.bindings = nil
		}
	case 100:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 101:
		//line n1ql.y:875
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 102:
		//line n1ql.y:882
		{
			yyVAL.expr = nil
		}
	case 103:
		yyVAL.expr = yyS[yypt-0].expr
	case 104:
		//line n1ql.y:891
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 105:
		//line n1ql.y:905
		{
			yyVAL.order = nil
		}
	case 106:
		yyVAL.order = yyS[yypt-0].order
	case 107:
		//line n1ql.y:914
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 108:
		//line n1ql.y:921
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 109:
		//line n1ql.y:926
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 110:
		//line n1ql.y:933
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 111:
		//line n1ql.y:940
		{
			yyVAL.b = false
		}
	case 112:
		yyVAL.b = yyS[yypt-0].b
	case 113:
		//line n1ql.y:949
		{
			yyVAL.b = false
		}
	case 114:
		//line n1ql.y:954
		{
			yyVAL.b = true
		}
	case 115:
		//line n1ql.y:968
		{
			yyVAL.expr = nil
		}
	case 116:
		yyVAL.expr = yyS[yypt-0].expr
	case 117:
		//line n1ql.y:977
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 118:
		//line n1ql.y:991
		{
			yyVAL.expr = nil
		}
	case 119:
		yyVAL.expr = yyS[yypt-0].expr
	case 120:
		//line n1ql.y:1000
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		//line n1ql.y:1014
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 122:
		//line n1ql.y:1019
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 123:
		//line n1ql.y:1026
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 124:
		//line n1ql.y:1031
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 130:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 131:
		//line n1ql.y:1054
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 132:
		//line n1ql.y:1061
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 133:
		//line n1ql.y:1068
		{
			yyVAL.projection = nil
		}
	case 134:
		yyVAL.projection = yyS[yypt-0].projection
	case 135:
		//line n1ql.y:1077
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 136:
		//line n1ql.y:1084
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 137:
		//line n1ql.y:1089
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 138:
		//line n1ql.y:1096
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 139:
		//line n1ql.y:1103
		{
			yyVAL.expr = nil
		}
	case 140:
		//line n1ql.y:1108
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		//line n1ql.y:1122
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 142:
		//line n1ql.y:1127
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 143:
		//line n1ql.y:1141
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 144:
		//line n1ql.y:1155
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1160
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1165
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1172
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 148:
		//line n1ql.y:1179
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 149:
		//line n1ql.y:1184
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 150:
		//line n1ql.y:1191
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 151:
		//line n1ql.y:1198
		{
			yyVAL.updateFor = nil
		}
	case 152:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 153:
		//line n1ql.y:1207
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 154:
		//line n1ql.y:1214
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 155:
		//line n1ql.y:1219
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 156:
		//line n1ql.y:1226
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 157:
		//line n1ql.y:1231
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 158:
		yyVAL.s = yyS[yypt-0].s
	case 159:
		//line n1ql.y:1242
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 160:
		//line n1ql.y:1249
		{
			yyVAL.expr = nil
		}
	case 161:
		//line n1ql.y:1254
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 162:
		//line n1ql.y:1261
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 163:
		//line n1ql.y:1268
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 164:
		//line n1ql.y:1273
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 165:
		//line n1ql.y:1280
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 166:
		//line n1ql.y:1294
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 167:
		//line n1ql.y:1300
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 168:
		//line n1ql.y:1308
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 169:
		//line n1ql.y:1313
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 170:
		//line n1ql.y:1318
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 171:
		//line n1ql.y:1323
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 172:
		//line n1ql.y:1330
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 173:
		//line n1ql.y:1335
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1340
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 175:
		//line n1ql.y:1347
		{
			yyVAL.mergeInsert = nil
		}
	case 176:
		//line n1ql.y:1352
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 177:
		//line n1ql.y:1359
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 178:
		//line n1ql.y:1364
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 179:
		//line n1ql.y:1369
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 180:
		//line n1ql.y:1376
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1383
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1397
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-1].keyspaceRef, yyS[yypt-0].indexType)
		}
	case 183:
		//line n1ql.y:1402
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-8].s, yyS[yypt-6].keyspaceRef, yyS[yypt-4].exprs, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].indexType)
		}
	case 184:
		yyVAL.s = yyS[yypt-0].s
	case 185:
		//line n1ql.y:1413
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 186:
		//line n1ql.y:1418
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 187:
		//line n1ql.y:1425
		{
			yyVAL.expr = nil
		}
	case 188:
		//line n1ql.y:1430
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 189:
		//line n1ql.y:1437
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 190:
		//line n1ql.y:1442
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 191:
		//line n1ql.y:1447
		{
			yyVAL.indexType = datastore.GSI
		}
	case 192:
		//line n1ql.y:1452
		{
			yyVAL.indexType = datastore.GSI
		}
	case 193:
		//line n1ql.y:1459
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 194:
		//line n1ql.y:1464
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 195:
		//line n1ql.y:1471
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable."))
			}

			yyVAL.expr = exp
		}
	case 196:
		//line n1ql.y:1482
		{
			yyVAL.expr = nil
		}
	case 197:
		//line n1ql.y:1487
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 198:
		//line n1ql.y:1501
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 199:
		//line n1ql.y:1506
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 200:
		//line n1ql.y:1519
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 201:
		//line n1ql.y:1525
		{
			yyVAL.s = ""
		}
	case 202:
		//line n1ql.y:1530
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 203:
		//line n1ql.y:1544
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 204:
		//line n1ql.y:1549
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 205:
		//line n1ql.y:1554
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 206:
		//line n1ql.y:1561
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 207:
		yyVAL.expr = yyS[yypt-0].expr
	case 208:
		//line n1ql.y:1578
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 209:
		//line n1ql.y:1583
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 210:
		//line n1ql.y:1590
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 211:
		//line n1ql.y:1595
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 212:
		//line n1ql.y:1602
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 213:
		//line n1ql.y:1607
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 214:
		//line n1ql.y:1612
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 215:
		//line n1ql.y:1618
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 216:
		//line n1ql.y:1623
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 217:
		//line n1ql.y:1628
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 218:
		//line n1ql.y:1633
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 219:
		//line n1ql.y:1638
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 220:
		//line n1ql.y:1644
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 221:
		//line n1ql.y:1650
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 222:
		//line n1ql.y:1655
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 223:
		//line n1ql.y:1660
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 224:
		//line n1ql.y:1666
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 225:
		//line n1ql.y:1671
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 226:
		//line n1ql.y:1676
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1681
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1686
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1691
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1696
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1701
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1706
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1711
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1716
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1721
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1726
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1731
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1736
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1741
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 240:
		//line n1ql.y:1746
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 241:
		//line n1ql.y:1751
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 242:
		//line n1ql.y:1756
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 243:
		//line n1ql.y:1761
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 244:
		//line n1ql.y:1766
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 245:
		//line n1ql.y:1771
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 246:
		//line n1ql.y:1776
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 247:
		//line n1ql.y:1781
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 248:
		//line n1ql.y:1786
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 249:
		//line n1ql.y:1791
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 250:
		//line n1ql.y:1796
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 251:
		//line n1ql.y:1801
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 252:
		//line n1ql.y:1806
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 253:
		//line n1ql.y:1811
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 254:
		//line n1ql.y:1816
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 255:
		//line n1ql.y:1821
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 256:
		//line n1ql.y:1826
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 257:
		//line n1ql.y:1831
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 258:
		yyVAL.expr = yyS[yypt-0].expr
	case 259:
		yyVAL.expr = yyS[yypt-0].expr
	case 260:
		//line n1ql.y:1845
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 261:
		//line n1ql.y:1851
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 262:
		yyVAL.expr = yyS[yypt-0].expr
	case 263:
		yyVAL.expr = yyS[yypt-0].expr
	case 264:
		//line n1ql.y:1863
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 265:
		yyVAL.expr = yyS[yypt-0].expr
	case 266:
		yyVAL.expr = yyS[yypt-0].expr
	case 267:
		yyVAL.expr = yyS[yypt-0].expr
	case 268:
		yyVAL.expr = yyS[yypt-0].expr
	case 269:
		//line n1ql.y:1882
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 270:
		//line n1ql.y:1887
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 271:
		//line n1ql.y:1894
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 272:
		//line n1ql.y:1899
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 273:
		//line n1ql.y:1906
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 274:
		//line n1ql.y:1911
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 275:
		//line n1ql.y:1916
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 276:
		//line n1ql.y:1922
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 277:
		//line n1ql.y:1927
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 278:
		//line n1ql.y:1932
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 279:
		//line n1ql.y:1937
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 280:
		//line n1ql.y:1942
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 281:
		//line n1ql.y:1948
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 282:
		//line n1ql.y:1962
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 283:
		//line n1ql.y:1967
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 284:
		//line n1ql.y:1972
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 285:
		//line n1ql.y:1977
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 286:
		//line n1ql.y:1982
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 287:
		//line n1ql.y:1987
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 288:
		//line n1ql.y:1992
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 289:
		yyVAL.expr = yyS[yypt-0].expr
	case 290:
		yyVAL.expr = yyS[yypt-0].expr
	case 291:
		//line n1ql.y:2012
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 292:
		//line n1ql.y:2019
		{
			yyVAL.bindings = nil
		}
	case 293:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 294:
		//line n1ql.y:2028
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 295:
		//line n1ql.y:2033
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 296:
		//line n1ql.y:2040
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 297:
		//line n1ql.y:2047
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 298:
		//line n1ql.y:2054
		{
			yyVAL.exprs = nil
		}
	case 299:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 300:
		//line n1ql.y:2070
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 301:
		//line n1ql.y:2075
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 302:
		//line n1ql.y:2080
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 303:
		//line n1ql.y:2095
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 304:
		yyVAL.expr = yyS[yypt-0].expr
	case 305:
		yyVAL.expr = yyS[yypt-0].expr
	case 306:
		//line n1ql.y:2108
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 307:
		//line n1ql.y:2115
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 308:
		//line n1ql.y:2120
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 309:
		//line n1ql.y:2128
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 310:
		//line n1ql.y:2135
		{
			yyVAL.expr = nil
		}
	case 311:
		//line n1ql.y:2140
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 312:
		//line n1ql.y:2154
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 313:
		//line n1ql.y:2173
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 314:
		//line n1ql.y:2188
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 315:
		yyVAL.s = yyS[yypt-0].s
	case 316:
		yyVAL.expr = yyS[yypt-0].expr
	case 317:
		yyVAL.expr = yyS[yypt-0].expr
	case 318:
		//line n1ql.y:2226
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 319:
		//line n1ql.y:2231
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 320:
		//line n1ql.y:2236
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 321:
		//line n1ql.y:2243
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 322:
		//line n1ql.y:2248
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 323:
		//line n1ql.y:2255
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 324:
		//line n1ql.y:2260
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 325:
		//line n1ql.y:2267
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 326:
		//line n1ql.y:2274
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 327:
		//line n1ql.y:2279
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 328:
		//line n1ql.y:2293
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 329:
		yyVAL.expr = yyS[yypt-0].expr
	case 330:
		//line n1ql.y:2302
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
