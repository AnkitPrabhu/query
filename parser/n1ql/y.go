//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	ss        []string
	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
	val         value.Value
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BUILD = 57360
const BY = 57361
const CALL = 57362
const CASE = 57363
const CAST = 57364
const CLUSTER = 57365
const COLLATE = 57366
const COLLECTION = 57367
const COMMIT = 57368
const CONNECT = 57369
const CONTINUE = 57370
const CREATE = 57371
const DATABASE = 57372
const DATASET = 57373
const DATASTORE = 57374
const DECLARE = 57375
const DECREMENT = 57376
const DELETE = 57377
const DERIVED = 57378
const DESC = 57379
const DESCRIBE = 57380
const DISTINCT = 57381
const DO = 57382
const DROP = 57383
const EACH = 57384
const ELEMENT = 57385
const ELSE = 57386
const END = 57387
const EVERY = 57388
const EXCEPT = 57389
const EXCLUDE = 57390
const EXECUTE = 57391
const EXISTS = 57392
const EXPLAIN = 57393
const FALSE = 57394
const FIRST = 57395
const FLATTEN = 57396
const FOR = 57397
const FROM = 57398
const FUNCTION = 57399
const GRANT = 57400
const GROUP = 57401
const GSI = 57402
const HAVING = 57403
const IF = 57404
const IN = 57405
const INCLUDE = 57406
const INCREMENT = 57407
const INDEX = 57408
const INLINE = 57409
const INNER = 57410
const INSERT = 57411
const INTERSECT = 57412
const INTO = 57413
const IS = 57414
const JOIN = 57415
const KEY = 57416
const KEYS = 57417
const KEYSPACE = 57418
const LAST = 57419
const LEFT = 57420
const LET = 57421
const LETTING = 57422
const LIKE = 57423
const LIMIT = 57424
const LSM = 57425
const MAP = 57426
const MAPPING = 57427
const MATCHED = 57428
const MATERIALIZED = 57429
const MERGE = 57430
const MINUS = 57431
const MISSING = 57432
const NAMESPACE = 57433
const NEST = 57434
const NOT = 57435
const NULL = 57436
const NUMBER = 57437
const OBJECT = 57438
const OFFSET = 57439
const ON = 57440
const OPTION = 57441
const OR = 57442
const ORDER = 57443
const OUTER = 57444
const OVER = 57445
const PARTITION = 57446
const PASSWORD = 57447
const PATH = 57448
const POOL = 57449
const PREPARE = 57450
const PRIMARY = 57451
const PRIVATE = 57452
const PRIVILEGE = 57453
const PROCEDURE = 57454
const PUBLIC = 57455
const RAW = 57456
const REALM = 57457
const REDUCE = 57458
const RENAME = 57459
const RETURN = 57460
const RETURNING = 57461
const REVOKE = 57462
const RIGHT = 57463
const ROLE = 57464
const ROLLBACK = 57465
const SATISFIES = 57466
const SCHEMA = 57467
const SELECT = 57468
const SELF = 57469
const SET = 57470
const SHOW = 57471
const SOME = 57472
const START = 57473
const STATISTICS = 57474
const STRING = 57475
const SYSTEM = 57476
const THEN = 57477
const TO = 57478
const TRANSACTION = 57479
const TRIGGER = 57480
const TRUE = 57481
const TRUNCATE = 57482
const UNDER = 57483
const UNION = 57484
const UNIQUE = 57485
const UNNEST = 57486
const UNSET = 57487
const UPDATE = 57488
const UPSERT = 57489
const USE = 57490
const USER = 57491
const USING = 57492
const VALUE = 57493
const VALUED = 57494
const VALUES = 57495
const VIEW = 57496
const WHEN = 57497
const WHERE = 57498
const WHILE = 57499
const WITH = 57500
const WITHIN = 57501
const WORK = 57502
const XOR = 57503
const INT = 57504
const IDENTIFIER = 57505
const IDENTIFIER_ICASE = 57506
const NAMED_PARAM = 57507
const POSITIONAL_PARAM = 57508
const NEXT_PARAM = 57509
const LPAREN = 57510
const RPAREN = 57511
const LBRACE = 57512
const RBRACE = 57513
const LBRACKET = 57514
const RBRACKET = 57515
const RBRACKET_ICASE = 57516
const COMMA = 57517
const COLON = 57518
const INTERESECT = 57519
const EQ = 57520
const DEQ = 57521
const NE = 57522
const LT = 57523
const GT = 57524
const LE = 57525
const GE = 57526
const CONCAT = 57527
const PLUS = 57528
const STAR = 57529
const DIV = 57530
const MOD = 57531
const UMINUS = 57532
const DOT = 57533

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	168, 326,
	-2, 271,
	-1, 119,
	176, 72,
	-2, 73,
	-1, 157,
	54, 81,
	73, 81,
	92, 81,
	144, 81,
	-2, 57,
	-1, 186,
	178, 0,
	179, 0,
	180, 0,
	-2, 235,
	-1, 187,
	178, 0,
	179, 0,
	180, 0,
	-2, 236,
	-1, 188,
	178, 0,
	179, 0,
	180, 0,
	-2, 237,
	-1, 189,
	181, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 238,
	-1, 190,
	181, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 239,
	-1, 191,
	181, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 240,
	-1, 192,
	181, 0,
	182, 0,
	183, 0,
	184, 0,
	-2, 241,
	-1, 199,
	81, 0,
	-2, 244,
	-1, 200,
	63, 0,
	159, 0,
	-2, 246,
	-1, 201,
	63, 0,
	159, 0,
	-2, 248,
	-1, 304,
	81, 0,
	-2, 245,
	-1, 305,
	63, 0,
	159, 0,
	-2, 247,
	-1, 306,
	63, 0,
	159, 0,
	-2, 249,
}

const yyNprod = 342
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3127

var yyAct = []int{

	173, 3, 658, 646, 478, 656, 647, 586, 334, 318,
	333, 555, 101, 102, 582, 551, 599, 337, 609, 420,
	230, 432, 552, 231, 247, 146, 545, 450, 226, 434,
	106, 279, 497, 373, 431, 165, 418, 251, 168, 142,
	483, 326, 459, 273, 272, 75, 16, 158, 370, 250,
	169, 232, 417, 145, 144, 139, 60, 125, 242, 328,
	129, 280, 213, 356, 499, 354, 10, 143, 377, 374,
	591, 150, 151, 298, 516, 118, 592, 467, 296, 515,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 466, 295, 199, 200,
	201, 296, 467, 558, 355, 451, 130, 79, 495, 559,
	262, 284, 100, 451, 160, 79, 299, 300, 301, 252,
	295, 466, 143, 148, 149, 579, 78, 481, 244, 81,
	82, 83, 84, 261, 78, 282, 174, 175, 281, 257,
	229, 535, 376, 496, 494, 176, 484, 485, 193, 298,
	412, 118, 118, 118, 259, 256, 296, 117, 118, 269,
	395, 261, 194, 258, 259, 216, 218, 220, 255, 288,
	297, 299, 300, 301, 65, 295, 605, 291, 401, 402,
	162, 467, 573, 479, 162, 253, 550, 403, 536, 532,
	391, 345, 174, 175, 290, 343, 161, 304, 305, 306,
	466, 176, 285, 287, 245, 286, 274, 411, 388, 119,
	283, 505, 79, 119, 439, 320, 321, 482, 163, 449,
	331, 329, 121, 327, 233, 85, 80, 82, 83, 84,
	81, 78, 296, 117, 117, 117, 518, 519, 344, 462,
	117, 147, 347, 248, 348, 302, 297, 299, 300, 301,
	340, 295, 119, 234, 332, 588, 580, 263, 359, 336,
	360, 657, 194, 363, 364, 365, 271, 339, 119, 630,
	271, 351, 375, 243, 322, 317, 323, 152, 324, 652,
	583, 590, 378, 419, 330, 341, 195, 393, 574, 298,
	534, 294, 228, 533, 399, 260, 553, 404, 342, 346,
	386, 335, 387, 110, 357, 383, 557, 671, 141, 394,
	670, 666, 358, 79, 636, 362, 637, 626, 336, 389,
	390, 140, 368, 369, 379, 77, 109, 80, 82, 83,
	84, 126, 78, 507, 481, 392, 197, 338, 76, 426,
	428, 429, 427, 380, 303, 618, 385, 600, 615, 134,
	442, 425, 581, 264, 196, 221, 132, 112, 435, 219,
	437, 194, 501, 443, 194, 194, 194, 194, 194, 194,
	548, 421, 296, 298, 319, 589, 353, 234, 457, 446,
	160, 448, 464, 424, 241, 302, 297, 299, 300, 301,
	438, 295, 133, 447, 116, 382, 352, 452, 108, 131,
	254, 217, 444, 445, 473, 549, 422, 76, 77, 215,
	664, 76, 470, 327, 471, 465, 453, 460, 460, 455,
	456, 468, 469, 463, 487, 635, 274, 458, 274, 488,
	236, 668, 198, 275, 491, 667, 490, 500, 492, 493,
	627, 214, 503, 400, 265, 266, 405, 406, 407, 408,
	409, 410, 511, 76, 477, 143, 296, 240, 661, 372,
	613, 74, 161, 154, 214, 662, 489, 614, 520, 302,
	297, 299, 300, 301, 509, 295, 526, 77, 194, 215,
	374, 77, 212, 531, 632, 517, 502, 436, 584, 521,
	522, 486, 514, 504, 513, 537, 542, 539, 540, 461,
	461, 538, 277, 120, 114, 249, 556, 113, 223, 224,
	225, 674, 278, 673, 648, 235, 527, 529, 435, 246,
	530, 547, 136, 77, 135, 546, 543, 598, 76, 541,
	115, 569, 607, 512, 572, 562, 510, 156, 367, 366,
	209, 361, 239, 576, 669, 211, 206, 561, 631, 454,
	566, 567, 222, 563, 564, 2, 423, 50, 384, 381,
	476, 95, 1, 554, 629, 506, 587, 617, 508, 103,
	104, 603, 578, 105, 585, 577, 604, 350, 643, 571,
	606, 594, 593, 575, 595, 651, 498, 433, 430, 616,
	544, 480, 612, 556, 528, 601, 602, 42, 41, 620,
	611, 40, 610, 610, 619, 546, 608, 86, 39, 22,
	21, 98, 20, 95, 19, 18, 17, 625, 621, 9,
	100, 204, 622, 623, 203, 202, 207, 210, 8, 97,
	7, 556, 641, 642, 6, 628, 5, 81, 4, 633,
	634, 413, 640, 638, 645, 639, 644, 650, 649, 659,
	414, 653, 655, 654, 660, 316, 86, 325, 107, 233,
	111, 663, 95, 98, 208, 164, 665, 597, 596, 560,
	371, 270, 100, 672, 659, 659, 676, 677, 675, 153,
	227, 97, 313, 205, 276, 159, 155, 315, 310, 81,
	157, 72, 73, 96, 33, 128, 32, 55, 28, 58,
	87, 57, 31, 124, 123, 122, 30, 99, 137, 138,
	27, 51, 98, 24, 23, 0, 95, 0, 0, 0,
	79, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 85, 80, 82, 83, 84, 81, 78,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 308, 0, 0, 98, 307, 311, 314,
	0, 0, 79, 523, 524, 100, 0, 0, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	86, 78, 81, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 99, 0,
	0, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 309, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 86,
	78, 0, 0, 415, 0, 95, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 99, 0, 97, 0, 0, 0, 0, 416,
	0, 0, 81, 0, 0, 79, 96, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 85, 80,
	82, 83, 84, 0, 78, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 474, 0, 0, 475,
	0, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 86, 78, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 86, 78, 0, 0, 0, 0, 95, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 67, 70, 0,
	0, 0, 0, 0, 81, 0, 0, 0, 96, 0,
	56, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 0, 0, 79, 396,
	397, 45, 71, 0, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 86, 78, 0, 233,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 29, 44,
	0, 0, 0, 43, 47, 0, 0, 79, 292, 0,
	0, 293, 0, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 0, 78, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 26, 0, 0, 68,
	0, 100, 49, 0, 0, 0, 0, 0, 46, 167,
	97, 0, 0, 67, 70, 0, 0, 0, 81, 0,
	0, 0, 96, 0, 0, 0, 56, 0, 0, 87,
	0, 48, 25, 0, 52, 53, 54, 59, 0, 65,
	63, 66, 0, 0, 166, 0, 0, 0, 171, 0,
	0, 69, 0, 64, 0, 12, 0, 45, 71, 0,
	0, 0, 0, 0, 61, 86, 0, 0, 0, 0,
	36, 95, 0, 0, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 15, 0, 13, 0, 99, 0,
	0, 76, 234, 0, 29, 44, 0, 0, 11, 43,
	47, 79, 0, 0, 34, 0, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 170,
	289, 98, 86, 38, 0, 0, 0, 0, 95, 0,
	100, 0, 26, 0, 0, 68, 0, 0, 49, 97,
	0, 0, 0, 14, 46, 0, 0, 81, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 77, 0, 0, 0, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 0, 65, 0, 66, 98, 0,
	0, 37, 35, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 172, 0, 0, 86, 97, 0, 0, 0,
	0, 95, 0, 0, 81, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 271, 87, 0, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 78,
	0, 98, 0, 0, 0, 0, 0, 86, 0, 0,
	100, 0, 0, 95, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 99, 0, 0, 81, 0, 0,
	0, 96, 0, 0, 624, 0, 0, 79, 87, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 499, 78, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 86, 0, 0, 0, 0, 0,
	95, 97, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 0, 0, 0, 99, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 570, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 78,
	98, 0, 0, 0, 86, 0, 0, 0, 0, 100,
	95, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 99,
	96, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	98, 78, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 86, 0, 0, 0, 0, 0, 95, 97, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 99, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	568, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 98, 78, 0,
	0, 86, 0, 0, 0, 0, 100, 95, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 99, 96, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 79,
	565, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 98, 78, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 86, 0,
	0, 0, 0, 0, 95, 97, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 99, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 472, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 94, 85,
	80, 82, 83, 84, 98, 78, 0, 0, 86, 441,
	0, 0, 0, 100, 95, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 99, 96, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 94, 85,
	80, 82, 83, 84, 98, 78, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 86, 0, 0, 0, 0, 0, 95,
	81, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	99, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 79, 0, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 268, 78, 0, 0, 0, 349, 0, 0, 98,
	0, 0, 0, 86, 0, 0, 0, 0, 100, 95,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	99, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	0, 0, 0, 79, 0, 0, 87, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 267, 78, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	86, 0, 0, 0, 0, 0, 95, 97, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 99, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 98, 78, 0, 0,
	86, 0, 0, 0, 0, 100, 95, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 99, 96, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 98, 78, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 0, 127, 0,
	0, 0, 99, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 0, 78, 67, 70, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 56, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 69, 0, 79, 0, 12, 0, 45,
	71, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 0, 78, 0, 0, 0, 0, 0,
	98, 0, 95, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 29, 44, 97, 0,
	11, 43, 47, 0, 0, 0, 81, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 26, 0, 0, 68, 0, 0,
	49, 100, 0, 0, 0, 0, 46, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 48,
	25, 0, 52, 53, 54, 59, 99, 65, 0, 66,
	67, 70, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 56, 172, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 0, 78, 0,
	0, 237, 0, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 12, 0, 45, 71, 0, 0, 99, 0,
	0, 67, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 56, 0, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 0,
	78, 29, 44, 0, 0, 11, 43, 47, 0, 69,
	0, 0, 0, 12, 0, 45, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 0, 68, 0, 0, 49, 0, 0, 0, 0,
	0, 46, 29, 44, 0, 0, 11, 43, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 25, 0, 52, 53, 54,
	59, 0, 65, 0, 66, 0, 0, 0, 0, 0,
	26, 0, 0, 68, 0, 0, 49, 0, 0, 238,
	0, 0, 46, 0, 0, 0, 0, 0, 63, 0,
	0, 67, 70, 0, 0, 0, 0, 0, 95, 0,
	0, 64, 0, 0, 56, 48, 25, 0, 52, 53,
	54, 59, 61, 65, 0, 66, 0, 0, 36, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 69,
	172, 0, 15, 12, 13, 45, 71, 0, 0, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 34, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 38, 29, 44, 81, 0, 11, 43, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 14, 0, 0, 0, 0, 0, 0, 67, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	26, 56, 0, 68, 67, 70, 49, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 56, 0, 37,
	35, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	12, 0, 45, 71, 99, 48, 25, 0, 52, 53,
	54, 59, 69, 65, 0, 66, 12, 79, 45, 71,
	0, 0, 0, 0, 0, 0, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 0, 78, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 44, 0, 0, 11,
	43, 47, 67, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 0, 26, 0, 0,
	68, 0, 0, 49, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 26, 0, 0, 68, 0, 0, 49,
	69, 0, 0, 0, 12, 46, 45, 71, 0, 0,
	76, 0, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 0, 66, 525, 67, 70, 0, 0, 48, 25,
	0, 52, 53, 54, 59, 0, 65, 56, 66, 398,
	0, 0, 0, 29, 44, 0, 0, 11, 43, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 69, 0, 0, 0, 12, 0, 45, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 26, 0, 0, 68, 0, 0, 49, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 29, 44, 0, 0, 11,
	43, 47, 67, 70, 0, 0, 48, 25, 0, 52,
	53, 54, 59, 0, 65, 56, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 68, 0, 0, 49,
	69, 0, 0, 0, 12, 46, 45, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 48, 25,
	0, 52, 53, 54, 59, 0, 65, 0, 66, 0,
	0, 0, 0, 29, 44, 0, 0, 11, 43, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 0, 68, 0, 0, 49, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 48, 25, 0, 52,
	53, 54, 59, 0, 65, 0, 66,
}
var yyPact = []int{

	2593, -1000, -1000, 2113, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2954, 2954, 1255, 1255, 4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2954,
	-1000, -1000, -1000, 256, 436, 433, 474, 89, 432, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54, 2866, -1000, -1000, 2804,
	-1000, 290, 283, 458, 456, 188, 2954, 78, 78, 78,
	2954, 2954, -1000, -1000, 384, 472, 50, 1225, 29, 2954,
	2954, 2954, 2954, 2954, 2954, 2954, 2954, 2954, 2954, 2954,
	2954, 2954, 2954, 2954, 2954, 1089, 273, 2954, 2954, 2954,
	531, 2299, 40, -1000, -1000, -1000, -65, 382, 397, 355,
	351, -1000, 533, 89, 89, 89, 144, -36, 214, -1000,
	89, 2402, 497, -1000, -1000, 2053, 229, 2954, 35, 2113,
	-1000, 453, 80, 439, 89, 89, 302, -3, -20, -1000,
	-37, -10, -21, 2113, -14, -1000, 194, -1000, -14, -14,
	1986, 1926, 110, -1000, 90, 384, -1000, 434, -1000, -1000,
	-130, -38, -41, 282, -1000, -64, 2237, 2453, 2954, -1000,
	-1000, -1000, -1000, 1149, -1000, -1000, 2954, 1015, -57, -57,
	-65, -65, -65, 141, 2299, 2247, 2595, 2595, 2595, 548,
	548, 548, 548, 284, -1000, 1089, 2954, 2954, 2954, 703,
	40, 40, -1000, 673, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 312, 359, 2954, 2954, -1000, 282, -1000, 282,
	-1000, 282, 2954, 53, 52, 144, 173, -1000, 228, 87,
	-1000, -1000, -1000, 90, -1000, 148, 26, 2954, 22, -1000,
	229, 2954, -1000, 2954, 1851, -1000, 80, 298, -1000, 278,
	-126, -1000, -72, -128, 89, -1000, 188, 2954, -1000, 2954,
	496, 78, 2954, 2954, 2954, 494, 493, 78, 78, 400,
	-1000, 2954, -33, -1000, -110, 110, 251, -1000, 244, 214,
	45, 87, 87, 21, 2453, -64, 2954, -64, 649, -27,
	-1000, 966, -1000, 2716, 1089, 15, 2954, 1089, 1089, 1089,
	1089, 1089, 1089, 200, 703, 40, 40, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2113, 2113, -1000, -1000, -1000, -25, -1000, 832, 130, 297,
	130, 297, 110, 114, 110, 45, 45, 412, -1000, 214,
	-1000, -1000, 46, -1000, 1791, -1000, -1000, 1724, 2113, 2954,
	265, -1000, 89, 89, 80, 87, 80, 51, -1000, 2113,
	2113, -1000, -1000, 2113, 2113, 2113, -1000, -1000, -42, -42,
	199, -1000, 530, -1000, 90, 2113, 90, 2954, 400, 105,
	105, 2954, -1000, -1000, -1000, -1000, 144, -95, -1000, -130,
	-130, 214, -1000, 649, -1000, -1000, -1000, -1000, -1000, 1664,
	60, -1000, -1000, 2954, 783, -71, -71, -94, -94, -94,
	-16, 1089, 2954, -1000, -1000, -1000, -1000, 8, -1000, 49,
	-29, -28, 417, 2954, 8, -29, 359, 110, 359, 359,
	-31, -1000, -70, -32, -1000, 9, 2954, -1000, 264, 282,
	-1000, 2954, 2113, 89, 43, -1000, -1000, -1000, 216, 80,
	491, 2954, 488, -1000, 2954, -33, -1000, 2113, -1000, -1000,
	-130, -97, -102, -1000, 649, -1000, 73, 2954, 214, 214,
	-1000, -1000, -1000, 600, -1000, 2700, 60, -1000, -1000, 130,
	-1000, 2237, 2954, 20, 142, 139, -34, 2113, -1000, 19,
	215, 359, 215, 215, 45, 2954, 45, -1000, -1000, 78,
	2113, 296, 17, 2113, 146, 2954, -1000, 170, -66, -1000,
	-1000, 2113, -1000, -11, 214, 87, 87, -1000, -1000, -1000,
	1597, 144, 144, -1000, -1000, -1000, 1537, -1000, -1000, -64,
	2954, 1408, 282, 2954, 13, 137, 282, -1000, 215, -1000,
	-1000, -1000, 1470, -1000, -50, -1000, 193, 125, -1000, 414,
	214, 97, -1000, 221, -99, -1000, 2113, 80, 146, 80,
	466, -1000, 249, -130, -130, -1000, -1000, -1000, -1000, 2113,
	2954, 215, 2113, -1000, 7, 215, -1000, -1000, 487, 78,
	45, 45, 359, 374, -1000, 250, -1000, -1000, 2954, -1000,
	-1000, 241, 2954, -1000, -1000, -1000, -1000, -1000, 2954, -1000,
	228, 214, 214, 1335, -1000, -1000, -1000, -1000, -1000, -1000,
	-95, -1000, 215, 182, 354, 296, 2113, 113, 529, -1000,
	2113, 409, 249, 249, -1000, -1000, 279, 181, 125, 146,
	2954, 2954, 2954, -1000, -1000, 173, 110, 445, 359, 97,
	-1000, 2113, 2113, 124, 114, 110, 106, -1000, 2954, 215,
	-1000, -1000, 372, -1000, 110, -1000, -1000, 317, -1000, 1278,
	-1000, 176, 349, -1000, 345, -1000, 509, 175, 172, 110,
	444, 442, 106, 2954, 2954, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 714, 713, 557, 711, 710, 55, 709, 708, 0,
	66, 148, 39, 308, 43, 44, 51, 23, 20, 25,
	706, 705, 704, 703, 58, 331, 702, 701, 699, 53,
	54, 295, 27, 698, 697, 696, 695, 46, 694, 56,
	692, 691, 690, 461, 686, 47, 42, 685, 684, 21,
	31, 119, 37, 680, 28, 16, 277, 679, 6, 671,
	48, 670, 669, 33, 668, 667, 50, 35, 665, 45,
	660, 658, 41, 657, 374, 9, 62, 655, 650, 641,
	555, 638, 636, 634, 630, 628, 619, 616, 615, 614,
	612, 610, 609, 608, 601, 598, 597, 394, 36, 52,
	19, 40, 594, 591, 4, 26, 590, 18, 10, 34,
	588, 8, 29, 587, 586, 32, 14, 585, 578, 3,
	2, 5, 24, 577, 568, 49, 567, 22, 15, 566,
	7, 565, 11, 564, 563, 562, 38, 559, 17, 558,
	59, 556,
}
var yyR1 = []int{

	0, 135, 135, 80, 80, 80, 80, 80, 80, 81,
	82, 83, 84, 85, 85, 85, 85, 85, 86, 92,
	92, 92, 92, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 38, 39, 39, 41, 40, 69, 68, 68,
	68, 68, 68, 136, 136, 67, 67, 66, 66, 66,
	18, 18, 17, 17, 16, 44, 44, 43, 42, 42,
	42, 42, 42, 137, 137, 45, 45, 45, 47, 46,
	46, 46, 51, 52, 50, 50, 54, 54, 53, 138,
	138, 48, 48, 48, 139, 139, 55, 56, 56, 57,
	15, 15, 14, 58, 58, 59, 60, 60, 61, 61,
	12, 12, 62, 62, 63, 64, 64, 65, 71, 71,
	70, 73, 73, 72, 79, 79, 78, 78, 75, 75,
	74, 77, 77, 76, 87, 87, 97, 97, 140, 140,
	140, 141, 141, 99, 99, 98, 104, 104, 103, 102,
	102, 100, 101, 101, 88, 88, 89, 90, 90, 90,
	108, 110, 110, 109, 115, 115, 114, 106, 106, 105,
	105, 19, 107, 32, 32, 111, 113, 113, 112, 91,
	91, 116, 116, 116, 116, 117, 117, 117, 121, 121,
	118, 118, 118, 119, 120, 93, 93, 123, 123, 122,
	125, 125, 126, 126, 128, 128, 127, 127, 130, 130,
	129, 134, 134, 132, 133, 133, 94, 94, 95, 131,
	131, 96, 124, 124, 49, 49, 49, 49, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 8, 8, 7, 7, 6, 4, 13,
	13, 5, 5, 5, 20, 21, 21, 22, 25, 25,
	23, 24, 24, 33, 33, 33, 34, 26, 26, 27,
	27, 27, 30, 30, 29, 29, 31, 28, 28, 35,
	36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 4, 1, 3, 4, 3,
	4, 3, 4, 1, 1, 5, 5, 2, 1, 2,
	2, 3, 4, 1, 1, 1, 3, 1, 3, 2,
	0, 1, 1, 2, 1, 0, 1, 2, 1, 1,
	4, 4, 5, 1, 1, 4, 6, 6, 4, 4,
	6, 6, 1, 1, 0, 2, 0, 1, 4, 0,
	1, 0, 1, 2, 0, 1, 4, 0, 1, 2,
	1, 3, 3, 0, 1, 2, 0, 1, 5, 1,
	1, 3, 0, 1, 2, 0, 1, 2, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 1, 0, 1,
	2, 0, 1, 2, 6, 9, 4, 2, 0, 5,
	6, 1, 2, 1, 3, 6, 0, 1, 2, 1,
	2, 2, 0, 3, 6, 9, 7, 8, 7, 7,
	2, 1, 3, 4, 0, 1, 4, 1, 3, 3,
	3, 1, 1, 0, 2, 2, 1, 3, 2, 10,
	13, 0, 6, 6, 6, 0, 6, 6, 0, 6,
	2, 3, 2, 1, 2, 8, 12, 0, 1, 1,
	1, 3, 0, 3, 0, 1, 2, 2, 0, 1,
	2, 1, 3, 1, 0, 2, 5, 5, 6, 0,
	3, 8, 1, 3, 1, 3, 3, 4, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 5, 5, 4, 5, 6, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 0,
	1, 1, 1, 1, 3, 1, 1, 3, 4, 5,
	2, 0, 2, 4, 5, 4, 1, 1, 1, 4,
	4, 4, 1, 3, 3, 3, 2, 6, 6, 3,
	1, 1,
}
var yyChk = []int{

	-1000, -135, -80, -9, -81, -82, -83, -84, -85, -86,
	-10, 93, 50, 51, 108, 49, -37, -87, -88, -89,
	-90, -91, -92, -1, -2, 163, 127, -5, -33, 89,
	-20, -26, -35, -38, 69, 147, 35, 146, 88, -93,
	-94, -95, -96, 94, 90, 52, 139, 95, 162, 133,
	-3, -4, 165, 166, 167, -34, 21, -27, -28, 168,
	-39, 29, 41, 5, 18, 170, 172, 8, 130, 46,
	9, 53, -41, -40, -43, -69, 56, 126, 191, 172,
	186, 89, 187, 188, 189, 185, 7, 100, 178, 179,
	180, 181, 182, 183, 184, 13, 93, 81, 63, 159,
	72, -9, -9, -80, -80, -3, -9, -71, 142, 70,
	47, -70, 101, 71, 71, 56, -97, -51, -52, 163,
	71, 168, -21, -22, -23, -9, -25, 155, -36, -9,
	-37, 109, 66, 109, 66, 66, 66, -8, -7, -6,
	133, -13, -12, -9, -30, -29, -19, 163, -30, -30,
	-9, -9, -56, -57, 79, -44, -43, -42, -45, -47,
	-52, -51, 134, 168, -68, -67, 39, 4, -136, -66,
	114, 43, 187, -9, 163, 164, 172, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -11, -10, 13, 81, 63, 159, -9,
	-9, -9, 94, 93, 90, 152, 15, 95, 133, 9,
	96, 14, -74, -76, 82, 97, -39, 4, -39, 4,
	-39, 4, 19, -97, -97, -97, -54, -53, 148, 176,
	-18, -17, -16, 10, 163, -97, -13, 39, 187, 45,
	-25, 155, -24, 44, -9, 169, 66, -122, 163, 66,
	-125, -52, -51, -125, 98, 171, 175, 176, 173, 175,
	-31, 175, 124, 63, 159, -31, -31, 55, 55, -58,
	-59, 156, -15, -14, -16, -56, -48, 68, 78, -50,
	191, 176, 176, -37, 175, -67, -136, -67, -9, 191,
	-18, -9, 173, 176, 7, 191, 172, 186, 89, 187,
	188, 189, 185, -11, -9, -9, -9, 94, 90, 152,
	15, 95, 133, 9, 96, 14, -77, -76, -75, -74,
	-9, -9, -39, -39, -39, -73, -72, -9, -140, 168,
	-140, 168, -54, -108, -111, 128, 145, -138, 109, -52,
	163, -16, 150, 169, -9, 169, -24, -9, -9, 135,
	-123, -122, 98, 98, 191, 176, 191, -125, -6, -9,
	-9, 45, -29, -9, -9, -9, 45, 45, -30, -30,
	-60, -61, 59, -63, 80, -9, 175, 178, -58, 73,
	92, -137, 144, 54, -139, 102, -18, -49, 163, -52,
	-52, 169, -66, -9, -18, 187, 173, 174, 173, -9,
	-11, 163, 164, 172, -9, -11, -11, -11, -11, -11,
	-11, 7, 175, -79, -78, 11, 37, -99, -98, 153,
	-100, 74, 109, -141, -99, -100, -58, -111, -58, -58,
	-110, -109, -49, -113, -112, -49, 75, -18, -45, 168,
	169, 135, -9, 98, -125, -125, -122, -52, -122, 168,
	-32, 155, -32, -69, 19, -15, -14, -9, -60, -46,
	-52, -51, 134, -46, -9, -54, 191, 172, -50, -50,
	-18, -18, 173, -9, 173, 176, -11, -72, -104, 175,
	-103, 119, 168, -101, 175, 175, 74, -9, -104, -101,
	-75, -58, -75, -75, 175, 178, 175, -115, -114, 55,
	-9, 98, -37, -9, -125, 168, -131, 117, -124, -122,
	45, -9, 45, -12, -50, 176, 176, -18, 163, 164,
	-9, -18, -18, 173, 174, 173, -9, -98, -102, -67,
	-136, -9, 169, 151, 151, 175, 169, -104, -75, -104,
	-104, -109, -9, -112, -106, -105, -19, -100, 74, 109,
	169, -128, -127, 150, -134, -132, -9, 136, 169, 175,
	-62, -63, -18, -52, -52, 173, -54, -54, 173, -9,
	175, -37, -9, 169, 151, -37, -104, -115, -32, 175,
	63, 159, -116, 155, 74, -17, -130, -129, 158, 154,
	60, 169, 175, -122, -127, -122, -64, -65, 61, -55,
	98, -50, -50, -9, -104, 169, -104, 45, -105, -107,
	-49, -107, -75, 86, 93, 98, -9, -126, 104, -132,
	-9, -138, -18, -18, 169, -104, 135, 86, -100, -133,
	156, 19, 75, -55, -55, 146, 35, 135, -116, -128,
	-132, -9, -9, -118, -108, -111, -119, -58, 69, -75,
	-130, -117, 155, -58, -111, -58, -121, 155, -120, -9,
	-104, 86, 93, -58, 93, -58, 135, 86, 86, 35,
	135, 135, -119, 69, 69, -121, -120, -120,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	218, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 269, 270, -2, 272, 273, 274, 0,
	276, 277, 278, 108, 0, 0, 0, 0, 0, 19,
	20, 21, 22, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 311, 312, 313, 0, 0, 327, 328, 0,
	26, 0, 0, 0, 0, 303, 309, 0, 0, 0,
	0, 0, 33, 34, 87, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 268, 9, 10, 11, 275, 23, 0, 0,
	0, 109, 0, 0, 0, 0, 76, 0, 50, -2,
	0, 309, 0, 315, 316, 0, 321, 0, 0, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 304, 305,
	0, 0, 310, 100, 0, 332, 0, 161, 0, 0,
	0, 0, 93, 88, 0, 87, 56, -2, 58, 59,
	74, 0, 0, 0, 37, 38, 0, 0, 0, 45,
	43, 44, 47, 50, 219, 220, 0, 0, 226, 227,
	228, 229, 230, 231, 232, 233, -2, -2, -2, -2,
	-2, -2, -2, 0, 279, 0, 0, 0, 0, -2,
	-2, -2, 250, 0, 252, 254, 256, 258, 260, 262,
	264, 266, 121, 118, 0, 0, 27, 0, 29, 0,
	31, 0, 0, 128, 128, 76, 0, 77, 79, 0,
	127, 51, 52, 0, 54, 0, 0, 0, 0, 314,
	321, 0, 320, 0, 0, 339, 187, 0, 189, 0,
	0, 190, 0, 0, 0, 302, 0, 0, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	94, 0, 89, 90, 0, 93, 0, 82, 84, 50,
	0, 0, 0, 0, 0, 39, 0, 40, 50, 0,
	49, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, -2, -2, 251, 253, 255,
	257, 259, 261, 263, 265, 267, 24, 122, 25, 119,
	120, 123, 28, 30, 32, 110, 111, 114, 0, 0,
	0, 0, 93, 93, 93, 0, 0, 0, 80, 50,
	73, 53, 0, 323, 0, 325, 317, 0, 322, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 306, 307,
	101, 329, 333, 336, 334, 335, 330, 331, 163, 163,
	0, 97, 0, 99, 0, 95, 0, 0, 96, 0,
	0, 0, 63, 64, 83, 85, 76, 75, 214, 74,
	74, 50, 46, 50, 41, 48, 221, 222, 224, 0,
	242, 280, 281, 0, 0, 287, 288, 289, 290, 291,
	292, 0, 0, 113, 115, 116, 117, 136, 133, 0,
	142, 131, 0, 0, 136, 142, 118, 93, 118, 118,
	150, 151, 0, 165, 166, 154, 0, 126, 0, 0,
	324, 0, 318, 0, 0, 206, 207, 191, 209, 0,
	0, 0, 0, 35, 0, 104, 91, 92, 36, 60,
	74, 0, 0, 61, 50, 65, 0, 0, 50, 50,
	68, 42, 225, 0, 284, 0, 243, 112, 124, 0,
	137, 0, 0, 0, 0, 0, 132, 141, 144, 0,
	136, 118, 136, 136, 0, 0, 0, 168, 155, 0,
	78, 0, 0, 319, 194, 0, 208, 0, 0, 212,
	337, 164, 338, 102, 50, 0, 0, 62, 215, 216,
	0, 76, 76, 282, 283, 285, 0, 134, 138, 139,
	0, 0, 0, 0, 0, 0, 0, 146, 136, 148,
	149, 152, 154, 167, 163, 157, 0, 171, 131, 0,
	0, 198, 195, 0, 0, 201, 203, 0, 0, 0,
	105, 103, 0, 74, 74, 217, 66, 67, 286, 140,
	0, 136, 143, 129, 0, 136, 147, 153, 0, 0,
	0, 0, 118, 0, 132, 0, 185, 199, 0, 196,
	197, 192, 0, 210, 211, 213, 98, 106, 0, 69,
	79, 50, 50, 0, 125, 130, 145, 156, 158, 159,
	162, 160, 136, 0, 0, 0, 200, 204, 0, 202,
	107, 0, 0, 0, 135, 169, 0, 0, 171, 194,
	0, 0, 0, 70, 71, 0, 93, 0, 118, 198,
	205, 193, 86, 175, 93, 93, 178, 183, 0, 136,
	186, 172, 0, 180, 93, 182, 173, 0, 174, 93,
	170, 0, 0, 181, 0, 184, 0, 0, 0, 93,
	0, 0, 178, 0, 0, 176, 177, 179,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:361
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:366
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:387
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:394
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:401
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:408
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		yyVAL.statement = yyS[yypt-0].statement
	case 23:
		//line n1ql.y:441
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:445
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:449
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 26:
		//line n1ql.y:455
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 27:
		//line n1ql.y:460
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:465
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:470
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:475
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:480
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		//line n1ql.y:485
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 35:
		//line n1ql.y:498
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 36:
		//line n1ql.y:505
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 37:
		//line n1ql.y:520
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 38:
		//line n1ql.y:527
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:532
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:537
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 41:
		//line n1ql.y:542
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 42:
		//line n1ql.y:547
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 45:
		//line n1ql.y:560
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 46:
		//line n1ql.y:565
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 47:
		//line n1ql.y:572
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 48:
		//line n1ql.y:577
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 49:
		//line n1ql.y:582
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 50:
		//line n1ql.y:589
		{
			yyVAL.s = ""
		}
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		yyVAL.s = yyS[yypt-0].s
	case 53:
		//line n1ql.y:600
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 54:
		yyVAL.s = yyS[yypt-0].s
	case 55:
		//line n1ql.y:618
		{
			yyVAL.fromTerm = nil
		}
	case 56:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 57:
		//line n1ql.y:627
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 58:
		//line n1ql.y:634
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 59:
		//line n1ql.y:639
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 60:
		//line n1ql.y:644
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 61:
		//line n1ql.y:649
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 62:
		//line n1ql.y:654
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 65:
		//line n1ql.y:667
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:672
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:677
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 68:
		//line n1ql.y:684
		{
			if yyS[yypt-0].s == "" {
				yylex.Error("Subquery in FROM clause must have an alias.")
			} else {
				yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
			}
		}
	case 69:
		//line n1ql.y:695
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 70:
		//line n1ql.y:700
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 71:
		//line n1ql.y:705
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 72:
		yyVAL.s = yyS[yypt-0].s
	case 73:
		yyVAL.s = yyS[yypt-0].s
	case 74:
		//line n1ql.y:720
		{
			yyVAL.path = nil
		}
	case 75:
		//line n1ql.y:725
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 76:
		//line n1ql.y:732
		{
			yyVAL.expr = nil
		}
	case 77:
		yyVAL.expr = yyS[yypt-0].expr
	case 78:
		//line n1ql.y:741
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 79:
		//line n1ql.y:748
		{
		}
	case 81:
		//line n1ql.y:756
		{
			yyVAL.b = false
		}
	case 82:
		//line n1ql.y:761
		{
			yyVAL.b = false
		}
	case 83:
		//line n1ql.y:766
		{
			yyVAL.b = true
		}
	case 86:
		//line n1ql.y:779
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 87:
		//line n1ql.y:793
		{
			yyVAL.bindings = nil
		}
	case 88:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 89:
		//line n1ql.y:802
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 90:
		//line n1ql.y:809
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 91:
		//line n1ql.y:814
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 92:
		//line n1ql.y:821
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 93:
		//line n1ql.y:835
		{
			yyVAL.expr = nil
		}
	case 94:
		yyVAL.expr = yyS[yypt-0].expr
	case 95:
		//line n1ql.y:844
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 96:
		//line n1ql.y:858
		{
			yyVAL.group = nil
		}
	case 97:
		yyVAL.group = yyS[yypt-0].group
	case 98:
		//line n1ql.y:867
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 99:
		//line n1ql.y:872
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 100:
		//line n1ql.y:879
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 101:
		//line n1ql.y:884
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 102:
		//line n1ql.y:891
		{
			yyVAL.bindings = nil
		}
	case 103:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 104:
		//line n1ql.y:900
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 105:
		//line n1ql.y:907
		{
			yyVAL.expr = nil
		}
	case 106:
		yyVAL.expr = yyS[yypt-0].expr
	case 107:
		//line n1ql.y:916
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 108:
		//line n1ql.y:930
		{
			yyVAL.order = nil
		}
	case 109:
		yyVAL.order = yyS[yypt-0].order
	case 110:
		//line n1ql.y:939
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 111:
		//line n1ql.y:946
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 112:
		//line n1ql.y:951
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 113:
		//line n1ql.y:958
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 114:
		//line n1ql.y:965
		{
			yyVAL.b = false
		}
	case 115:
		yyVAL.b = yyS[yypt-0].b
	case 116:
		//line n1ql.y:974
		{
			yyVAL.b = false
		}
	case 117:
		//line n1ql.y:979
		{
			yyVAL.b = true
		}
	case 118:
		//line n1ql.y:993
		{
			yyVAL.expr = nil
		}
	case 119:
		yyVAL.expr = yyS[yypt-0].expr
	case 120:
		//line n1ql.y:1002
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		//line n1ql.y:1016
		{
			yyVAL.expr = nil
		}
	case 122:
		yyVAL.expr = yyS[yypt-0].expr
	case 123:
		//line n1ql.y:1025
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 124:
		//line n1ql.y:1039
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 125:
		//line n1ql.y:1044
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 126:
		//line n1ql.y:1051
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 127:
		//line n1ql.y:1056
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 133:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 134:
		//line n1ql.y:1079
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 135:
		//line n1ql.y:1086
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 136:
		//line n1ql.y:1093
		{
			yyVAL.projection = nil
		}
	case 137:
		yyVAL.projection = yyS[yypt-0].projection
	case 138:
		//line n1ql.y:1102
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 139:
		//line n1ql.y:1109
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 140:
		//line n1ql.y:1114
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 141:
		//line n1ql.y:1121
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 142:
		//line n1ql.y:1128
		{
			yyVAL.expr = nil
		}
	case 143:
		//line n1ql.y:1133
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 144:
		//line n1ql.y:1147
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1152
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1166
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1180
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 148:
		//line n1ql.y:1185
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 149:
		//line n1ql.y:1190
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 150:
		//line n1ql.y:1197
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 151:
		//line n1ql.y:1204
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 152:
		//line n1ql.y:1209
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 153:
		//line n1ql.y:1216
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 154:
		//line n1ql.y:1223
		{
			yyVAL.updateFor = nil
		}
	case 155:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 156:
		//line n1ql.y:1232
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 157:
		//line n1ql.y:1239
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 158:
		//line n1ql.y:1244
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 159:
		//line n1ql.y:1251
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 160:
		//line n1ql.y:1256
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 161:
		yyVAL.s = yyS[yypt-0].s
	case 162:
		//line n1ql.y:1267
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 163:
		//line n1ql.y:1274
		{
			yyVAL.expr = nil
		}
	case 164:
		//line n1ql.y:1279
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 165:
		//line n1ql.y:1286
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 166:
		//line n1ql.y:1293
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 167:
		//line n1ql.y:1298
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 168:
		//line n1ql.y:1305
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 169:
		//line n1ql.y:1319
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 170:
		//line n1ql.y:1325
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 171:
		//line n1ql.y:1333
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 172:
		//line n1ql.y:1338
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 173:
		//line n1ql.y:1343
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1348
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 175:
		//line n1ql.y:1355
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 176:
		//line n1ql.y:1360
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 177:
		//line n1ql.y:1365
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 178:
		//line n1ql.y:1372
		{
			yyVAL.mergeInsert = nil
		}
	case 179:
		//line n1ql.y:1377
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 180:
		//line n1ql.y:1384
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1389
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1394
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 183:
		//line n1ql.y:1401
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 184:
		//line n1ql.y:1408
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 185:
		//line n1ql.y:1422
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-4].s, yyS[yypt-2].keyspaceRef, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 186:
		//line n1ql.y:1427
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-9].s, yyS[yypt-7].keyspaceRef, yyS[yypt-5].exprs, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 187:
		//line n1ql.y:1434
		{
			yyVAL.s = "#primary"
		}
	case 188:
		yyVAL.s = yyS[yypt-0].s
	case 189:
		yyVAL.s = yyS[yypt-0].s
	case 190:
		//line n1ql.y:1447
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 191:
		//line n1ql.y:1452
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 192:
		//line n1ql.y:1459
		{
			yyVAL.expr = nil
		}
	case 193:
		//line n1ql.y:1464
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 194:
		//line n1ql.y:1471
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 195:
		yyVAL.indexType = yyS[yypt-0].indexType
	case 196:
		//line n1ql.y:1480
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 197:
		//line n1ql.y:1485
		{
			yyVAL.indexType = datastore.GSI
		}
	case 198:
		//line n1ql.y:1492
		{
			yyVAL.val = nil
		}
	case 199:
		yyVAL.val = yyS[yypt-0].val
	case 200:
		//line n1ql.y:1501
		{
			yyVAL.val = yyS[yypt-0].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 201:
		//line n1ql.y:1511
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 202:
		//line n1ql.y:1516
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 203:
		//line n1ql.y:1523
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 204:
		//line n1ql.y:1534
		{
			yyVAL.expr = nil
		}
	case 205:
		//line n1ql.y:1539
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 206:
		//line n1ql.y:1553
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 207:
		//line n1ql.y:1558
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 208:
		//line n1ql.y:1571
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 209:
		//line n1ql.y:1577
		{
			yyVAL.s = ""
		}
	case 210:
		//line n1ql.y:1582
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 211:
		//line n1ql.y:1595
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyS[yypt-4].keyspaceRef, yyS[yypt-0].indexType, yyS[yypt-2].ss...)
		}
	case 212:
		//line n1ql.y:1602
		{
			yyVAL.ss = []string{yyS[yypt-0].s}
		}
	case 213:
		//line n1ql.y:1607
		{
			yyVAL.ss = append(yyS[yypt-2].ss, yyS[yypt-0].s)
		}
	case 214:
		//line n1ql.y:1621
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 215:
		//line n1ql.y:1626
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 216:
		//line n1ql.y:1631
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 217:
		//line n1ql.y:1638
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 218:
		yyVAL.expr = yyS[yypt-0].expr
	case 219:
		//line n1ql.y:1655
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 220:
		//line n1ql.y:1660
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 221:
		//line n1ql.y:1667
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 222:
		//line n1ql.y:1672
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 223:
		//line n1ql.y:1679
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 224:
		//line n1ql.y:1684
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 225:
		//line n1ql.y:1689
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 226:
		//line n1ql.y:1695
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1700
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1705
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1710
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1715
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1721
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1727
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1732
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1737
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1743
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1748
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1753
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1758
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1763
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 240:
		//line n1ql.y:1768
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 241:
		//line n1ql.y:1773
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 242:
		//line n1ql.y:1778
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 243:
		//line n1ql.y:1783
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 244:
		//line n1ql.y:1788
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 245:
		//line n1ql.y:1793
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 246:
		//line n1ql.y:1798
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 247:
		//line n1ql.y:1803
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 248:
		//line n1ql.y:1808
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 249:
		//line n1ql.y:1813
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 250:
		//line n1ql.y:1818
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 251:
		//line n1ql.y:1823
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 252:
		//line n1ql.y:1828
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 253:
		//line n1ql.y:1833
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 254:
		//line n1ql.y:1838
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 255:
		//line n1ql.y:1843
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 256:
		//line n1ql.y:1848
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 257:
		//line n1ql.y:1853
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 258:
		//line n1ql.y:1858
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 259:
		//line n1ql.y:1863
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 260:
		//line n1ql.y:1868
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 261:
		//line n1ql.y:1873
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 262:
		//line n1ql.y:1878
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 263:
		//line n1ql.y:1883
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 264:
		//line n1ql.y:1888
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 265:
		//line n1ql.y:1893
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 266:
		//line n1ql.y:1898
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 267:
		//line n1ql.y:1903
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 268:
		//line n1ql.y:1908
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 269:
		yyVAL.expr = yyS[yypt-0].expr
	case 270:
		yyVAL.expr = yyS[yypt-0].expr
	case 271:
		//line n1ql.y:1922
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 272:
		//line n1ql.y:1928
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 273:
		yyVAL.expr = yyS[yypt-0].expr
	case 274:
		yyVAL.expr = yyS[yypt-0].expr
	case 275:
		//line n1ql.y:1940
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 276:
		yyVAL.expr = yyS[yypt-0].expr
	case 277:
		yyVAL.expr = yyS[yypt-0].expr
	case 278:
		yyVAL.expr = yyS[yypt-0].expr
	case 279:
		yyVAL.expr = yyS[yypt-0].expr
	case 280:
		//line n1ql.y:1959
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 281:
		//line n1ql.y:1964
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 282:
		//line n1ql.y:1971
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 283:
		//line n1ql.y:1976
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 284:
		//line n1ql.y:1983
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 285:
		//line n1ql.y:1988
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 286:
		//line n1ql.y:1993
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 287:
		//line n1ql.y:1999
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 288:
		//line n1ql.y:2004
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 289:
		//line n1ql.y:2009
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 290:
		//line n1ql.y:2014
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 291:
		//line n1ql.y:2019
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 292:
		//line n1ql.y:2025
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 293:
		//line n1ql.y:2039
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 294:
		//line n1ql.y:2044
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 295:
		//line n1ql.y:2049
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 296:
		//line n1ql.y:2054
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 297:
		//line n1ql.y:2059
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 298:
		//line n1ql.y:2064
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 299:
		//line n1ql.y:2069
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 300:
		yyVAL.expr = yyS[yypt-0].expr
	case 301:
		yyVAL.expr = yyS[yypt-0].expr
	case 302:
		//line n1ql.y:2089
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 303:
		//line n1ql.y:2096
		{
			yyVAL.bindings = nil
		}
	case 304:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 305:
		//line n1ql.y:2105
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 306:
		//line n1ql.y:2110
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 307:
		//line n1ql.y:2117
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 308:
		//line n1ql.y:2124
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 309:
		//line n1ql.y:2131
		{
			yyVAL.exprs = nil
		}
	case 310:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 311:
		//line n1ql.y:2147
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 312:
		//line n1ql.y:2152
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 313:
		//line n1ql.y:2157
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 314:
		//line n1ql.y:2172
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 315:
		yyVAL.expr = yyS[yypt-0].expr
	case 316:
		yyVAL.expr = yyS[yypt-0].expr
	case 317:
		//line n1ql.y:2185
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 318:
		//line n1ql.y:2192
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 319:
		//line n1ql.y:2197
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 320:
		//line n1ql.y:2205
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 321:
		//line n1ql.y:2212
		{
			yyVAL.expr = nil
		}
	case 322:
		//line n1ql.y:2217
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 323:
		//line n1ql.y:2231
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 324:
		//line n1ql.y:2250
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 325:
		//line n1ql.y:2265
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 326:
		yyVAL.s = yyS[yypt-0].s
	case 327:
		yyVAL.expr = yyS[yypt-0].expr
	case 328:
		yyVAL.expr = yyS[yypt-0].expr
	case 329:
		//line n1ql.y:2303
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 330:
		//line n1ql.y:2308
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 331:
		//line n1ql.y:2313
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 332:
		//line n1ql.y:2320
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 333:
		//line n1ql.y:2325
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 334:
		//line n1ql.y:2332
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 335:
		//line n1ql.y:2337
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 336:
		//line n1ql.y:2344
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 337:
		//line n1ql.y:2351
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 338:
		//line n1ql.y:2356
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 339:
		//line n1ql.y:2370
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 340:
		yyVAL.expr = yyS[yypt-0].expr
	case 341:
		//line n1ql.y:2379
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
