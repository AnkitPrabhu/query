//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:16
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BY = 57360
const CALL = 57361
const CASE = 57362
const CAST = 57363
const CLUSTER = 57364
const COLLATE = 57365
const COLLECTION = 57366
const COMMIT = 57367
const CONNECT = 57368
const CONTINUE = 57369
const CREATE = 57370
const DATABASE = 57371
const DATASET = 57372
const DATASTORE = 57373
const DECLARE = 57374
const DECREMENT = 57375
const DELETE = 57376
const DERIVED = 57377
const DESC = 57378
const DESCRIBE = 57379
const DISTINCT = 57380
const DO = 57381
const DROP = 57382
const EACH = 57383
const ELEMENT = 57384
const ELSE = 57385
const END = 57386
const EVERY = 57387
const EXCEPT = 57388
const EXCLUDE = 57389
const EXECUTE = 57390
const EXISTS = 57391
const EXPLAIN = 57392
const FALSE = 57393
const FIRST = 57394
const FLATTEN = 57395
const FOR = 57396
const FROM = 57397
const FUNCTION = 57398
const GRANT = 57399
const GROUP = 57400
const GSI = 57401
const HAVING = 57402
const IF = 57403
const IN = 57404
const INCLUDE = 57405
const INCREMENT = 57406
const INDEX = 57407
const INLINE = 57408
const INNER = 57409
const INSERT = 57410
const INTERSECT = 57411
const INTO = 57412
const IS = 57413
const JOIN = 57414
const KEY = 57415
const KEYS = 57416
const KEYSPACE = 57417
const LAST = 57418
const LEFT = 57419
const LET = 57420
const LETTING = 57421
const LIKE = 57422
const LIMIT = 57423
const LSM = 57424
const MAP = 57425
const MAPPING = 57426
const MATCHED = 57427
const MATERIALIZED = 57428
const MERGE = 57429
const MINUS = 57430
const MISSING = 57431
const NAMESPACE = 57432
const NEST = 57433
const NOT = 57434
const NULL = 57435
const NUMBER = 57436
const OBJECT = 57437
const OFFSET = 57438
const ON = 57439
const OPTION = 57440
const OR = 57441
const ORDER = 57442
const OUTER = 57443
const OVER = 57444
const PARTITION = 57445
const PASSWORD = 57446
const PATH = 57447
const POOL = 57448
const PREPARE = 57449
const PRIMARY = 57450
const PRIVATE = 57451
const PRIVILEGE = 57452
const PROCEDURE = 57453
const PUBLIC = 57454
const RAW = 57455
const REALM = 57456
const REDUCE = 57457
const RENAME = 57458
const RETURN = 57459
const RETURNING = 57460
const REVOKE = 57461
const RIGHT = 57462
const ROLE = 57463
const ROLLBACK = 57464
const SATISFIES = 57465
const SCHEMA = 57466
const SELECT = 57467
const SELF = 57468
const SET = 57469
const SHOW = 57470
const SOME = 57471
const START = 57472
const STATISTICS = 57473
const STRING = 57474
const SYSTEM = 57475
const THEN = 57476
const TO = 57477
const TRANSACTION = 57478
const TRIGGER = 57479
const TRUE = 57480
const TRUNCATE = 57481
const UNDER = 57482
const UNION = 57483
const UNIQUE = 57484
const UNNEST = 57485
const UNSET = 57486
const UPDATE = 57487
const UPSERT = 57488
const USE = 57489
const USER = 57490
const USING = 57491
const VALUE = 57492
const VALUED = 57493
const VALUES = 57494
const VIEW = 57495
const WHEN = 57496
const WHERE = 57497
const WHILE = 57498
const WITH = 57499
const WITHIN = 57500
const WORK = 57501
const XOR = 57502
const INT = 57503
const IDENTIFIER = 57504
const IDENTIFIER_ICASE = 57505
const NAMED_PARAM = 57506
const POSITIONAL_PARAM = 57507
const LPAREN = 57508
const RPAREN = 57509
const LBRACE = 57510
const RBRACE = 57511
const LBRACKET = 57512
const RBRACKET = 57513
const RBRACKET_ICASE = 57514
const COMMA = 57515
const COLON = 57516
const INTERESECT = 57517
const EQ = 57518
const DEQ = 57519
const NE = 57520
const LT = 57521
const GT = 57522
const LE = 57523
const GE = 57524
const CONCAT = 57525
const PLUS = 57526
const STAR = 57527
const DIV = 57528
const MOD = 57529
const UMINUS = 57530
const DOT = 57531

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	166, 314,
	-2, 260,
	-1, 116,
	174, 69,
	-2, 70,
	-1, 153,
	53, 78,
	72, 78,
	91, 78,
	143, 78,
	-2, 56,
	-1, 180,
	176, 0,
	177, 0,
	178, 0,
	-2, 224,
	-1, 181,
	176, 0,
	177, 0,
	178, 0,
	-2, 225,
	-1, 182,
	176, 0,
	177, 0,
	178, 0,
	-2, 226,
	-1, 183,
	179, 0,
	180, 0,
	181, 0,
	182, 0,
	-2, 227,
	-1, 184,
	179, 0,
	180, 0,
	181, 0,
	182, 0,
	-2, 228,
	-1, 185,
	179, 0,
	180, 0,
	181, 0,
	182, 0,
	-2, 229,
	-1, 186,
	179, 0,
	180, 0,
	181, 0,
	182, 0,
	-2, 230,
	-1, 193,
	80, 0,
	-2, 233,
	-1, 194,
	62, 0,
	158, 0,
	-2, 235,
	-1, 195,
	62, 0,
	158, 0,
	-2, 237,
	-1, 296,
	80, 0,
	-2, 234,
	-1, 297,
	62, 0,
	158, 0,
	-2, 236,
	-1, 298,
	62, 0,
	158, 0,
	-2, 238,
}

const yyNprod = 330
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3271

var yyAct = []int{

	167, 3, 633, 622, 465, 631, 623, 325, 326, 541,
	566, 310, 98, 99, 576, 491, 586, 409, 224, 421,
	225, 329, 142, 531, 484, 272, 220, 241, 438, 423,
	103, 363, 420, 159, 407, 16, 162, 138, 470, 318,
	244, 154, 406, 447, 163, 141, 114, 140, 266, 236,
	320, 360, 135, 207, 226, 122, 288, 265, 126, 273,
	58, 486, 347, 72, 139, 10, 345, 367, 146, 147,
	570, 291, 292, 293, 502, 287, 571, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 186, 127, 501, 193, 194, 195, 468, 455,
	346, 275, 115, 290, 455, 482, 274, 97, 276, 364,
	288, 76, 76, 144, 145, 255, 439, 187, 454, 139,
	156, 250, 223, 454, 78, 238, 79, 80, 81, 287,
	75, 75, 290, 168, 169, 563, 521, 366, 439, 483,
	92, 170, 481, 471, 78, 472, 401, 252, 249, 251,
	248, 390, 391, 466, 157, 262, 384, 254, 188, 392,
	582, 168, 169, 280, 62, 254, 210, 212, 214, 170,
	557, 283, 536, 247, 378, 522, 155, 455, 246, 246,
	518, 337, 493, 116, 335, 288, 282, 428, 469, 95,
	239, 296, 297, 298, 277, 279, 454, 278, 97, 289,
	291, 292, 293, 252, 287, 267, 76, 94, 323, 312,
	313, 321, 118, 143, 288, 78, 242, 319, 264, 82,
	77, 79, 80, 81, 332, 75, 76, 294, 289, 291,
	292, 293, 336, 287, 245, 245, 339, 450, 340, 157,
	77, 79, 80, 81, 227, 75, 324, 504, 505, 228,
	116, 349, 189, 350, 606, 188, 353, 354, 355, 632,
	309, 627, 328, 567, 408, 365, 116, 564, 116, 322,
	256, 237, 314, 264, 315, 368, 316, 222, 558, 382,
	148, 520, 333, 519, 338, 96, 388, 492, 334, 393,
	253, 376, 539, 377, 543, 646, 645, 76, 641, 383,
	352, 191, 348, 327, 613, 373, 602, 295, 358, 359,
	82, 77, 79, 80, 81, 538, 75, 612, 136, 190,
	328, 381, 73, 74, 369, 468, 331, 123, 495, 534,
	330, 415, 417, 418, 416, 594, 137, 375, 577, 592,
	488, 414, 431, 370, 107, 344, 343, 311, 424, 209,
	426, 131, 188, 639, 342, 188, 188, 188, 188, 188,
	188, 400, 636, 565, 535, 413, 257, 106, 445, 637,
	286, 208, 452, 435, 203, 437, 427, 379, 380, 205,
	200, 156, 235, 432, 433, 434, 537, 215, 440, 246,
	246, 246, 74, 460, 130, 372, 228, 192, 109, 410,
	643, 458, 319, 453, 389, 456, 457, 394, 395, 396,
	397, 398, 399, 474, 451, 444, 449, 449, 475, 267,
	446, 267, 443, 478, 441, 129, 487, 477, 611, 479,
	480, 490, 268, 642, 411, 258, 259, 155, 73, 105,
	497, 464, 290, 139, 213, 245, 245, 245, 211, 436,
	234, 290, 206, 476, 198, 230, 506, 197, 196, 201,
	204, 603, 208, 512, 489, 150, 188, 362, 128, 608,
	517, 503, 448, 448, 500, 507, 508, 209, 425, 590,
	499, 270, 523, 528, 525, 526, 591, 92, 364, 568,
	524, 271, 473, 71, 542, 73, 117, 202, 111, 73,
	110, 513, 515, 424, 649, 516, 533, 648, 74, 532,
	624, 243, 240, 529, 527, 132, 199, 553, 463, 546,
	556, 575, 73, 112, 288, 584, 498, 496, 357, 560,
	356, 545, 351, 288, 550, 551, 95, 294, 289, 291,
	292, 293, 233, 287, 644, 97, 294, 289, 291, 292,
	293, 607, 287, 561, 555, 580, 442, 569, 559, 562,
	581, 113, 78, 216, 583, 74, 152, 412, 374, 74,
	371, 572, 542, 578, 579, 1, 596, 2, 589, 49,
	540, 595, 588, 83, 587, 587, 532, 585, 605, 92,
	494, 100, 101, 593, 601, 102, 305, 598, 599, 597,
	619, 307, 302, 626, 547, 548, 485, 542, 617, 618,
	604, 422, 419, 609, 610, 614, 616, 530, 467, 620,
	621, 615, 514, 41, 40, 634, 625, 628, 630, 629,
	635, 83, 96, 39, 227, 22, 638, 92, 95, 21,
	20, 640, 19, 18, 76, 17, 9, 97, 647, 634,
	634, 651, 652, 650, 8, 7, 94, 82, 77, 79,
	80, 81, 6, 75, 78, 5, 4, 402, 93, 403,
	308, 317, 217, 218, 219, 84, 300, 104, 108, 229,
	299, 303, 306, 158, 574, 573, 95, 544, 361, 263,
	149, 221, 269, 151, 153, 97, 69, 70, 33, 125,
	32, 53, 28, 56, 94, 55, 31, 121, 120, 119,
	30, 133, 78, 134, 27, 50, 93, 24, 23, 304,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 76, 509, 510, 0,
	0, 0, 85, 86, 87, 88, 89, 90, 91, 82,
	77, 79, 80, 81, 83, 75, 0, 0, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	85, 86, 87, 88, 89, 90, 91, 82, 77, 79,
	80, 81, 83, 75, 0, 0, 404, 0, 92, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 405, 0, 0, 0, 78, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 461, 0,
	0, 462, 0, 85, 86, 87, 88, 89, 90, 91,
	82, 77, 79, 80, 81, 83, 75, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	0, 85, 86, 87, 88, 89, 90, 91, 82, 77,
	79, 80, 81, 83, 75, 0, 0, 0, 0, 92,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 64, 67,
	0, 0, 0, 0, 78, 0, 0, 0, 93, 0,
	54, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 76, 385,
	386, 44, 68, 0, 85, 86, 87, 88, 89, 90,
	91, 82, 77, 79, 80, 81, 83, 75, 0, 227,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 0, 0, 0, 29, 43,
	0, 0, 0, 42, 46, 0, 76, 284, 0, 0,
	285, 0, 85, 86, 87, 88, 89, 90, 91, 82,
	77, 79, 80, 81, 83, 75, 0, 0, 0, 0,
	92, 95, 0, 0, 0, 0, 26, 0, 0, 65,
	97, 0, 48, 0, 0, 0, 0, 0, 45, 94,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 47, 25, 0, 51, 52, 57, 0, 62, 95,
	63, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 0, 0, 0, 78, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 85, 86, 87, 88, 89,
	90, 91, 82, 77, 79, 80, 81, 83, 281, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 0, 85, 86, 87, 88, 89, 90, 91,
	82, 77, 79, 80, 81, 83, 75, 0, 0, 0,
	0, 92, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 61, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 93, 0, 0, 59, 0, 0, 0, 84,
	0, 36, 486, 0, 0, 0, 0, 60, 0, 0,
	95, 0, 0, 0, 0, 15, 0, 13, 0, 97,
	0, 0, 73, 0, 0, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 34, 78, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	76, 0, 0, 0, 14, 0, 85, 86, 87, 88,
	89, 90, 91, 82, 77, 79, 80, 81, 83, 75,
	0, 0, 74, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 37, 35, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 85, 86, 87, 88, 89, 90,
	91, 82, 77, 79, 80, 81, 83, 75, 0, 0,
	0, 0, 92, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 554, 0, 0, 85, 86, 87,
	88, 89, 90, 91, 82, 77, 79, 80, 81, 83,
	75, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	552, 0, 0, 0, 0, 85, 86, 87, 88, 89,
	90, 91, 82, 77, 79, 80, 81, 83, 75, 0,
	0, 0, 0, 92, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	78, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 549, 0, 0, 0, 0, 85, 86,
	87, 88, 89, 90, 91, 82, 77, 79, 80, 81,
	83, 75, 0, 0, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 459, 0, 0, 0, 0, 85, 86, 87, 88,
	89, 90, 91, 82, 77, 79, 80, 81, 83, 75,
	0, 0, 0, 0, 92, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 0, 430, 0, 78,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 85,
	86, 87, 88, 89, 90, 91, 82, 77, 79, 80,
	81, 83, 75, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 429, 0,
	0, 76, 0, 0, 0, 0, 0, 85, 86, 87,
	88, 89, 90, 91, 82, 77, 79, 80, 81, 83,
	75, 0, 0, 0, 0, 92, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 261, 0, 0, 0,
	0, 0, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 0, 341, 0,
	78, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	85, 86, 87, 88, 89, 90, 91, 82, 77, 79,
	80, 81, 0, 75, 0, 83, 0, 0, 0, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 85, 86,
	87, 88, 89, 90, 91, 82, 77, 79, 80, 81,
	83, 75, 260, 0, 0, 0, 92, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 161, 94, 0,
	0, 64, 67, 0, 0, 0, 78, 0, 0, 0,
	93, 0, 0, 54, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 160, 0, 0, 97, 165, 0, 0, 66, 0,
	0, 0, 12, 94, 44, 68, 0, 0, 0, 0,
	0, 78, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 29, 43, 0, 0, 11, 42, 46, 76, 0,
	0, 0, 0, 0, 85, 86, 87, 88, 89, 90,
	91, 82, 77, 79, 80, 81, 164, 75, 0, 83,
	0, 0, 0, 0, 0, 92, 0, 124, 0, 26,
	0, 96, 65, 0, 0, 48, 0, 0, 0, 0,
	0, 45, 0, 76, 0, 0, 0, 0, 0, 85,
	86, 87, 88, 89, 90, 91, 82, 77, 79, 80,
	81, 0, 75, 0, 47, 25, 0, 51, 52, 57,
	92, 62, 0, 63, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 166, 0,
	0, 0, 94, 0, 0, 64, 67, 0, 0, 0,
	78, 0, 0, 0, 93, 0, 0, 54, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 165,
	0, 0, 66, 0, 0, 0, 12, 94, 44, 68,
	0, 0, 0, 0, 0, 78, 0, 83, 0, 93,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 0, 0, 0, 0, 29, 43, 0, 0, 11,
	42, 46, 76, 0, 0, 0, 0, 0, 85, 86,
	87, 88, 89, 90, 91, 82, 77, 79, 80, 81,
	164, 75, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 26, 0, 96, 65, 0, 0, 48,
	94, 0, 0, 0, 0, 45, 0, 76, 78, 0,
	0, 0, 93, 85, 86, 87, 88, 89, 90, 91,
	82, 77, 79, 80, 81, 0, 75, 0, 47, 25,
	0, 51, 52, 57, 0, 62, 0, 63, 64, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 67,
	54, 0, 166, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 92, 0, 0, 66, 0, 0, 96, 12,
	0, 44, 68, 0, 0, 66, 0, 0, 0, 12,
	76, 44, 68, 0, 0, 0, 85, 86, 87, 88,
	89, 90, 91, 82, 77, 79, 80, 81, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 43,
	0, 95, 11, 42, 46, 0, 0, 0, 29, 43,
	97, 0, 11, 42, 46, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 65,
	0, 0, 48, 0, 0, 0, 26, 0, 45, 65,
	0, 0, 48, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 25, 0, 51, 52, 57, 0, 62, 0,
	63, 47, 25, 0, 51, 52, 57, 0, 62, 0,
	63, 0, 0, 0, 0, 232, 0, 96, 0, 0,
	0, 64, 67, 0, 0, 166, 0, 0, 0, 76,
	0, 0, 61, 54, 0, 64, 67, 0, 88, 89,
	90, 91, 82, 77, 79, 80, 81, 54, 75, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 66, 0,
	0, 36, 12, 0, 44, 68, 0, 60, 0, 0,
	0, 0, 66, 0, 0, 15, 12, 13, 44, 68,
	0, 0, 73, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 29, 43, 0, 0, 11, 42, 46, 0, 0,
	0, 0, 0, 0, 38, 29, 43, 0, 0, 11,
	42, 46, 0, 64, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 54, 0, 0, 0, 26,
	0, 0, 65, 0, 0, 48, 0, 0, 0, 0,
	0, 45, 74, 26, 0, 0, 65, 0, 0, 48,
	66, 0, 0, 0, 12, 45, 44, 68, 0, 0,
	0, 0, 37, 35, 47, 25, 0, 51, 52, 57,
	0, 62, 0, 63, 511, 0, 64, 67, 47, 25,
	0, 51, 52, 57, 0, 62, 0, 63, 54, 0,
	0, 0, 0, 29, 43, 0, 0, 11, 42, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 12, 0, 44,
	68, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 0, 65, 0, 0, 48, 0, 0,
	64, 67, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 0, 29, 43, 0, 0,
	11, 42, 46, 0, 0, 0, 47, 25, 0, 51,
	52, 57, 0, 62, 0, 63, 387, 66, 0, 0,
	0, 12, 0, 44, 68, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 26, 0, 0, 65, 64, 67,
	48, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 43, 0, 0, 11, 42, 46, 0, 0, 47,
	25, 0, 51, 52, 57, 66, 62, 0, 63, 12,
	0, 44, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 65, 0, 0, 48, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 0, 29, 43,
	0, 0, 11, 42, 46, 0, 124, 0, 0, 0,
	0, 0, 0, 47, 25, 0, 51, 52, 57, 0,
	62, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 65,
	0, 0, 48, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 25, 0, 51, 52, 57, 0, 62, 0,
	63,
}
var yyPact = []int{

	2827, -1000, -1000, 2392, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3100, 3100, 1367, 1367, -4, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3100,
	-1000, -1000, -1000, 298, 430, 428, 468, 88, 426, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 46, 3042, -1000, -1000, 2978, -1000, 360,
	286, 450, 186, 3100, 51, 51, 51, 3100, 3100, -1000,
	-1000, 387, 467, 106, 2283, -1, 3100, 3100, 3100, 3100,
	3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100,
	3100, 3100, 1060, 239, 3100, 3100, 3100, 365, 2437, 36,
	-1000, -1000, -1000, -58, 381, 444, 440, 383, -1000, 545,
	88, 88, 88, 130, -52, 234, -1000, 88, 2630, 498,
	-1000, -1000, 2253, 228, 3100, 23, 2392, -1000, 447, 54,
	446, 88, 88, -19, -25, -1000, -53, -22, -26, 2392,
	-8, -1000, 208, -1000, -8, -8, 2208, 2072, 63, -1000,
	87, 387, -1000, 414, -1000, -130, -68, -73, -1000, -65,
	2467, 2640, 3100, -1000, -1000, -1000, -1000, 1119, -1000, -1000,
	3100, 986, -59, -59, -58, -58, -58, 56, 2437, 2520,
	2659, 2659, 2659, 127, 127, 127, 127, 363, -1000, 1060,
	3100, 3100, 3100, 474, 36, 36, -1000, 587, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 253, 290, 3100, 3100,
	-1000, 267, -1000, 267, -1000, 267, 3100, 45, 42, 130,
	176, -1000, 222, 62, -1000, -1000, -1000, 87, -1000, 139,
	17, 3100, 14, -1000, 228, 3100, -1000, 3100, 2024, -1000,
	257, 249, -1000, 248, -123, -1000, -74, -127, -1000, 186,
	3100, -1000, 3100, 488, 51, 3100, 3100, 3100, 486, 484,
	51, 51, 409, -1000, 3100, -36, -1000, -109, 63, 252,
	-1000, 236, 234, 12, 62, 62, 2640, -65, 3100, -65,
	624, -29, -1000, 938, -1000, 2915, 1060, -11, 3100, 1060,
	1060, 1060, 1060, 1060, 1060, 354, 474, 36, 36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2392, 2392, -1000, -1000, -1000, -27, -1000, 805,
	112, 326, 112, 326, 63, 118, 63, 12, 12, 404,
	-1000, 234, -1000, -1000, 21, -1000, 1891, -1000, -1000, 1843,
	2392, 3100, 88, 88, 88, 54, 62, 54, -1000, 2392,
	2392, -1000, -1000, 2392, 2392, 2392, -1000, -1000, -16, -16,
	198, -1000, 538, -1000, 87, 2392, 87, 3100, 409, 104,
	104, 3100, -1000, -1000, -1000, -1000, 130, -66, -1000, -130,
	-130, -1000, 624, -1000, -1000, -1000, -1000, -1000, 1710, 44,
	-1000, -1000, 3100, 757, -114, -114, -60, -60, -60, 15,
	1060, 3100, -1000, -1000, -1000, -1000, -20, -1000, 22, -30,
	-28, 419, 3100, -20, -30, 290, 63, 290, 290, -31,
	-1000, -71, -34, -1000, 7, 3100, -1000, 243, 267, -1000,
	3100, 2392, 138, 16, -1000, -1000, -1000, 212, 483, 3100,
	482, -1000, 3100, -36, -1000, 2392, -1000, -1000, -130, -80,
	-100, -1000, 624, -1000, 85, 3100, 234, 234, -1000, -1000,
	576, -1000, 2813, 44, -1000, -1000, 112, -1000, 2467, 3100,
	13, 133, 131, -37, 2392, -1000, 8, 207, 290, 207,
	207, 12, 3100, 12, -1000, -1000, 51, 2392, 256, 5,
	2392, -1000, 233, 3100, -1000, 159, -1000, 2392, -1000, 30,
	234, 62, 62, -1000, -1000, -1000, 1662, 130, 130, -1000,
	-1000, -1000, 1529, -1000, -1000, -65, 3100, 1481, 267, 3100,
	3, 128, 267, -1000, 207, -1000, -1000, -1000, 1348, -1000,
	-38, -1000, 205, 109, -1000, 416, 234, -1000, -1000, -1000,
	-97, -1000, 2392, 54, 461, -1000, 241, -130, -130, -1000,
	-1000, -1000, -1000, 2392, 3100, 207, 2392, -1000, -7, 207,
	-1000, -1000, 481, 51, 12, 12, 290, 394, -1000, 242,
	232, 3100, -1000, -1000, -1000, 3100, -1000, 222, 234, 234,
	1300, -1000, -1000, -1000, -1000, -1000, -1000, -66, -1000, 207,
	172, 376, 256, 99, 533, -1000, 2392, 395, 241, 241,
	-1000, -1000, 283, 170, 109, 138, 3100, 3100, 3100, -1000,
	-1000, 176, 63, 442, 290, -1000, -1000, 2392, 2392, 107,
	118, 63, 105, -1000, 3100, 207, -1000, 277, -1000, 63,
	-1000, -1000, 261, -1000, 1167, -1000, 164, 348, -1000, 315,
	-1000, 510, 162, 161, 63, 439, 436, 105, 3100, 3100,
	-1000, -1000, -1000,
}
var yyPgo = []int{

	0, 718, 717, 579, 715, 714, 52, 713, 711, 0,
	65, 117, 37, 336, 48, 57, 54, 20, 18, 22,
	710, 709, 708, 707, 49, 327, 706, 705, 703, 45,
	47, 290, 28, 702, 701, 700, 699, 35, 698, 60,
	697, 696, 694, 493, 693, 41, 43, 692, 19, 25,
	46, 102, 691, 26, 14, 280, 690, 6, 689, 51,
	688, 687, 31, 685, 684, 44, 33, 683, 63, 678,
	677, 39, 671, 347, 11, 53, 670, 669, 667, 577,
	666, 665, 662, 655, 654, 646, 645, 643, 642, 640,
	639, 635, 633, 624, 623, 561, 34, 42, 17, 38,
	622, 618, 4, 23, 617, 16, 7, 32, 612, 8,
	29, 611, 606, 24, 10, 603, 600, 3, 2, 5,
	27, 40, 593, 15, 590, 9, 588, 580, 575, 36,
	570, 21, 568, 50, 567,
}
var yyR1 = []int{

	0, 128, 128, 79, 79, 79, 79, 79, 79, 80,
	81, 82, 83, 84, 84, 84, 84, 84, 85, 91,
	91, 91, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 39, 39, 41, 40, 68, 67, 67, 67,
	67, 67, 129, 129, 66, 66, 65, 65, 65, 18,
	18, 17, 17, 16, 44, 44, 43, 42, 42, 42,
	42, 130, 130, 45, 45, 45, 46, 46, 46, 50,
	51, 49, 49, 53, 53, 52, 131, 131, 47, 47,
	47, 132, 132, 54, 55, 55, 56, 15, 15, 14,
	57, 57, 58, 59, 59, 60, 60, 12, 12, 61,
	61, 62, 63, 63, 64, 70, 70, 69, 72, 72,
	71, 78, 78, 77, 77, 74, 74, 73, 76, 76,
	75, 86, 86, 95, 95, 133, 133, 133, 134, 134,
	97, 97, 96, 102, 102, 101, 100, 100, 98, 99,
	99, 87, 87, 88, 89, 89, 89, 106, 108, 108,
	107, 113, 113, 112, 104, 104, 103, 103, 19, 105,
	32, 32, 109, 111, 111, 110, 90, 90, 114, 114,
	114, 114, 115, 115, 115, 119, 119, 116, 116, 116,
	117, 118, 92, 92, 120, 121, 121, 122, 122, 123,
	123, 123, 123, 127, 127, 125, 126, 126, 93, 93,
	94, 124, 124, 48, 48, 48, 48, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 10, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 3, 8, 8, 7, 7, 6, 4, 13, 13,
	5, 5, 20, 21, 21, 22, 25, 25, 23, 24,
	24, 33, 33, 33, 34, 26, 26, 27, 27, 27,
	30, 30, 29, 29, 31, 28, 28, 35, 36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 4, 1, 3, 4, 3, 4,
	3, 4, 1, 1, 5, 5, 2, 1, 2, 2,
	3, 4, 1, 1, 1, 3, 1, 3, 2, 0,
	1, 1, 2, 1, 0, 1, 2, 1, 4, 4,
	5, 1, 1, 4, 6, 6, 4, 6, 6, 1,
	1, 0, 2, 0, 1, 4, 0, 1, 0, 1,
	2, 0, 1, 4, 0, 1, 2, 1, 3, 3,
	0, 1, 2, 0, 1, 5, 1, 1, 3, 0,
	1, 2, 0, 1, 2, 0, 1, 3, 1, 3,
	2, 0, 1, 1, 1, 0, 1, 2, 0, 1,
	2, 6, 9, 4, 2, 0, 5, 6, 1, 2,
	1, 3, 6, 0, 1, 2, 1, 2, 2, 0,
	3, 6, 9, 7, 8, 7, 7, 2, 1, 3,
	4, 0, 1, 4, 1, 3, 3, 3, 1, 1,
	0, 2, 2, 1, 3, 2, 10, 13, 0, 6,
	6, 6, 0, 6, 6, 0, 6, 2, 3, 2,
	1, 2, 6, 11, 1, 1, 3, 0, 3, 0,
	2, 2, 2, 1, 3, 1, 0, 2, 5, 5,
	6, 0, 3, 1, 3, 3, 4, 1, 3, 3,
	5, 5, 4, 5, 6, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 2, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 3, 3, 3, 0, 1,
	1, 1, 3, 1, 1, 3, 4, 5, 2, 0,
	2, 4, 5, 4, 1, 1, 1, 4, 4, 4,
	1, 3, 3, 3, 2, 6, 6, 3, 1, 1,
}
var yyChk = []int{

	-1000, -128, -79, -9, -80, -81, -82, -83, -84, -85,
	-10, 92, 49, 50, 107, 48, -37, -86, -87, -88,
	-89, -90, -91, -1, -2, 162, 126, -5, -33, 88,
	-20, -26, -35, -38, 68, 146, 34, 145, 87, -92,
	-93, -94, 93, 89, 51, 138, 94, 161, 132, -3,
	-4, 164, 165, -34, 20, -27, -28, 166, -39, 28,
	40, 5, 168, 170, 8, 129, 45, 9, 52, -41,
	-40, -43, -68, 55, 125, 189, 170, 184, 88, 185,
	186, 187, 183, 7, 99, 176, 177, 178, 179, 180,
	181, 182, 13, 92, 80, 62, 158, 71, -9, -9,
	-79, -79, -3, -9, -70, 141, 69, 46, -69, 100,
	70, 70, 55, -95, -50, -51, 162, 70, 166, -21,
	-22, -23, -9, -25, 154, -36, -9, -37, 108, 65,
	108, 65, 65, -8, -7, -6, 132, -13, -12, -9,
	-30, -29, -19, 162, -30, -30, -9, -9, -55, -56,
	78, -44, -43, -42, -45, -51, -50, 133, -67, -66,
	38, 4, -129, -65, 113, 42, 185, -9, 162, 163,
	170, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -11, -10, 13,
	80, 62, 158, -9, -9, -9, 93, 92, 89, 151,
	15, 94, 132, 9, 95, 14, -73, -75, 81, 96,
	-39, 4, -39, 4, -39, 4, 18, -95, -95, -95,
	-53, -52, 147, 174, -18, -17, -16, 10, 162, -95,
	-13, 38, 185, 44, -25, 154, -24, 43, -9, 167,
	65, -120, 162, 65, -121, -51, -50, -121, 169, 173,
	174, 171, 173, -31, 173, 123, 62, 158, -31, -31,
	54, 54, -57, -58, 155, -15, -14, -16, -55, -47,
	67, 77, -49, 189, 174, 174, 173, -66, -129, -66,
	-9, 189, -18, -9, 171, 174, 7, 189, 170, 184,
	88, 185, 186, 187, 183, -11, -9, -9, -9, 93,
	89, 151, 15, 94, 132, 9, 95, 14, -76, -75,
	-74, -73, -9, -9, -39, -39, -39, -72, -71, -9,
	-133, 166, -133, 166, -53, -106, -109, 127, 144, -131,
	108, -51, 162, -16, 149, 167, -9, 167, -24, -9,
	-9, 134, 97, 97, 97, 189, 174, 189, -6, -9,
	-9, 44, -29, -9, -9, -9, 44, 44, -30, -30,
	-59, -60, 58, -62, 79, -9, 173, 176, -57, 72,
	91, -130, 143, 53, -132, 101, -18, -48, 162, -51,
	-51, -65, -9, -18, 185, 171, 172, 171, -9, -11,
	162, 163, 170, -9, -11, -11, -11, -11, -11, -11,
	7, 173, -78, -77, 11, 36, -97, -96, 152, -98,
	73, 108, -134, -97, -98, -57, -109, -57, -57, -108,
	-107, -48, -111, -110, -48, 74, -18, -45, 166, 167,
	134, -9, -121, -121, -121, -120, -51, -120, -32, 154,
	-32, -68, 18, -15, -14, -9, -59, -46, -51, -50,
	133, -46, -9, -53, 189, 170, -49, -49, -18, 171,
	-9, 171, 174, -11, -71, -102, 173, -101, 118, 166,
	-99, 173, 173, 73, -9, -102, -99, -74, -57, -74,
	-74, 173, 176, 173, -113, -112, 54, -9, 97, -37,
	-9, -123, 149, 166, -124, 116, 44, -9, 44, -12,
	-49, 174, 174, -18, 162, 163, -9, -18, -18, 171,
	172, 171, -9, -96, -100, -66, -129, -9, 167, 150,
	150, 173, 167, -102, -74, -102, -102, -107, -9, -110,
	-104, -103, -19, -98, 73, 108, 167, 153, 82, 59,
	-127, -125, -9, 135, -61, -62, -18, -51, -51, 171,
	-53, -53, 171, -9, 173, -37, -9, 167, 150, -37,
	-102, -113, -32, 173, 62, 158, -114, 154, 73, -17,
	167, 173, -120, -63, -64, 60, -54, 97, -49, -49,
	-9, -102, 167, -102, 44, -103, -105, -48, -105, -74,
	85, 92, 97, -122, 103, -125, -9, -131, -18, -18,
	167, -102, 134, 85, -98, -126, 155, 18, 74, -54,
	-54, 145, 34, 134, -114, -123, -125, -9, -9, -116,
	-106, -109, -117, -57, 68, -74, -115, 154, -57, -109,
	-57, -119, 154, -118, -9, -102, 85, 92, -57, 92,
	-57, 134, 85, 85, 34, 134, 134, -117, 68, 68,
	-119, -118, -118,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	207, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 258, 259, -2, 261, 262, 263, 0,
	265, 266, 267, 105, 0, 0, 0, 0, 0, 19,
	20, 21, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 300, 301, 0, 0, 315, 316, 0, 25, 0,
	0, 0, 292, 298, 0, 0, 0, 0, 0, 32,
	33, 84, 54, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 223, 257,
	9, 10, 11, 264, 22, 0, 0, 0, 106, 0,
	0, 0, 0, 73, 0, 49, -2, 0, 298, 0,
	303, 304, 0, 309, 0, 0, 328, 329, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 299, 97,
	0, 320, 0, 158, 0, 0, 0, 0, 90, 85,
	0, 84, 55, -2, 57, 71, 0, 0, 36, 37,
	0, 0, 0, 44, 42, 43, 46, 49, 208, 209,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	-2, -2, -2, -2, -2, -2, -2, 0, 268, 0,
	0, 0, 0, -2, -2, -2, 239, 0, 241, 243,
	245, 247, 249, 251, 253, 255, 118, 115, 0, 0,
	26, 0, 28, 0, 30, 0, 0, 125, 125, 73,
	0, 74, 76, 0, 124, 50, 51, 0, 53, 0,
	0, 0, 0, 302, 309, 0, 308, 0, 0, 327,
	0, 0, 184, 0, 0, 185, 0, 0, 291, 0,
	0, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 91, 0, 86, 87, 0, 90, 0,
	79, 81, 49, 0, 0, 0, 0, 38, 0, 39,
	49, 0, 48, 0, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, -2, -2, 240,
	242, 244, 246, 248, 250, 252, 254, 256, 23, 119,
	24, 116, 117, 120, 27, 29, 31, 107, 108, 111,
	0, 0, 0, 0, 90, 90, 90, 0, 0, 0,
	77, 49, 70, 52, 0, 311, 0, 313, 305, 0,
	310, 0, 0, 0, 0, 0, 0, 0, 295, 296,
	98, 317, 321, 324, 322, 323, 318, 319, 160, 160,
	0, 94, 0, 96, 0, 92, 0, 0, 93, 0,
	0, 0, 61, 62, 80, 82, 73, 72, 203, 71,
	71, 45, 49, 40, 47, 210, 211, 213, 0, 231,
	269, 270, 0, 0, 276, 277, 278, 279, 280, 281,
	0, 0, 110, 112, 113, 114, 133, 130, 0, 139,
	128, 0, 0, 133, 139, 115, 90, 115, 115, 147,
	148, 0, 162, 163, 151, 0, 123, 0, 0, 312,
	0, 306, 189, 0, 198, 199, 186, 201, 0, 0,
	0, 34, 0, 101, 88, 89, 35, 58, 71, 0,
	0, 59, 49, 63, 0, 0, 49, 49, 41, 214,
	0, 273, 0, 232, 109, 121, 0, 134, 0, 0,
	0, 0, 0, 129, 138, 141, 0, 133, 115, 133,
	133, 0, 0, 0, 165, 152, 0, 75, 0, 0,
	307, 182, 0, 0, 200, 0, 325, 161, 326, 99,
	49, 0, 0, 60, 204, 205, 0, 73, 73, 271,
	272, 274, 0, 131, 135, 136, 0, 0, 0, 0,
	0, 0, 0, 143, 133, 145, 146, 149, 151, 164,
	160, 154, 0, 168, 128, 0, 0, 190, 191, 192,
	0, 193, 195, 0, 102, 100, 0, 71, 71, 206,
	64, 65, 275, 137, 0, 133, 140, 126, 0, 133,
	144, 150, 0, 0, 0, 0, 115, 0, 129, 0,
	187, 0, 202, 95, 103, 0, 66, 76, 49, 49,
	0, 122, 127, 142, 153, 155, 156, 159, 157, 133,
	0, 0, 0, 196, 0, 194, 104, 0, 0, 0,
	132, 166, 0, 0, 168, 189, 0, 0, 0, 67,
	68, 0, 90, 0, 115, 183, 197, 188, 83, 172,
	90, 90, 175, 180, 0, 133, 169, 0, 177, 90,
	179, 170, 0, 171, 90, 167, 0, 0, 178, 0,
	181, 0, 0, 0, 90, 0, 0, 175, 0, 0,
	173, 174, 176,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:353
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:358
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:379
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:386
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:393
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:400
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		//line n1ql.y:431
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 23:
		//line n1ql.y:435
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:439
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:445
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 26:
		//line n1ql.y:450
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 27:
		//line n1ql.y:455
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:460
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:465
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:470
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:475
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		//line n1ql.y:488
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 35:
		//line n1ql.y:495
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 36:
		//line n1ql.y:510
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 37:
		//line n1ql.y:517
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 38:
		//line n1ql.y:522
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:527
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:532
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 41:
		//line n1ql.y:537
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 44:
		//line n1ql.y:550
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 45:
		//line n1ql.y:555
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 46:
		//line n1ql.y:562
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 47:
		//line n1ql.y:567
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 48:
		//line n1ql.y:572
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 49:
		//line n1ql.y:579
		{
			yyVAL.s = ""
		}
	case 50:
		yyVAL.s = yyS[yypt-0].s
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		//line n1ql.y:590
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 53:
		yyVAL.s = yyS[yypt-0].s
	case 54:
		//line n1ql.y:608
		{
			yyVAL.fromTerm = nil
		}
	case 55:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 56:
		//line n1ql.y:617
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 57:
		//line n1ql.y:624
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 58:
		//line n1ql.y:629
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 59:
		//line n1ql.y:634
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 60:
		//line n1ql.y:639
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 63:
		//line n1ql.y:652
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 64:
		//line n1ql.y:657
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 65:
		//line n1ql.y:662
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:669
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:674
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 68:
		//line n1ql.y:679
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 69:
		yyVAL.s = yyS[yypt-0].s
	case 70:
		yyVAL.s = yyS[yypt-0].s
	case 71:
		//line n1ql.y:694
		{
			yyVAL.path = nil
		}
	case 72:
		//line n1ql.y:699
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 73:
		//line n1ql.y:706
		{
			yyVAL.expr = nil
		}
	case 74:
		yyVAL.expr = yyS[yypt-0].expr
	case 75:
		//line n1ql.y:715
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 76:
		//line n1ql.y:722
		{
		}
	case 78:
		//line n1ql.y:730
		{
			yyVAL.b = false
		}
	case 79:
		//line n1ql.y:735
		{
			yyVAL.b = false
		}
	case 80:
		//line n1ql.y:740
		{
			yyVAL.b = true
		}
	case 83:
		//line n1ql.y:753
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 84:
		//line n1ql.y:767
		{
			yyVAL.bindings = nil
		}
	case 85:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 86:
		//line n1ql.y:776
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 87:
		//line n1ql.y:783
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 88:
		//line n1ql.y:788
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 89:
		//line n1ql.y:795
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 90:
		//line n1ql.y:809
		{
			yyVAL.expr = nil
		}
	case 91:
		yyVAL.expr = yyS[yypt-0].expr
	case 92:
		//line n1ql.y:818
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 93:
		//line n1ql.y:832
		{
			yyVAL.group = nil
		}
	case 94:
		yyVAL.group = yyS[yypt-0].group
	case 95:
		//line n1ql.y:841
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 96:
		//line n1ql.y:846
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 97:
		//line n1ql.y:853
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 98:
		//line n1ql.y:858
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 99:
		//line n1ql.y:865
		{
			yyVAL.bindings = nil
		}
	case 100:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 101:
		//line n1ql.y:874
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 102:
		//line n1ql.y:881
		{
			yyVAL.expr = nil
		}
	case 103:
		yyVAL.expr = yyS[yypt-0].expr
	case 104:
		//line n1ql.y:890
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 105:
		//line n1ql.y:904
		{
			yyVAL.order = nil
		}
	case 106:
		yyVAL.order = yyS[yypt-0].order
	case 107:
		//line n1ql.y:913
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 108:
		//line n1ql.y:920
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 109:
		//line n1ql.y:925
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 110:
		//line n1ql.y:932
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 111:
		//line n1ql.y:939
		{
			yyVAL.b = false
		}
	case 112:
		yyVAL.b = yyS[yypt-0].b
	case 113:
		//line n1ql.y:948
		{
			yyVAL.b = false
		}
	case 114:
		//line n1ql.y:953
		{
			yyVAL.b = true
		}
	case 115:
		//line n1ql.y:967
		{
			yyVAL.expr = nil
		}
	case 116:
		yyVAL.expr = yyS[yypt-0].expr
	case 117:
		//line n1ql.y:976
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 118:
		//line n1ql.y:990
		{
			yyVAL.expr = nil
		}
	case 119:
		yyVAL.expr = yyS[yypt-0].expr
	case 120:
		//line n1ql.y:999
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		//line n1ql.y:1013
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 122:
		//line n1ql.y:1018
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 123:
		//line n1ql.y:1025
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 124:
		//line n1ql.y:1030
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 130:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 131:
		//line n1ql.y:1053
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 132:
		//line n1ql.y:1060
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 133:
		//line n1ql.y:1067
		{
			yyVAL.projection = nil
		}
	case 134:
		yyVAL.projection = yyS[yypt-0].projection
	case 135:
		//line n1ql.y:1076
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 136:
		//line n1ql.y:1083
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 137:
		//line n1ql.y:1088
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 138:
		//line n1ql.y:1095
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 139:
		//line n1ql.y:1102
		{
			yyVAL.expr = nil
		}
	case 140:
		//line n1ql.y:1107
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		//line n1ql.y:1121
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 142:
		//line n1ql.y:1126
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 143:
		//line n1ql.y:1140
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 144:
		//line n1ql.y:1154
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1159
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1164
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1171
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 148:
		//line n1ql.y:1178
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 149:
		//line n1ql.y:1183
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 150:
		//line n1ql.y:1190
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 151:
		//line n1ql.y:1197
		{
			yyVAL.updateFor = nil
		}
	case 152:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 153:
		//line n1ql.y:1206
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 154:
		//line n1ql.y:1213
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 155:
		//line n1ql.y:1218
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 156:
		//line n1ql.y:1225
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 157:
		//line n1ql.y:1230
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 158:
		yyVAL.s = yyS[yypt-0].s
	case 159:
		//line n1ql.y:1241
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 160:
		//line n1ql.y:1248
		{
			yyVAL.expr = nil
		}
	case 161:
		//line n1ql.y:1253
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 162:
		//line n1ql.y:1260
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 163:
		//line n1ql.y:1267
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 164:
		//line n1ql.y:1272
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 165:
		//line n1ql.y:1279
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 166:
		//line n1ql.y:1293
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 167:
		//line n1ql.y:1299
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 168:
		//line n1ql.y:1307
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 169:
		//line n1ql.y:1312
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 170:
		//line n1ql.y:1317
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 171:
		//line n1ql.y:1322
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 172:
		//line n1ql.y:1329
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 173:
		//line n1ql.y:1334
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1339
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 175:
		//line n1ql.y:1346
		{
			yyVAL.mergeInsert = nil
		}
	case 176:
		//line n1ql.y:1351
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 177:
		//line n1ql.y:1358
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 178:
		//line n1ql.y:1363
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 179:
		//line n1ql.y:1368
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 180:
		//line n1ql.y:1375
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1382
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1396
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-1].keyspaceRef, yyS[yypt-0].indexType)
		}
	case 183:
		//line n1ql.y:1401
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-8].s, yyS[yypt-6].keyspaceRef, yyS[yypt-4].exprs, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].indexType)
		}
	case 184:
		yyVAL.s = yyS[yypt-0].s
	case 185:
		//line n1ql.y:1412
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 186:
		//line n1ql.y:1417
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 187:
		//line n1ql.y:1424
		{
			yyVAL.expr = nil
		}
	case 188:
		//line n1ql.y:1429
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 189:
		//line n1ql.y:1436
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 190:
		//line n1ql.y:1441
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 191:
		//line n1ql.y:1446
		{
			yyVAL.indexType = datastore.GSI
		}
	case 192:
		//line n1ql.y:1451
		{
			yyVAL.indexType = datastore.GSI
		}
	case 193:
		//line n1ql.y:1458
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 194:
		//line n1ql.y:1463
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 195:
		//line n1ql.y:1470
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable."))
			}

			yyVAL.expr = exp
		}
	case 196:
		//line n1ql.y:1481
		{
			yyVAL.expr = nil
		}
	case 197:
		//line n1ql.y:1486
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 198:
		//line n1ql.y:1500
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 199:
		//line n1ql.y:1505
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 200:
		//line n1ql.y:1518
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 201:
		//line n1ql.y:1524
		{
			yyVAL.s = ""
		}
	case 202:
		//line n1ql.y:1529
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 203:
		//line n1ql.y:1543
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 204:
		//line n1ql.y:1548
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 205:
		//line n1ql.y:1553
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 206:
		//line n1ql.y:1560
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 207:
		yyVAL.expr = yyS[yypt-0].expr
	case 208:
		//line n1ql.y:1577
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 209:
		//line n1ql.y:1582
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 210:
		//line n1ql.y:1589
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 211:
		//line n1ql.y:1594
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 212:
		//line n1ql.y:1601
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 213:
		//line n1ql.y:1606
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 214:
		//line n1ql.y:1611
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 215:
		//line n1ql.y:1617
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 216:
		//line n1ql.y:1622
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 217:
		//line n1ql.y:1627
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 218:
		//line n1ql.y:1632
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 219:
		//line n1ql.y:1637
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 220:
		//line n1ql.y:1643
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 221:
		//line n1ql.y:1649
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 222:
		//line n1ql.y:1654
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 223:
		//line n1ql.y:1659
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 224:
		//line n1ql.y:1665
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 225:
		//line n1ql.y:1670
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 226:
		//line n1ql.y:1675
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1680
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1685
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1690
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1695
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1700
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1705
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1710
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1715
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1720
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1725
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1730
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1735
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1740
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 240:
		//line n1ql.y:1745
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 241:
		//line n1ql.y:1750
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 242:
		//line n1ql.y:1755
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 243:
		//line n1ql.y:1760
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 244:
		//line n1ql.y:1765
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 245:
		//line n1ql.y:1770
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 246:
		//line n1ql.y:1775
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 247:
		//line n1ql.y:1780
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 248:
		//line n1ql.y:1785
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 249:
		//line n1ql.y:1790
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 250:
		//line n1ql.y:1795
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 251:
		//line n1ql.y:1800
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 252:
		//line n1ql.y:1805
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 253:
		//line n1ql.y:1810
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 254:
		//line n1ql.y:1815
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 255:
		//line n1ql.y:1820
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 256:
		//line n1ql.y:1825
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 257:
		//line n1ql.y:1830
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 258:
		yyVAL.expr = yyS[yypt-0].expr
	case 259:
		yyVAL.expr = yyS[yypt-0].expr
	case 260:
		//line n1ql.y:1844
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 261:
		//line n1ql.y:1850
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 262:
		yyVAL.expr = yyS[yypt-0].expr
	case 263:
		yyVAL.expr = yyS[yypt-0].expr
	case 264:
		//line n1ql.y:1862
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 265:
		yyVAL.expr = yyS[yypt-0].expr
	case 266:
		yyVAL.expr = yyS[yypt-0].expr
	case 267:
		yyVAL.expr = yyS[yypt-0].expr
	case 268:
		yyVAL.expr = yyS[yypt-0].expr
	case 269:
		//line n1ql.y:1881
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 270:
		//line n1ql.y:1886
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 271:
		//line n1ql.y:1893
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 272:
		//line n1ql.y:1898
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 273:
		//line n1ql.y:1905
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 274:
		//line n1ql.y:1910
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 275:
		//line n1ql.y:1915
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 276:
		//line n1ql.y:1921
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 277:
		//line n1ql.y:1926
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 278:
		//line n1ql.y:1931
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 279:
		//line n1ql.y:1936
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 280:
		//line n1ql.y:1941
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 281:
		//line n1ql.y:1947
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 282:
		//line n1ql.y:1961
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 283:
		//line n1ql.y:1966
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 284:
		//line n1ql.y:1971
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 285:
		//line n1ql.y:1976
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 286:
		//line n1ql.y:1981
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 287:
		//line n1ql.y:1986
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 288:
		//line n1ql.y:1991
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 289:
		yyVAL.expr = yyS[yypt-0].expr
	case 290:
		yyVAL.expr = yyS[yypt-0].expr
	case 291:
		//line n1ql.y:2011
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 292:
		//line n1ql.y:2018
		{
			yyVAL.bindings = nil
		}
	case 293:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 294:
		//line n1ql.y:2027
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 295:
		//line n1ql.y:2032
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 296:
		//line n1ql.y:2039
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 297:
		//line n1ql.y:2046
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 298:
		//line n1ql.y:2053
		{
			yyVAL.exprs = nil
		}
	case 299:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 300:
		//line n1ql.y:2069
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 301:
		//line n1ql.y:2074
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 302:
		//line n1ql.y:2088
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 303:
		yyVAL.expr = yyS[yypt-0].expr
	case 304:
		yyVAL.expr = yyS[yypt-0].expr
	case 305:
		//line n1ql.y:2101
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 306:
		//line n1ql.y:2108
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 307:
		//line n1ql.y:2113
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 308:
		//line n1ql.y:2121
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 309:
		//line n1ql.y:2128
		{
			yyVAL.expr = nil
		}
	case 310:
		//line n1ql.y:2133
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 311:
		//line n1ql.y:2147
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 312:
		//line n1ql.y:2166
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 313:
		//line n1ql.y:2181
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
				if ok {
					yyVAL.expr = agg.Constructor()(nil)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
				}
			}
		}
	case 314:
		yyVAL.s = yyS[yypt-0].s
	case 315:
		yyVAL.expr = yyS[yypt-0].expr
	case 316:
		yyVAL.expr = yyS[yypt-0].expr
	case 317:
		//line n1ql.y:2215
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 318:
		//line n1ql.y:2220
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 319:
		//line n1ql.y:2225
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 320:
		//line n1ql.y:2232
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 321:
		//line n1ql.y:2237
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 322:
		//line n1ql.y:2244
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 323:
		//line n1ql.y:2249
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 324:
		//line n1ql.y:2256
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 325:
		//line n1ql.y:2263
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 326:
		//line n1ql.y:2268
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 327:
		//line n1ql.y:2282
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 328:
		yyVAL.expr = yyS[yypt-0].expr
	case 329:
		//line n1ql.y:2291
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
