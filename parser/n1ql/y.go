//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	ss        []string
	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
	val         value.Value
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BUILD = 57360
const BY = 57361
const CALL = 57362
const CASE = 57363
const CAST = 57364
const CLUSTER = 57365
const COLLATE = 57366
const COLLECTION = 57367
const COMMIT = 57368
const CONNECT = 57369
const CONTINUE = 57370
const CREATE = 57371
const DATABASE = 57372
const DATASET = 57373
const DATASTORE = 57374
const DECLARE = 57375
const DECREMENT = 57376
const DELETE = 57377
const DERIVED = 57378
const DESC = 57379
const DESCRIBE = 57380
const DISTINCT = 57381
const DO = 57382
const DROP = 57383
const EACH = 57384
const ELEMENT = 57385
const ELSE = 57386
const END = 57387
const EVERY = 57388
const EXCEPT = 57389
const EXCLUDE = 57390
const EXECUTE = 57391
const EXISTS = 57392
const EXPLAIN = 57393
const FALSE = 57394
const FIRST = 57395
const FLATTEN = 57396
const FOR = 57397
const FROM = 57398
const FUNCTION = 57399
const GRANT = 57400
const GROUP = 57401
const GSI = 57402
const HAVING = 57403
const IF = 57404
const IN = 57405
const INCLUDE = 57406
const INCREMENT = 57407
const INDEX = 57408
const INDEXES = 57409
const INLINE = 57410
const INNER = 57411
const INSERT = 57412
const INTERSECT = 57413
const INTO = 57414
const IS = 57415
const JOIN = 57416
const KEY = 57417
const KEYS = 57418
const KEYSPACE = 57419
const LAST = 57420
const LEFT = 57421
const LET = 57422
const LETTING = 57423
const LIKE = 57424
const LIMIT = 57425
const LSM = 57426
const MAP = 57427
const MAPPING = 57428
const MATCHED = 57429
const MATERIALIZED = 57430
const MERGE = 57431
const MINUS = 57432
const MISSING = 57433
const NAMESPACE = 57434
const NEST = 57435
const NOT = 57436
const NULL = 57437
const NUMBER = 57438
const OBJECT = 57439
const OFFSET = 57440
const ON = 57441
const OPTION = 57442
const OR = 57443
const ORDER = 57444
const OUTER = 57445
const OVER = 57446
const PARTITION = 57447
const PASSWORD = 57448
const PATH = 57449
const POOL = 57450
const PREPARE = 57451
const PRIMARY = 57452
const PRIVATE = 57453
const PRIVILEGE = 57454
const PROCEDURE = 57455
const PUBLIC = 57456
const RAW = 57457
const REALM = 57458
const REDUCE = 57459
const RENAME = 57460
const RETURN = 57461
const RETURNING = 57462
const REVOKE = 57463
const RIGHT = 57464
const ROLE = 57465
const ROLLBACK = 57466
const SATISFIES = 57467
const SCHEMA = 57468
const SELECT = 57469
const SELF = 57470
const SET = 57471
const SHOW = 57472
const SOME = 57473
const START = 57474
const STATISTICS = 57475
const STRING = 57476
const SYSTEM = 57477
const THEN = 57478
const TO = 57479
const TRANSACTION = 57480
const TRIGGER = 57481
const TRUE = 57482
const TRUNCATE = 57483
const UNDER = 57484
const UNION = 57485
const UNIQUE = 57486
const UNNEST = 57487
const UNSET = 57488
const UPDATE = 57489
const UPSERT = 57490
const USE = 57491
const USER = 57492
const USING = 57493
const VALUE = 57494
const VALUED = 57495
const VALUES = 57496
const VIEW = 57497
const WHEN = 57498
const WHERE = 57499
const WHILE = 57500
const WITH = 57501
const WITHIN = 57502
const WORK = 57503
const XOR = 57504
const INT = 57505
const IDENTIFIER = 57506
const IDENTIFIER_ICASE = 57507
const NAMED_PARAM = 57508
const POSITIONAL_PARAM = 57509
const NEXT_PARAM = 57510
const LPAREN = 57511
const RPAREN = 57512
const LBRACE = 57513
const RBRACE = 57514
const LBRACKET = 57515
const RBRACKET = 57516
const RBRACKET_ICASE = 57517
const COMMA = 57518
const COLON = 57519
const INTERESECT = 57520
const EQ = 57521
const DEQ = 57522
const NE = 57523
const LT = 57524
const GT = 57525
const LE = 57526
const GE = 57527
const CONCAT = 57528
const PLUS = 57529
const STAR = 57530
const DIV = 57531
const MOD = 57532
const UMINUS = 57533
const DOT = 57534

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INDEXES",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	169, 326,
	-2, 271,
	-1, 119,
	177, 72,
	-2, 73,
	-1, 157,
	54, 81,
	74, 81,
	93, 81,
	145, 81,
	-2, 57,
	-1, 186,
	179, 0,
	180, 0,
	181, 0,
	-2, 235,
	-1, 187,
	179, 0,
	180, 0,
	181, 0,
	-2, 236,
	-1, 188,
	179, 0,
	180, 0,
	181, 0,
	-2, 237,
	-1, 189,
	182, 0,
	183, 0,
	184, 0,
	185, 0,
	-2, 238,
	-1, 190,
	182, 0,
	183, 0,
	184, 0,
	185, 0,
	-2, 239,
	-1, 191,
	182, 0,
	183, 0,
	184, 0,
	185, 0,
	-2, 240,
	-1, 192,
	182, 0,
	183, 0,
	184, 0,
	185, 0,
	-2, 241,
	-1, 199,
	82, 0,
	-2, 244,
	-1, 200,
	63, 0,
	160, 0,
	-2, 246,
	-1, 201,
	63, 0,
	160, 0,
	-2, 248,
	-1, 304,
	82, 0,
	-2, 245,
	-1, 305,
	63, 0,
	160, 0,
	-2, 247,
	-1, 306,
	63, 0,
	160, 0,
	-2, 249,
}

const yyNprod = 342
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2935

var yyAct = []int{

	173, 3, 658, 646, 478, 656, 647, 586, 334, 318,
	333, 555, 101, 102, 582, 551, 599, 337, 609, 420,
	230, 432, 552, 231, 247, 146, 545, 450, 226, 434,
	106, 279, 497, 373, 431, 165, 418, 251, 168, 142,
	483, 326, 459, 273, 272, 75, 16, 158, 370, 250,
	169, 232, 417, 145, 144, 139, 60, 125, 242, 328,
	129, 280, 213, 499, 356, 354, 10, 143, 377, 374,
	591, 150, 151, 298, 516, 118, 592, 481, 467, 515,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 467, 466, 199, 200,
	201, 296, 495, 558, 355, 284, 130, 282, 281, 559,
	79, 257, 296, 100, 160, 466, 299, 300, 301, 252,
	295, 79, 143, 148, 149, 82, 83, 84, 244, 78,
	81, 295, 262, 479, 535, 451, 174, 175, 229, 376,
	78, 451, 496, 494, 484, 176, 485, 412, 193, 259,
	256, 118, 118, 118, 95, 579, 296, 117, 118, 269,
	395, 261, 194, 258, 259, 216, 218, 220, 255, 288,
	297, 299, 300, 301, 65, 295, 605, 291, 401, 402,
	573, 467, 550, 261, 505, 253, 536, 403, 162, 532,
	162, 391, 174, 175, 290, 345, 161, 304, 305, 306,
	466, 176, 285, 287, 98, 286, 274, 343, 81, 245,
	283, 482, 449, 79, 100, 320, 321, 119, 331, 119,
	329, 121, 439, 327, 163, 388, 85, 80, 82, 83,
	84, 81, 78, 117, 117, 117, 518, 519, 344, 462,
	117, 233, 347, 147, 348, 248, 340, 119, 234, 580,
	263, 588, 271, 630, 332, 336, 657, 652, 359, 243,
	360, 583, 194, 363, 364, 365, 271, 339, 119, 152,
	419, 351, 375, 574, 322, 317, 323, 534, 324, 590,
	533, 553, 378, 342, 330, 341, 195, 393, 228, 298,
	411, 79, 557, 636, 399, 260, 335, 404, 671, 346,
	386, 99, 387, 140, 357, 80, 82, 83, 84, 394,
	78, 670, 358, 336, 79, 362, 666, 383, 637, 389,
	390, 626, 368, 369, 77, 76, 481, 85, 80, 82,
	83, 84, 126, 78, 507, 392, 197, 379, 141, 426,
	428, 429, 427, 338, 303, 618, 581, 264, 134, 548,
	442, 425, 385, 600, 615, 196, 380, 221, 435, 219,
	437, 194, 215, 421, 194, 194, 194, 194, 194, 194,
	501, 241, 296, 298, 589, 443, 294, 353, 457, 446,
	160, 448, 464, 424, 549, 302, 297, 299, 300, 301,
	438, 295, 133, 447, 116, 234, 77, 452, 422, 319,
	352, 217, 444, 445, 473, 635, 110, 254, 382, 76,
	664, 76, 470, 327, 471, 465, 453, 460, 460, 455,
	456, 468, 469, 463, 487, 275, 274, 458, 274, 488,
	109, 668, 667, 198, 491, 627, 490, 500, 492, 493,
	132, 214, 503, 400, 265, 266, 405, 406, 407, 408,
	409, 410, 511, 76, 477, 143, 296, 277, 240, 298,
	236, 112, 161, 154, 214, 372, 489, 278, 520, 302,
	297, 299, 300, 301, 509, 295, 526, 632, 194, 215,
	77, 661, 77, 531, 131, 517, 502, 374, 662, 521,
	522, 436, 514, 504, 513, 537, 542, 539, 540, 461,
	461, 538, 108, 584, 613, 486, 556, 212, 223, 224,
	225, 614, 120, 114, 74, 235, 527, 529, 435, 113,
	530, 547, 674, 673, 77, 546, 543, 648, 136, 541,
	249, 569, 86, 246, 572, 562, 135, 598, 95, 76,
	115, 607, 296, 576, 512, 510, 367, 561, 366, 361,
	566, 567, 239, 563, 564, 302, 297, 299, 300, 301,
	476, 295, 669, 631, 454, 222, 423, 384, 381, 50,
	1, 603, 578, 554, 585, 577, 604, 629, 506, 571,
	606, 594, 593, 575, 595, 105, 587, 617, 98, 616,
	156, 508, 612, 556, 2, 601, 602, 350, 100, 620,
	611, 643, 610, 610, 619, 546, 608, 97, 103, 104,
	651, 498, 433, 430, 544, 81, 480, 625, 621, 96,
	528, 42, 622, 623, 41, 40, 87, 39, 22, 21,
	20, 556, 641, 642, 19, 628, 18, 17, 9, 633,
	634, 8, 640, 638, 645, 639, 644, 650, 649, 659,
	7, 653, 655, 654, 660, 6, 5, 4, 413, 414,
	316, 663, 86, 325, 107, 233, 665, 111, 95, 164,
	597, 596, 560, 672, 659, 659, 676, 677, 675, 371,
	270, 209, 153, 227, 276, 99, 211, 206, 159, 155,
	157, 72, 73, 33, 128, 86, 32, 55, 79, 523,
	524, 95, 28, 58, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 57, 78, 98, 31,
	124, 123, 122, 30, 137, 138, 27, 51, 100, 86,
	24, 23, 0, 415, 0, 95, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	0, 98, 0, 0, 0, 0, 87, 0, 0, 416,
	0, 100, 0, 204, 0, 0, 203, 202, 207, 210,
	97, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 0, 0, 98, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 100, 0, 313, 0, 0,
	0, 0, 315, 310, 97, 0, 208, 0, 0, 0,
	0, 0, 81, 0, 0, 99, 96, 0, 0, 234,
	0, 0, 0, 87, 0, 205, 0, 0, 79, 0,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 0, 78, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 79, 474, 95, 0, 475, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 308,
	78, 0, 99, 307, 311, 314, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 79, 95, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 98, 78, 0, 0, 0, 0, 0,
	0, 0, 312, 100, 86, 0, 0, 233, 0, 0,
	95, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	81, 309, 0, 0, 96, 0, 98, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 96, 0, 0,
	98, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	99, 96, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 79, 396, 397, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 0, 78, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 292, 0, 0,
	293, 0, 88, 89, 90, 91, 92, 93, 94, 85,
	80, 82, 83, 84, 0, 78, 0, 99, 167, 0,
	0, 234, 67, 70, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 56, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 289,
	86, 0, 0, 166, 0, 0, 95, 171, 0, 0,
	69, 0, 0, 0, 12, 0, 45, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 44, 98, 0, 11, 43,
	47, 0, 0, 0, 0, 0, 100, 0, 86, 0,
	0, 0, 0, 0, 95, 97, 0, 0, 0, 170,
	0, 0, 0, 81, 0, 0, 0, 96, 0, 0,
	0, 98, 26, 0, 87, 68, 0, 0, 49, 0,
	0, 100, 0, 0, 46, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 499, 0, 81, 0,
	0, 0, 96, 0, 98, 0, 0, 48, 25, 87,
	52, 53, 54, 59, 100, 65, 0, 66, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	271, 81, 172, 99, 0, 96, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 94, 85,
	80, 82, 83, 84, 0, 78, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 624, 0,
	0, 79, 95, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 0,
	78, 99, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 79, 95, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 98, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 86, 0, 0, 0, 0, 0, 95,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 96, 0, 98, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 81, 0, 0, 0, 96, 0, 0, 98,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 99,
	96, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 79, 0, 0, 570, 0, 0, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	0, 78, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 79, 568, 95, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 0, 78, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 79,
	565, 95, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 98, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 86, 0,
	0, 0, 0, 0, 95, 0, 97, 0, 0, 0,
	0, 63, 0, 0, 81, 0, 0, 0, 96, 0,
	0, 98, 0, 0, 64, 87, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 61, 0, 0, 0, 0,
	97, 36, 0, 0, 0, 0, 0, 62, 81, 0,
	0, 0, 96, 0, 98, 15, 0, 13, 0, 87,
	0, 0, 76, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 34, 0, 0, 0,
	0, 81, 0, 0, 99, 96, 0, 0, 0, 0,
	0, 0, 87, 0, 441, 38, 0, 79, 472, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 14, 78, 0, 99, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 79, 95, 77, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 0,
	78, 99, 0, 37, 35, 0, 0, 0, 0, 86,
	0, 440, 0, 0, 79, 95, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 98, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 86, 0, 0, 0, 0, 0, 95,
	0, 97, 0, 0, 0, 0, 0, 268, 0, 81,
	0, 0, 0, 96, 0, 98, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 267, 81, 0, 0, 0, 96, 0, 0, 98,
	0, 0, 0, 87, 0, 349, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 99,
	96, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	0, 78, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 79, 0, 95, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 94, 85, 80,
	82, 83, 84, 0, 78, 0, 99, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 79,
	95, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 98, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 95, 0, 81, 0, 0, 0, 96, 0,
	98, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 67, 70, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 0, 0, 56, 0, 0, 0, 87, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 171, 0, 0, 69,
	127, 97, 0, 12, 99, 45, 71, 0, 0, 81,
	0, 0, 0, 0, 86, 0, 0, 79, 0, 0,
	95, 0, 0, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 0, 78, 99, 0, 0,
	0, 0, 0, 29, 44, 0, 0, 11, 43, 47,
	79, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 170, 78,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 26, 0, 0, 68, 0, 0, 49, 0, 97,
	0, 0, 79, 46, 0, 0, 0, 81, 0, 0,
	0, 96, 0, 0, 0, 85, 80, 82, 83, 84,
	0, 78, 0, 0, 0, 0, 48, 25, 0, 52,
	53, 54, 59, 0, 65, 0, 66, 67, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 0,
	0, 0, 0, 0, 0, 69, 0, 99, 0, 12,
	0, 45, 71, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 67, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 70, 56,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	68, 0, 0, 49, 69, 0, 0, 0, 12, 46,
	45, 71, 0, 0, 0, 69, 0, 0, 0, 12,
	0, 45, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 100, 66, 0, 0, 0, 0, 0, 29, 44,
	97, 0, 11, 43, 47, 0, 0, 238, 81, 29,
	44, 0, 96, 11, 43, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 68,
	0, 0, 49, 0, 0, 0, 0, 26, 46, 0,
	68, 0, 0, 49, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 25, 0, 52, 53, 54, 59, 99, 65,
	0, 66, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 79, 66, 525, 0, 0, 172, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 63,
	78, 0, 67, 70, 0, 0, 0, 0, 0, 95,
	0, 0, 64, 0, 0, 56, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 36,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	69, 0, 0, 15, 12, 13, 45, 71, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 34, 0, 0, 67, 70, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	56, 0, 0, 38, 29, 44, 81, 0, 11, 43,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 14, 0, 69, 0, 0, 0, 12,
	0, 45, 71, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 26, 0, 0, 68, 67, 70, 49, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 56,
	0, 37, 35, 0, 0, 0, 0, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 99, 48, 25, 0,
	52, 53, 54, 59, 69, 65, 0, 66, 12, 79,
	45, 71, 0, 0, 76, 0, 0, 0, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 26, 78, 0,
	68, 0, 0, 49, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 44,
	0, 0, 11, 43, 47, 0, 0, 0, 67, 70,
	0, 0, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 56, 66, 398, 0, 67, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 26, 0, 56, 68,
	0, 0, 49, 0, 0, 0, 69, 0, 46, 0,
	12, 0, 45, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 12, 0, 45,
	71, 48, 25, 0, 52, 53, 54, 59, 0, 65,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	29, 44, 0, 0, 11, 43, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 29, 44, 67,
	70, 11, 43, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 56, 0, 0, 0, 0, 0, 26, 0,
	0, 68, 0, 0, 49, 0, 0, 0, 0, 0,
	46, 0, 0, 0, 0, 26, 0, 69, 68, 0,
	0, 49, 0, 45, 71, 0, 127, 46, 0, 0,
	0, 0, 0, 48, 25, 0, 52, 53, 54, 59,
	0, 65, 0, 66, 0, 0, 0, 0, 0, 0,
	48, 25, 0, 52, 53, 54, 59, 0, 65, 0,
	66, 29, 44, 0, 0, 0, 43, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 0, 68, 0, 0, 49, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 25, 0, 52, 53, 54,
	59, 0, 65, 0, 66,
}
var yyPact = []int{

	2444, -1000, -1000, 1917, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2677, 2677, 1576, 1576, 3, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2677,
	-1000, -1000, -1000, 359, 447, 441, 484, 83, 440, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 52, 2660, -1000, -1000, 2568,
	-1000, 374, 282, 470, 461, 169, 2677, 79, 79, 79,
	2677, 2677, -1000, -1000, 383, 483, 55, 1074, 28, 2677,
	2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677, 2677,
	2677, 2677, 2677, 2677, 2677, 2761, 273, 2677, 2677, 2677,
	672, 2258, 40, -1000, -1000, -1000, -52, 381, 397, 355,
	353, -1000, 546, 83, 83, 83, 139, -39, 231, -1000,
	83, 2159, 507, -1000, -1000, 1884, 215, 2677, 39, 1917,
	-1000, 467, 81, 464, 83, 83, 308, -4, -26, -1000,
	-66, -11, -27, 1917, 7, -1000, 187, -1000, 7, 7,
	1756, 1722, 95, -1000, 84, 383, -1000, 388, -1000, -1000,
	-131, -69, -70, 269, -1000, -71, 1993, 2248, 2677, -1000,
	-1000, -1000, -1000, 917, -1000, -1000, 2677, 883, -63, -63,
	-52, -52, -52, 118, 2258, 2047, 2446, 2446, 2446, 1959,
	1959, 1959, 1959, 369, -1000, 2761, 2677, 2677, 2677, 141,
	40, 40, -1000, 788, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 264, 358, 2677, 2677, -1000, 269, -1000, 269,
	-1000, 269, 2677, 51, 49, 139, 167, -1000, 233, 82,
	-1000, -1000, -1000, 84, -1000, 132, 37, 2677, 25, -1000,
	215, 2677, -1000, 2677, 1689, -1000, 81, 301, -1000, 278,
	-127, -1000, -73, -128, 83, -1000, 169, 2677, -1000, 2677,
	504, 79, 2677, 2677, 2677, 503, 501, 79, 79, 406,
	-1000, 2677, -37, -1000, -111, 95, 263, -1000, 249, 231,
	61, 82, 82, 21, 2248, -71, 2677, -71, 655, -28,
	-1000, 850, -1000, 2509, 2761, 14, 2677, 2761, 2761, 2761,
	2761, 2761, 2761, 283, 141, 40, 40, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1917, 1917, -1000, -1000, -1000, -29, -1000, 722, 116, 288,
	116, 288, 95, 109, 95, 61, 61, 415, -1000, 231,
	-1000, -1000, 53, -1000, 1561, -1000, -1000, 1528, 1917, 2677,
	276, -1000, 83, 83, 81, 82, 81, 43, -1000, 1917,
	1917, -1000, -1000, 1917, 1917, 1917, -1000, -1000, -15, -15,
	197, -1000, 545, -1000, 84, 1917, 84, 2677, 406, 104,
	104, 2677, -1000, -1000, -1000, -1000, 139, -95, -1000, -131,
	-131, 231, -1000, 655, -1000, -1000, -1000, -1000, -1000, 1494,
	199, -1000, -1000, 2677, 688, -72, -72, -61, -61, -61,
	-17, 2761, 2677, -1000, -1000, -1000, -1000, -43, -1000, 42,
	-32, -30, 430, 2677, -43, -32, 358, 95, 358, 358,
	-33, -1000, -77, -34, -1000, 8, 2677, -1000, 271, 269,
	-1000, 2677, 1917, 83, 15, -1000, -1000, -1000, 216, 81,
	500, 2677, 499, -1000, 2677, -37, -1000, 1917, -1000, -1000,
	-131, -98, -103, -1000, 655, -1000, 72, 2677, 231, 231,
	-1000, -1000, -1000, 525, -1000, 2259, 199, -1000, -1000, 116,
	-1000, 1993, 2677, 19, 128, 125, -42, 1917, -1000, 16,
	206, 358, 206, 206, 61, 2677, 61, -1000, -1000, 79,
	1917, 274, 12, 1917, 130, 2677, -1000, 155, -67, -1000,
	-1000, 1917, -1000, -12, 231, 82, 82, -1000, -1000, -1000,
	1366, 139, 139, -1000, -1000, -1000, 1332, -1000, -1000, -71,
	2677, 1299, 269, 2677, 10, 121, 269, -1000, 206, -1000,
	-1000, -1000, 1171, -1000, -21, -1000, 186, 105, -1000, 428,
	231, 92, -1000, 219, -100, -1000, 1917, 81, 130, 81,
	476, -1000, 254, -131, -131, -1000, -1000, -1000, -1000, 1917,
	2677, 206, 1917, -1000, 6, 206, -1000, -1000, 496, 79,
	61, 61, 358, 417, -1000, 255, -1000, -1000, 2677, -1000,
	-1000, 240, 2677, -1000, -1000, -1000, -1000, -1000, 2677, -1000,
	233, 231, 231, 1138, -1000, -1000, -1000, -1000, -1000, -1000,
	-95, -1000, 206, 185, 348, 274, 1917, 96, 544, -1000,
	1917, 401, 254, 254, -1000, -1000, 258, 182, 105, 130,
	2677, 2677, 2677, -1000, -1000, 167, 95, 457, 358, 92,
	-1000, 1917, 1917, 101, 109, 95, 100, -1000, 2677, 206,
	-1000, -1000, 394, -1000, 95, -1000, -1000, 316, -1000, 1103,
	-1000, 180, 345, -1000, 344, -1000, 527, 175, 162, 95,
	453, 452, 100, 2677, 2677, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 731, 730, 569, 727, 726, 55, 725, 724, 0,
	66, 148, 39, 338, 43, 44, 51, 23, 20, 25,
	723, 722, 721, 720, 58, 332, 719, 716, 703, 53,
	54, 295, 27, 702, 697, 696, 694, 46, 693, 56,
	692, 691, 690, 514, 689, 47, 42, 688, 684, 21,
	31, 119, 37, 683, 28, 16, 269, 682, 6, 680,
	48, 679, 672, 33, 671, 670, 50, 35, 669, 45,
	667, 664, 41, 663, 399, 9, 62, 660, 659, 658,
	594, 657, 656, 655, 650, 641, 638, 637, 636, 634,
	630, 629, 628, 627, 625, 624, 621, 394, 36, 52,
	19, 40, 620, 616, 4, 26, 614, 18, 10, 34,
	613, 8, 29, 612, 611, 32, 14, 610, 601, 3,
	2, 5, 24, 597, 591, 49, 587, 22, 15, 586,
	7, 578, 11, 577, 573, 570, 38, 568, 17, 567,
	59, 566,
}
var yyR1 = []int{

	0, 135, 135, 80, 80, 80, 80, 80, 80, 81,
	82, 83, 84, 85, 85, 85, 85, 85, 86, 92,
	92, 92, 92, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 38, 39, 39, 41, 40, 69, 68, 68,
	68, 68, 68, 136, 136, 67, 67, 66, 66, 66,
	18, 18, 17, 17, 16, 44, 44, 43, 42, 42,
	42, 42, 42, 137, 137, 45, 45, 45, 47, 46,
	46, 46, 51, 52, 50, 50, 54, 54, 53, 138,
	138, 48, 48, 48, 139, 139, 55, 56, 56, 57,
	15, 15, 14, 58, 58, 59, 60, 60, 61, 61,
	12, 12, 62, 62, 63, 64, 64, 65, 71, 71,
	70, 73, 73, 72, 79, 79, 78, 78, 75, 75,
	74, 77, 77, 76, 87, 87, 97, 97, 140, 140,
	140, 141, 141, 99, 99, 98, 104, 104, 103, 102,
	102, 100, 101, 101, 88, 88, 89, 90, 90, 90,
	108, 110, 110, 109, 115, 115, 114, 106, 106, 105,
	105, 19, 107, 32, 32, 111, 113, 113, 112, 91,
	91, 116, 116, 116, 116, 117, 117, 117, 121, 121,
	118, 118, 118, 119, 120, 93, 93, 123, 123, 122,
	125, 125, 126, 126, 128, 128, 127, 127, 130, 130,
	129, 134, 134, 132, 133, 133, 94, 94, 95, 131,
	131, 96, 124, 124, 49, 49, 49, 49, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 8, 8, 7, 7, 6, 4, 13,
	13, 5, 5, 5, 20, 21, 21, 22, 25, 25,
	23, 24, 24, 33, 33, 33, 34, 26, 26, 27,
	27, 27, 30, 30, 29, 29, 31, 28, 28, 35,
	36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 4, 1, 3, 4, 3,
	4, 3, 4, 1, 1, 5, 5, 2, 1, 2,
	2, 3, 4, 1, 1, 1, 3, 1, 3, 2,
	0, 1, 1, 2, 1, 0, 1, 2, 1, 1,
	4, 4, 5, 1, 1, 4, 6, 6, 4, 4,
	6, 6, 1, 1, 0, 2, 0, 1, 4, 0,
	1, 0, 1, 2, 0, 1, 4, 0, 1, 2,
	1, 3, 3, 0, 1, 2, 0, 1, 5, 1,
	1, 3, 0, 1, 2, 0, 1, 2, 0, 1,
	3, 1, 3, 2, 0, 1, 1, 1, 0, 1,
	2, 0, 1, 2, 6, 9, 4, 2, 0, 5,
	6, 1, 2, 1, 3, 6, 0, 1, 2, 1,
	2, 2, 0, 3, 6, 9, 7, 8, 7, 7,
	2, 1, 3, 4, 0, 1, 4, 1, 3, 3,
	3, 1, 1, 0, 2, 2, 1, 3, 2, 10,
	13, 0, 6, 6, 6, 0, 6, 6, 0, 6,
	2, 3, 2, 1, 2, 8, 12, 0, 1, 1,
	1, 3, 0, 3, 0, 1, 2, 2, 0, 1,
	2, 1, 3, 1, 0, 2, 5, 5, 6, 0,
	3, 8, 1, 3, 1, 3, 3, 4, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 5, 5, 4, 5, 6, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 0,
	1, 1, 1, 1, 3, 1, 1, 3, 4, 5,
	2, 0, 2, 4, 5, 4, 1, 1, 1, 4,
	4, 4, 1, 3, 3, 3, 2, 6, 6, 3,
	1, 1,
}
var yyChk = []int{

	-1000, -135, -80, -9, -81, -82, -83, -84, -85, -86,
	-10, 94, 50, 51, 109, 49, -37, -87, -88, -89,
	-90, -91, -92, -1, -2, 164, 128, -5, -33, 90,
	-20, -26, -35, -38, 70, 148, 35, 147, 89, -93,
	-94, -95, -96, 95, 91, 52, 140, 96, 163, 134,
	-3, -4, 166, 167, 168, -34, 21, -27, -28, 169,
	-39, 29, 41, 5, 18, 171, 173, 8, 131, 46,
	9, 53, -41, -40, -43, -69, 56, 127, 192, 173,
	187, 90, 188, 189, 190, 186, 7, 101, 179, 180,
	181, 182, 183, 184, 185, 13, 94, 82, 63, 160,
	73, -9, -9, -80, -80, -3, -9, -71, 143, 71,
	47, -70, 102, 72, 72, 56, -97, -51, -52, 164,
	72, 169, -21, -22, -23, -9, -25, 156, -36, -9,
	-37, 110, 66, 110, 66, 66, 67, -8, -7, -6,
	134, -13, -12, -9, -30, -29, -19, 164, -30, -30,
	-9, -9, -56, -57, 80, -44, -43, -42, -45, -47,
	-52, -51, 135, 169, -68, -67, 39, 4, -136, -66,
	115, 43, 188, -9, 164, 165, 173, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -11, -10, 13, 82, 63, 160, -9,
	-9, -9, 95, 94, 91, 153, 15, 96, 134, 9,
	97, 14, -74, -76, 83, 98, -39, 4, -39, 4,
	-39, 4, 19, -97, -97, -97, -54, -53, 149, 177,
	-18, -17, -16, 10, 164, -97, -13, 39, 188, 45,
	-25, 156, -24, 44, -9, 170, 66, -122, 164, 66,
	-125, -52, -51, -125, 99, 172, 176, 177, 174, 176,
	-31, 176, 125, 63, 160, -31, -31, 55, 55, -58,
	-59, 157, -15, -14, -16, -56, -48, 69, 79, -50,
	192, 177, 177, -37, 176, -67, -136, -67, -9, 192,
	-18, -9, 174, 177, 7, 192, 173, 187, 90, 188,
	189, 190, 186, -11, -9, -9, -9, 95, 91, 153,
	15, 96, 134, 9, 97, 14, -77, -76, -75, -74,
	-9, -9, -39, -39, -39, -73, -72, -9, -140, 169,
	-140, 169, -54, -108, -111, 129, 146, -138, 110, -52,
	164, -16, 151, 170, -9, 170, -24, -9, -9, 136,
	-123, -122, 99, 99, 192, 177, 192, -125, -6, -9,
	-9, 45, -29, -9, -9, -9, 45, 45, -30, -30,
	-60, -61, 59, -63, 81, -9, 176, 179, -58, 74,
	93, -137, 145, 54, -139, 103, -18, -49, 164, -52,
	-52, 170, -66, -9, -18, 188, 174, 175, 174, -9,
	-11, 164, 165, 173, -9, -11, -11, -11, -11, -11,
	-11, 7, 176, -79, -78, 11, 37, -99, -98, 154,
	-100, 75, 110, -141, -99, -100, -58, -111, -58, -58,
	-110, -109, -49, -113, -112, -49, 76, -18, -45, 169,
	170, 136, -9, 99, -125, -125, -122, -52, -122, 169,
	-32, 156, -32, -69, 19, -15, -14, -9, -60, -46,
	-52, -51, 135, -46, -9, -54, 192, 173, -50, -50,
	-18, -18, 174, -9, 174, 177, -11, -72, -104, 176,
	-103, 120, 169, -101, 176, 176, 75, -9, -104, -101,
	-75, -58, -75, -75, 176, 179, 176, -115, -114, 55,
	-9, 99, -37, -9, -125, 169, -131, 118, -124, -122,
	45, -9, 45, -12, -50, 177, 177, -18, 164, 165,
	-9, -18, -18, 174, 175, 174, -9, -98, -102, -67,
	-136, -9, 170, 152, 152, 176, 170, -104, -75, -104,
	-104, -109, -9, -112, -106, -105, -19, -100, 75, 110,
	170, -128, -127, 151, -134, -132, -9, 137, 170, 176,
	-62, -63, -18, -52, -52, 174, -54, -54, 174, -9,
	176, -37, -9, 170, 152, -37, -104, -115, -32, 176,
	63, 160, -116, 156, 75, -17, -130, -129, 159, 155,
	60, 170, 176, -122, -127, -122, -64, -65, 61, -55,
	99, -50, -50, -9, -104, 170, -104, 45, -105, -107,
	-49, -107, -75, 87, 94, 99, -9, -126, 105, -132,
	-9, -138, -18, -18, 170, -104, 136, 87, -100, -133,
	157, 19, 76, -55, -55, 147, 35, 136, -116, -128,
	-132, -9, -9, -118, -108, -111, -119, -58, 70, -75,
	-130, -117, 156, -58, -111, -58, -121, 156, -120, -9,
	-104, 87, 94, -58, 94, -58, 136, 87, 87, 35,
	136, 136, -119, 70, 70, -121, -120, -120,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	218, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 269, 270, -2, 272, 273, 274, 0,
	276, 277, 278, 108, 0, 0, 0, 0, 0, 19,
	20, 21, 22, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 311, 312, 313, 0, 0, 327, 328, 0,
	26, 0, 0, 0, 0, 303, 309, 0, 0, 0,
	0, 0, 33, 34, 87, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 268, 9, 10, 11, 275, 23, 0, 0,
	0, 109, 0, 0, 0, 0, 76, 0, 50, -2,
	0, 309, 0, 315, 316, 0, 321, 0, 0, 340,
	341, 0, 0, 0, 0, 0, 0, 0, 304, 305,
	0, 0, 310, 100, 0, 332, 0, 161, 0, 0,
	0, 0, 93, 88, 0, 87, 56, -2, 58, 59,
	74, 0, 0, 0, 37, 38, 0, 0, 0, 45,
	43, 44, 47, 50, 219, 220, 0, 0, 226, 227,
	228, 229, 230, 231, 232, 233, -2, -2, -2, -2,
	-2, -2, -2, 0, 279, 0, 0, 0, 0, -2,
	-2, -2, 250, 0, 252, 254, 256, 258, 260, 262,
	264, 266, 121, 118, 0, 0, 27, 0, 29, 0,
	31, 0, 0, 128, 128, 76, 0, 77, 79, 0,
	127, 51, 52, 0, 54, 0, 0, 0, 0, 314,
	321, 0, 320, 0, 0, 339, 187, 0, 189, 0,
	0, 190, 0, 0, 0, 302, 0, 0, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	94, 0, 89, 90, 0, 93, 0, 82, 84, 50,
	0, 0, 0, 0, 0, 39, 0, 40, 50, 0,
	49, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, -2, -2, 251, 253, 255,
	257, 259, 261, 263, 265, 267, 24, 122, 25, 119,
	120, 123, 28, 30, 32, 110, 111, 114, 0, 0,
	0, 0, 93, 93, 93, 0, 0, 0, 80, 50,
	73, 53, 0, 323, 0, 325, 317, 0, 322, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 306, 307,
	101, 329, 333, 336, 334, 335, 330, 331, 163, 163,
	0, 97, 0, 99, 0, 95, 0, 0, 96, 0,
	0, 0, 63, 64, 83, 85, 76, 75, 214, 74,
	74, 50, 46, 50, 41, 48, 221, 222, 224, 0,
	242, 280, 281, 0, 0, 287, 288, 289, 290, 291,
	292, 0, 0, 113, 115, 116, 117, 136, 133, 0,
	142, 131, 0, 0, 136, 142, 118, 93, 118, 118,
	150, 151, 0, 165, 166, 154, 0, 126, 0, 0,
	324, 0, 318, 0, 0, 206, 207, 191, 209, 0,
	0, 0, 0, 35, 0, 104, 91, 92, 36, 60,
	74, 0, 0, 61, 50, 65, 0, 0, 50, 50,
	68, 42, 225, 0, 284, 0, 243, 112, 124, 0,
	137, 0, 0, 0, 0, 0, 132, 141, 144, 0,
	136, 118, 136, 136, 0, 0, 0, 168, 155, 0,
	78, 0, 0, 319, 194, 0, 208, 0, 0, 212,
	337, 164, 338, 102, 50, 0, 0, 62, 215, 216,
	0, 76, 76, 282, 283, 285, 0, 134, 138, 139,
	0, 0, 0, 0, 0, 0, 0, 146, 136, 148,
	149, 152, 154, 167, 163, 157, 0, 171, 131, 0,
	0, 198, 195, 0, 0, 201, 203, 0, 0, 0,
	105, 103, 0, 74, 74, 217, 66, 67, 286, 140,
	0, 136, 143, 129, 0, 136, 147, 153, 0, 0,
	0, 0, 118, 0, 132, 0, 185, 199, 0, 196,
	197, 192, 0, 210, 211, 213, 98, 106, 0, 69,
	79, 50, 50, 0, 125, 130, 145, 156, 158, 159,
	162, 160, 136, 0, 0, 0, 200, 204, 0, 202,
	107, 0, 0, 0, 135, 169, 0, 0, 171, 194,
	0, 0, 0, 70, 71, 0, 93, 0, 118, 198,
	205, 193, 86, 175, 93, 93, 178, 183, 0, 136,
	186, 172, 0, 180, 93, 182, 173, 0, 174, 93,
	170, 0, 0, 181, 0, 184, 0, 0, 0, 93,
	0, 0, 178, 0, 0, 176, 177, 179,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:362
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:367
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:388
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:395
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:402
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:409
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		yyVAL.statement = yyS[yypt-0].statement
	case 23:
		//line n1ql.y:442
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:446
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:450
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 26:
		//line n1ql.y:456
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 27:
		//line n1ql.y:461
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:466
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:471
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:476
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:481
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		//line n1ql.y:486
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 35:
		//line n1ql.y:499
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 36:
		//line n1ql.y:506
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 37:
		//line n1ql.y:521
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 38:
		//line n1ql.y:528
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:533
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:538
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 41:
		//line n1ql.y:543
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 42:
		//line n1ql.y:548
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 45:
		//line n1ql.y:561
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 46:
		//line n1ql.y:566
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 47:
		//line n1ql.y:573
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 48:
		//line n1ql.y:578
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 49:
		//line n1ql.y:583
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 50:
		//line n1ql.y:590
		{
			yyVAL.s = ""
		}
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		yyVAL.s = yyS[yypt-0].s
	case 53:
		//line n1ql.y:601
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 54:
		yyVAL.s = yyS[yypt-0].s
	case 55:
		//line n1ql.y:619
		{
			yyVAL.fromTerm = nil
		}
	case 56:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 57:
		//line n1ql.y:628
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 58:
		//line n1ql.y:635
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 59:
		//line n1ql.y:640
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 60:
		//line n1ql.y:645
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 61:
		//line n1ql.y:650
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 62:
		//line n1ql.y:655
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 65:
		//line n1ql.y:668
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:673
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:678
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 68:
		//line n1ql.y:685
		{
			if yyS[yypt-0].s == "" {
				yylex.Error("Subquery in FROM clause must have an alias.")
			} else {
				yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
			}
		}
	case 69:
		//line n1ql.y:696
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 70:
		//line n1ql.y:701
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 71:
		//line n1ql.y:706
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 72:
		yyVAL.s = yyS[yypt-0].s
	case 73:
		yyVAL.s = yyS[yypt-0].s
	case 74:
		//line n1ql.y:721
		{
			yyVAL.path = nil
		}
	case 75:
		//line n1ql.y:726
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 76:
		//line n1ql.y:733
		{
			yyVAL.expr = nil
		}
	case 77:
		yyVAL.expr = yyS[yypt-0].expr
	case 78:
		//line n1ql.y:742
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 79:
		//line n1ql.y:749
		{
		}
	case 81:
		//line n1ql.y:757
		{
			yyVAL.b = false
		}
	case 82:
		//line n1ql.y:762
		{
			yyVAL.b = false
		}
	case 83:
		//line n1ql.y:767
		{
			yyVAL.b = true
		}
	case 86:
		//line n1ql.y:780
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 87:
		//line n1ql.y:794
		{
			yyVAL.bindings = nil
		}
	case 88:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 89:
		//line n1ql.y:803
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 90:
		//line n1ql.y:810
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 91:
		//line n1ql.y:815
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 92:
		//line n1ql.y:822
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 93:
		//line n1ql.y:836
		{
			yyVAL.expr = nil
		}
	case 94:
		yyVAL.expr = yyS[yypt-0].expr
	case 95:
		//line n1ql.y:845
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 96:
		//line n1ql.y:859
		{
			yyVAL.group = nil
		}
	case 97:
		yyVAL.group = yyS[yypt-0].group
	case 98:
		//line n1ql.y:868
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 99:
		//line n1ql.y:873
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 100:
		//line n1ql.y:880
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 101:
		//line n1ql.y:885
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 102:
		//line n1ql.y:892
		{
			yyVAL.bindings = nil
		}
	case 103:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 104:
		//line n1ql.y:901
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 105:
		//line n1ql.y:908
		{
			yyVAL.expr = nil
		}
	case 106:
		yyVAL.expr = yyS[yypt-0].expr
	case 107:
		//line n1ql.y:917
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 108:
		//line n1ql.y:931
		{
			yyVAL.order = nil
		}
	case 109:
		yyVAL.order = yyS[yypt-0].order
	case 110:
		//line n1ql.y:940
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 111:
		//line n1ql.y:947
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 112:
		//line n1ql.y:952
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 113:
		//line n1ql.y:959
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 114:
		//line n1ql.y:966
		{
			yyVAL.b = false
		}
	case 115:
		yyVAL.b = yyS[yypt-0].b
	case 116:
		//line n1ql.y:975
		{
			yyVAL.b = false
		}
	case 117:
		//line n1ql.y:980
		{
			yyVAL.b = true
		}
	case 118:
		//line n1ql.y:994
		{
			yyVAL.expr = nil
		}
	case 119:
		yyVAL.expr = yyS[yypt-0].expr
	case 120:
		//line n1ql.y:1003
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		//line n1ql.y:1017
		{
			yyVAL.expr = nil
		}
	case 122:
		yyVAL.expr = yyS[yypt-0].expr
	case 123:
		//line n1ql.y:1026
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 124:
		//line n1ql.y:1040
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 125:
		//line n1ql.y:1045
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 126:
		//line n1ql.y:1052
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 127:
		//line n1ql.y:1057
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 133:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 134:
		//line n1ql.y:1080
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 135:
		//line n1ql.y:1087
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 136:
		//line n1ql.y:1094
		{
			yyVAL.projection = nil
		}
	case 137:
		yyVAL.projection = yyS[yypt-0].projection
	case 138:
		//line n1ql.y:1103
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 139:
		//line n1ql.y:1110
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 140:
		//line n1ql.y:1115
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 141:
		//line n1ql.y:1122
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 142:
		//line n1ql.y:1129
		{
			yyVAL.expr = nil
		}
	case 143:
		//line n1ql.y:1134
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 144:
		//line n1ql.y:1148
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1153
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1167
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1181
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 148:
		//line n1ql.y:1186
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 149:
		//line n1ql.y:1191
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 150:
		//line n1ql.y:1198
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 151:
		//line n1ql.y:1205
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 152:
		//line n1ql.y:1210
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 153:
		//line n1ql.y:1217
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 154:
		//line n1ql.y:1224
		{
			yyVAL.updateFor = nil
		}
	case 155:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 156:
		//line n1ql.y:1233
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 157:
		//line n1ql.y:1240
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 158:
		//line n1ql.y:1245
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 159:
		//line n1ql.y:1252
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 160:
		//line n1ql.y:1257
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 161:
		yyVAL.s = yyS[yypt-0].s
	case 162:
		//line n1ql.y:1268
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 163:
		//line n1ql.y:1275
		{
			yyVAL.expr = nil
		}
	case 164:
		//line n1ql.y:1280
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 165:
		//line n1ql.y:1287
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 166:
		//line n1ql.y:1294
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 167:
		//line n1ql.y:1299
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 168:
		//line n1ql.y:1306
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 169:
		//line n1ql.y:1320
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 170:
		//line n1ql.y:1326
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 171:
		//line n1ql.y:1334
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 172:
		//line n1ql.y:1339
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 173:
		//line n1ql.y:1344
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1349
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 175:
		//line n1ql.y:1356
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 176:
		//line n1ql.y:1361
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 177:
		//line n1ql.y:1366
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 178:
		//line n1ql.y:1373
		{
			yyVAL.mergeInsert = nil
		}
	case 179:
		//line n1ql.y:1378
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 180:
		//line n1ql.y:1385
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1390
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1395
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 183:
		//line n1ql.y:1402
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 184:
		//line n1ql.y:1409
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 185:
		//line n1ql.y:1423
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-4].s, yyS[yypt-2].keyspaceRef, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 186:
		//line n1ql.y:1428
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-9].s, yyS[yypt-7].keyspaceRef, yyS[yypt-5].exprs, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 187:
		//line n1ql.y:1435
		{
			yyVAL.s = ""
		}
	case 188:
		yyVAL.s = yyS[yypt-0].s
	case 189:
		yyVAL.s = yyS[yypt-0].s
	case 190:
		//line n1ql.y:1448
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 191:
		//line n1ql.y:1453
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 192:
		//line n1ql.y:1460
		{
			yyVAL.expr = nil
		}
	case 193:
		//line n1ql.y:1465
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 194:
		//line n1ql.y:1472
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 195:
		yyVAL.indexType = yyS[yypt-0].indexType
	case 196:
		//line n1ql.y:1481
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 197:
		//line n1ql.y:1486
		{
			yyVAL.indexType = datastore.GSI
		}
	case 198:
		//line n1ql.y:1493
		{
			yyVAL.val = nil
		}
	case 199:
		yyVAL.val = yyS[yypt-0].val
	case 200:
		//line n1ql.y:1502
		{
			yyVAL.val = yyS[yypt-0].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 201:
		//line n1ql.y:1512
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 202:
		//line n1ql.y:1517
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 203:
		//line n1ql.y:1524
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 204:
		//line n1ql.y:1535
		{
			yyVAL.expr = nil
		}
	case 205:
		//line n1ql.y:1540
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 206:
		//line n1ql.y:1554
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 207:
		//line n1ql.y:1559
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 208:
		//line n1ql.y:1572
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 209:
		//line n1ql.y:1578
		{
			yyVAL.s = ""
		}
	case 210:
		//line n1ql.y:1583
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 211:
		//line n1ql.y:1596
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyS[yypt-4].keyspaceRef, yyS[yypt-0].indexType, yyS[yypt-2].ss...)
		}
	case 212:
		//line n1ql.y:1603
		{
			yyVAL.ss = []string{yyS[yypt-0].s}
		}
	case 213:
		//line n1ql.y:1608
		{
			yyVAL.ss = append(yyS[yypt-2].ss, yyS[yypt-0].s)
		}
	case 214:
		//line n1ql.y:1622
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 215:
		//line n1ql.y:1627
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 216:
		//line n1ql.y:1632
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 217:
		//line n1ql.y:1639
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 218:
		yyVAL.expr = yyS[yypt-0].expr
	case 219:
		//line n1ql.y:1656
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 220:
		//line n1ql.y:1661
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 221:
		//line n1ql.y:1668
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 222:
		//line n1ql.y:1673
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 223:
		//line n1ql.y:1680
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 224:
		//line n1ql.y:1685
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 225:
		//line n1ql.y:1690
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 226:
		//line n1ql.y:1696
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1701
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1706
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1711
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1716
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1722
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1728
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1733
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1738
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1744
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1749
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1754
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1759
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1764
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 240:
		//line n1ql.y:1769
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 241:
		//line n1ql.y:1774
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 242:
		//line n1ql.y:1779
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 243:
		//line n1ql.y:1784
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 244:
		//line n1ql.y:1789
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 245:
		//line n1ql.y:1794
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 246:
		//line n1ql.y:1799
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 247:
		//line n1ql.y:1804
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 248:
		//line n1ql.y:1809
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 249:
		//line n1ql.y:1814
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 250:
		//line n1ql.y:1819
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 251:
		//line n1ql.y:1824
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 252:
		//line n1ql.y:1829
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 253:
		//line n1ql.y:1834
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 254:
		//line n1ql.y:1839
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 255:
		//line n1ql.y:1844
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 256:
		//line n1ql.y:1849
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 257:
		//line n1ql.y:1854
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 258:
		//line n1ql.y:1859
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 259:
		//line n1ql.y:1864
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 260:
		//line n1ql.y:1869
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 261:
		//line n1ql.y:1874
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 262:
		//line n1ql.y:1879
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 263:
		//line n1ql.y:1884
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 264:
		//line n1ql.y:1889
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 265:
		//line n1ql.y:1894
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 266:
		//line n1ql.y:1899
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 267:
		//line n1ql.y:1904
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 268:
		//line n1ql.y:1909
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 269:
		yyVAL.expr = yyS[yypt-0].expr
	case 270:
		yyVAL.expr = yyS[yypt-0].expr
	case 271:
		//line n1ql.y:1923
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 272:
		//line n1ql.y:1929
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 273:
		yyVAL.expr = yyS[yypt-0].expr
	case 274:
		yyVAL.expr = yyS[yypt-0].expr
	case 275:
		//line n1ql.y:1941
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 276:
		yyVAL.expr = yyS[yypt-0].expr
	case 277:
		yyVAL.expr = yyS[yypt-0].expr
	case 278:
		yyVAL.expr = yyS[yypt-0].expr
	case 279:
		yyVAL.expr = yyS[yypt-0].expr
	case 280:
		//line n1ql.y:1960
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 281:
		//line n1ql.y:1965
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 282:
		//line n1ql.y:1972
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 283:
		//line n1ql.y:1977
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 284:
		//line n1ql.y:1984
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 285:
		//line n1ql.y:1989
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 286:
		//line n1ql.y:1994
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 287:
		//line n1ql.y:2000
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 288:
		//line n1ql.y:2005
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 289:
		//line n1ql.y:2010
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 290:
		//line n1ql.y:2015
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 291:
		//line n1ql.y:2020
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 292:
		//line n1ql.y:2026
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 293:
		//line n1ql.y:2040
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 294:
		//line n1ql.y:2045
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 295:
		//line n1ql.y:2050
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 296:
		//line n1ql.y:2055
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 297:
		//line n1ql.y:2060
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 298:
		//line n1ql.y:2065
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 299:
		//line n1ql.y:2070
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 300:
		yyVAL.expr = yyS[yypt-0].expr
	case 301:
		yyVAL.expr = yyS[yypt-0].expr
	case 302:
		//line n1ql.y:2090
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 303:
		//line n1ql.y:2097
		{
			yyVAL.bindings = nil
		}
	case 304:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 305:
		//line n1ql.y:2106
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 306:
		//line n1ql.y:2111
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 307:
		//line n1ql.y:2118
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 308:
		//line n1ql.y:2125
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 309:
		//line n1ql.y:2132
		{
			yyVAL.exprs = nil
		}
	case 310:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 311:
		//line n1ql.y:2148
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 312:
		//line n1ql.y:2153
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 313:
		//line n1ql.y:2158
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 314:
		//line n1ql.y:2173
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 315:
		yyVAL.expr = yyS[yypt-0].expr
	case 316:
		yyVAL.expr = yyS[yypt-0].expr
	case 317:
		//line n1ql.y:2186
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 318:
		//line n1ql.y:2193
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 319:
		//line n1ql.y:2198
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 320:
		//line n1ql.y:2206
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 321:
		//line n1ql.y:2213
		{
			yyVAL.expr = nil
		}
	case 322:
		//line n1ql.y:2218
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 323:
		//line n1ql.y:2232
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 324:
		//line n1ql.y:2251
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 325:
		//line n1ql.y:2266
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 326:
		yyVAL.s = yyS[yypt-0].s
	case 327:
		yyVAL.expr = yyS[yypt-0].expr
	case 328:
		yyVAL.expr = yyS[yypt-0].expr
	case 329:
		//line n1ql.y:2304
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 330:
		//line n1ql.y:2309
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 331:
		//line n1ql.y:2314
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 332:
		//line n1ql.y:2321
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 333:
		//line n1ql.y:2326
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 334:
		//line n1ql.y:2333
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 335:
		//line n1ql.y:2338
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 336:
		//line n1ql.y:2345
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 337:
		//line n1ql.y:2352
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 338:
		//line n1ql.y:2357
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 339:
		//line n1ql.y:2371
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 340:
		yyVAL.expr = yyS[yypt-0].expr
	case 341:
		//line n1ql.y:2380
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
