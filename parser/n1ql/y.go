//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbase/clog"
import "github.com/couchbase/query/algebra"
import "github.com/couchbase/query/datastore"
import "github.com/couchbase/query/expression"
import "github.com/couchbase/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	ss        []string
	expr      expression.Expression
	exprs     expression.Expressions
	subquery  *algebra.Subquery
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	selectTerm   *algebra.SelectTerm
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	use          *algebra.Use
	indexRefs    algebra.IndexRefs
	indexRef     *algebra.IndexRef
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
	val         value.Value
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BUILD = 57360
const BY = 57361
const CALL = 57362
const CASE = 57363
const CAST = 57364
const CLUSTER = 57365
const COLLATE = 57366
const COLLECTION = 57367
const COMMIT = 57368
const CONNECT = 57369
const CONTINUE = 57370
const CREATE = 57371
const DATABASE = 57372
const DATASET = 57373
const DATASTORE = 57374
const DECLARE = 57375
const DECREMENT = 57376
const DELETE = 57377
const DERIVED = 57378
const DESC = 57379
const DESCRIBE = 57380
const DISTINCT = 57381
const DO = 57382
const DROP = 57383
const EACH = 57384
const ELEMENT = 57385
const ELSE = 57386
const END = 57387
const EVERY = 57388
const EXCEPT = 57389
const EXCLUDE = 57390
const EXECUTE = 57391
const EXISTS = 57392
const EXPLAIN = 57393
const FALSE = 57394
const FIRST = 57395
const FLATTEN = 57396
const FOR = 57397
const FORCE = 57398
const FROM = 57399
const FUNCTION = 57400
const GRANT = 57401
const GROUP = 57402
const GSI = 57403
const HAVING = 57404
const IF = 57405
const IGNORE = 57406
const IN = 57407
const INCLUDE = 57408
const INCREMENT = 57409
const INDEX = 57410
const INLINE = 57411
const INNER = 57412
const INSERT = 57413
const INTERSECT = 57414
const INTO = 57415
const IS = 57416
const JOIN = 57417
const KEY = 57418
const KEYS = 57419
const KEYSPACE = 57420
const LAST = 57421
const LEFT = 57422
const LET = 57423
const LETTING = 57424
const LIKE = 57425
const LIMIT = 57426
const LSM = 57427
const MAP = 57428
const MAPPING = 57429
const MATCHED = 57430
const MATERIALIZED = 57431
const MERGE = 57432
const MINUS = 57433
const MISSING = 57434
const NAMESPACE = 57435
const NEST = 57436
const NOT = 57437
const NULL = 57438
const NUMBER = 57439
const OBJECT = 57440
const OFFSET = 57441
const ON = 57442
const OPTION = 57443
const OR = 57444
const ORDER = 57445
const OUTER = 57446
const OVER = 57447
const PARTITION = 57448
const PASSWORD = 57449
const PATH = 57450
const POOL = 57451
const PREPARE = 57452
const PRIMARY = 57453
const PRIVATE = 57454
const PRIVILEGE = 57455
const PROCEDURE = 57456
const PUBLIC = 57457
const RAW = 57458
const REALM = 57459
const REDUCE = 57460
const RENAME = 57461
const RETURN = 57462
const RETURNING = 57463
const REVOKE = 57464
const RIGHT = 57465
const ROLE = 57466
const ROLLBACK = 57467
const SATISFIES = 57468
const SCHEMA = 57469
const SELECT = 57470
const SELF = 57471
const SET = 57472
const SHOW = 57473
const SOME = 57474
const START = 57475
const STATISTICS = 57476
const STRING = 57477
const SYSTEM = 57478
const THEN = 57479
const TO = 57480
const TRANSACTION = 57481
const TRIGGER = 57482
const TRUE = 57483
const TRUNCATE = 57484
const UNDER = 57485
const UNION = 57486
const UNIQUE = 57487
const UNNEST = 57488
const UNSET = 57489
const UPDATE = 57490
const UPSERT = 57491
const USE = 57492
const USER = 57493
const USING = 57494
const VALUE = 57495
const VALUED = 57496
const VALUES = 57497
const VIEW = 57498
const WHEN = 57499
const WHERE = 57500
const WHILE = 57501
const WITH = 57502
const WITHIN = 57503
const WORK = 57504
const XOR = 57505
const INT = 57506
const IDENTIFIER = 57507
const IDENTIFIER_ICASE = 57508
const NAMED_PARAM = 57509
const POSITIONAL_PARAM = 57510
const NEXT_PARAM = 57511
const LPAREN = 57512
const RPAREN = 57513
const LBRACE = 57514
const RBRACE = 57515
const LBRACKET = 57516
const RBRACKET = 57517
const RBRACKET_ICASE = 57518
const COMMA = 57519
const COLON = 57520
const INTERESECT = 57521
const EQ = 57522
const DEQ = 57523
const NE = 57524
const LT = 57525
const GT = 57526
const LE = 57527
const GE = 57528
const CONCAT = 57529
const PLUS = 57530
const STAR = 57531
const DIV = 57532
const MOD = 57533
const UMINUS = 57534
const DOT = 57535

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FORCE",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IGNORE",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	170, 340,
	-2, 285,
	-1, 123,
	178, 81,
	-2, 82,
	-1, 163,
	54, 95,
	75, 95,
	94, 95,
	146, 95,
	-2, 66,
	-1, 193,
	180, 0,
	181, 0,
	182, 0,
	-2, 249,
	-1, 194,
	180, 0,
	181, 0,
	182, 0,
	-2, 250,
	-1, 195,
	180, 0,
	181, 0,
	182, 0,
	-2, 251,
	-1, 196,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 252,
	-1, 197,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 253,
	-1, 198,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 254,
	-1, 199,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 255,
	-1, 206,
	83, 0,
	-2, 258,
	-1, 207,
	65, 0,
	161, 0,
	-2, 260,
	-1, 208,
	65, 0,
	161, 0,
	-2, 262,
	-1, 321,
	83, 0,
	-2, 259,
	-1, 322,
	65, 0,
	161, 0,
	-2, 261,
	-1, 323,
	65, 0,
	161, 0,
	-2, 263,
}

const yyNprod = 356
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 3225

var yyAct = []int{

	180, 3, 690, 678, 500, 688, 679, 619, 351, 335,
	350, 531, 102, 104, 584, 630, 109, 354, 640, 525,
	441, 615, 240, 453, 296, 241, 519, 152, 573, 524,
	110, 472, 235, 394, 455, 452, 171, 439, 148, 174,
	505, 343, 481, 391, 225, 61, 267, 76, 438, 290,
	242, 164, 175, 289, 16, 200, 151, 129, 61, 61,
	132, 252, 145, 345, 220, 150, 297, 377, 149, 375,
	521, 398, 156, 157, 395, 544, 543, 376, 299, 489,
	101, 184, 185, 186, 187, 188, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 82, 488, 206,
	207, 208, 313, 313, 61, 298, 622, 503, 80, 268,
	489, 80, 623, 473, 133, 279, 517, 316, 317, 318,
	473, 312, 312, 83, 84, 85, 149, 79, 590, 488,
	79, 274, 254, 611, 591, 154, 155, 181, 182, 575,
	278, 275, 239, 269, 301, 576, 183, 122, 563, 168,
	397, 518, 61, 516, 506, 507, 103, 60, 264, 433,
	432, 416, 133, 501, 276, 286, 278, 273, 272, 276,
	106, 106, 77, 422, 423, 305, 181, 182, 123, 530,
	80, 121, 424, 461, 308, 183, 262, 166, 270, 489,
	636, 168, 605, 86, 81, 83, 84, 85, 260, 79,
	258, 581, 223, 307, 321, 322, 323, 564, 488, 302,
	304, 291, 303, 560, 61, 412, 60, 363, 361, 256,
	123, 167, 337, 338, 300, 169, 504, 122, 122, 122,
	471, 458, 344, 348, 122, 346, 125, 546, 547, 77,
	265, 409, 153, 78, 315, 484, 243, 358, 362, 123,
	244, 77, 365, 77, 366, 621, 158, 288, 320, 662,
	689, 121, 121, 121, 106, 612, 280, 349, 121, 226,
	226, 226, 440, 253, 123, 380, 230, 381, 684, 353,
	384, 385, 386, 372, 334, 107, 616, 587, 606, 396,
	288, 226, 226, 226, 359, 562, 277, 347, 561, 399,
	228, 533, 224, 360, 414, 238, 352, 114, 202, 136,
	78, 420, 364, 624, 425, 668, 227, 229, 378, 407,
	703, 408, 78, 353, 78, 702, 106, 313, 415, 77,
	698, 78, 113, 146, 135, 383, 379, 257, 259, 261,
	319, 314, 316, 317, 318, 669, 312, 658, 130, 357,
	389, 390, 107, 77, 413, 77, 447, 449, 450, 448,
	204, 613, 281, 116, 107, 503, 107, 421, 464, 446,
	426, 427, 428, 429, 430, 431, 589, 456, 203, 579,
	459, 226, 586, 120, 10, 226, 251, 226, 442, 356,
	649, 406, 404, 631, 646, 468, 445, 470, 147, 479,
	78, 244, 526, 486, 112, 465, 134, 374, 410, 411,
	311, 355, 460, 400, 580, 226, 336, 226, 292, 226,
	466, 467, 474, 443, 78, 495, 78, 339, 667, 140,
	138, 340, 401, 341, 344, 490, 491, 493, 492, 475,
	487, 373, 107, 480, 485, 509, 291, 478, 291, 477,
	510, 282, 283, 271, 356, 513, 205, 512, 522, 514,
	515, 368, 222, 369, 528, 370, 107, 696, 107, 693,
	166, 700, 139, 137, 539, 499, 694, 149, 250, 699,
	534, 201, 535, 659, 403, 221, 469, 511, 498, 221,
	548, 537, 644, 160, 315, 664, 457, 75, 554, 645,
	222, 232, 233, 234, 167, 559, 61, 542, 245, 545,
	482, 482, 529, 549, 550, 541, 527, 565, 570, 567,
	568, 617, 294, 566, 246, 508, 393, 124, 219, 118,
	117, 585, 295, 706, 705, 680, 266, 577, 263, 555,
	557, 582, 456, 558, 483, 483, 142, 578, 395, 574,
	141, 629, 569, 571, 77, 119, 638, 540, 538, 601,
	315, 388, 604, 387, 382, 594, 249, 701, 663, 476,
	2, 608, 231, 444, 162, 593, 405, 313, 402, 1,
	583, 661, 598, 599, 105, 108, 588, 201, 620, 532,
	319, 314, 316, 317, 318, 648, 312, 609, 536, 371,
	675, 683, 625, 634, 610, 61, 614, 618, 635, 61,
	520, 626, 637, 454, 451, 603, 572, 502, 106, 607,
	632, 633, 647, 556, 585, 643, 42, 41, 40, 39,
	652, 22, 642, 21, 20, 315, 641, 641, 650, 574,
	639, 19, 82, 313, 651, 18, 17, 9, 657, 653,
	8, 7, 6, 595, 596, 654, 655, 314, 316, 317,
	318, 5, 312, 585, 673, 674, 4, 660, 434, 435,
	665, 666, 333, 671, 342, 111, 677, 672, 676, 682,
	681, 691, 670, 685, 687, 686, 692, 115, 170, 216,
	628, 627, 592, 695, 218, 213, 201, 392, 697, 201,
	201, 201, 201, 201, 201, 704, 691, 691, 708, 709,
	707, 173, 287, 159, 523, 68, 71, 106, 313, 237,
	236, 106, 293, 165, 87, 80, 161, 163, 56, 73,
	96, 319, 314, 316, 317, 318, 74, 312, 33, 81,
	83, 84, 85, 330, 79, 32, 172, 55, 332, 327,
	177, 28, 58, 70, 57, 31, 128, 12, 127, 45,
	72, 126, 87, 30, 143, 243, 144, 27, 96, 51,
	50, 24, 211, 23, 0, 210, 209, 214, 217, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 29, 44,
	98, 0, 11, 43, 47, 0, 0, 0, 82, 0,
	0, 0, 97, 0, 0, 215, 0, 201, 0, 88,
	99, 0, 0, 176, 0, 0, 325, 0, 0, 101,
	324, 328, 331, 0, 212, 0, 26, 0, 98, 69,
	0, 0, 49, 0, 0, 0, 82, 0, 46, 0,
	97, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	178, 0, 0, 0, 0, 0, 0, 0, 0, 329,
	0, 48, 25, 0, 52, 53, 54, 59, 100, 66,
	0, 67, 0, 0, 0, 0, 0, 0, 326, 87,
	0, 80, 551, 552, 0, 96, 179, 89, 90, 91,
	92, 93, 94, 95, 86, 81, 83, 84, 85, 0,
	79, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	244, 0, 87, 0, 0, 0, 436, 0, 96, 80,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 93,
	94, 95, 86, 81, 83, 84, 85, 99, 79, 0,
	0, 0, 437, 87, 0, 0, 101, 0, 0, 96,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 97, 0, 0,
	99, 0, 0, 0, 88, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	97, 99, 0, 0, 0, 0, 0, 88, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 97, 0, 100, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 80, 496, 0, 0,
	497, 0, 89, 90, 91, 92, 93, 94, 95, 86,
	81, 83, 84, 85, 0, 79, 100, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 96, 0, 0, 80,
	0, 0, 0, 0, 0, 89, 90, 91, 92, 93,
	94, 95, 86, 81, 83, 84, 85, 100, 79, 0,
	0, 87, 0, 0, 243, 0, 0, 96, 0, 0,
	80, 417, 418, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 95, 86, 81, 83, 84, 85, 99, 79,
	0, 0, 0, 0, 0, 87, 0, 101, 0, 0,
	0, 96, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 97, 99,
	0, 0, 0, 0, 0, 88, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 97,
	0, 0, 0, 99, 0, 0, 88, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 97, 100, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 80, 309, 0,
	0, 310, 0, 89, 90, 91, 92, 93, 94, 95,
	86, 81, 83, 84, 85, 100, 79, 0, 0, 244,
	0, 0, 0, 0, 87, 0, 0, 0, 80, 0,
	96, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	95, 86, 81, 83, 84, 85, 288, 306, 0, 100,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 96, 80, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 95, 86, 81, 83, 84, 85,
	0, 79, 99, 0, 0, 0, 87, 0, 0, 0,
	0, 101, 96, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 521, 0, 0, 0, 0, 82, 0,
	0, 0, 97, 99, 0, 0, 0, 0, 0, 88,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 97, 99, 0, 0, 0, 0, 0,
	88, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 97, 0, 0, 0, 100, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 80, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 93, 94, 95, 86, 81, 83, 84, 85, 100,
	79, 0, 0, 87, 0, 0, 0, 0, 0, 96,
	0, 0, 80, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 95, 86, 81, 83, 84, 85,
	100, 79, 0, 0, 87, 0, 0, 0, 0, 0,
	96, 0, 0, 80, 0, 0, 602, 0, 0, 89,
	90, 91, 92, 93, 94, 95, 86, 81, 83, 84,
	85, 99, 79, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 97, 99, 0, 0, 0, 0, 0, 88, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 68, 71, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 97, 0, 56, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 177, 0, 0, 70,
	0, 0, 0, 12, 0, 45, 72, 100, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 96,
	80, 600, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 95, 86, 81, 83, 84, 85, 100, 79,
	0, 0, 0, 0, 29, 44, 0, 0, 11, 43,
	47, 80, 597, 0, 0, 0, 0, 89, 90, 91,
	92, 93, 94, 95, 86, 81, 83, 84, 85, 176,
	79, 99, 0, 87, 0, 0, 0, 0, 0, 96,
	101, 0, 26, 0, 0, 69, 0, 0, 49, 98,
	0, 0, 0, 0, 46, 0, 0, 82, 0, 0,
	0, 97, 0, 0, 0, 0, 178, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 0, 66, 0, 67, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 179, 0, 87, 0, 0, 0, 0, 98,
	96, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 100, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 494, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 95, 86, 81, 83, 84, 85, 0, 79,
	0, 0, 99, 463, 87, 0, 0, 0, 0, 0,
	96, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 100, 82, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 88,
	80, 0, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 95, 86, 81, 83, 84, 85, 0, 79,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 87, 0, 0, 0, 0, 0, 96, 82, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 100, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 462, 0,
	0, 80, 0, 0, 0, 0, 0, 89, 90, 91,
	92, 93, 94, 95, 86, 81, 83, 84, 85, 285,
	79, 0, 0, 0, 367, 0, 0, 0, 0, 99,
	0, 87, 0, 0, 0, 0, 0, 96, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 100, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 97,
	0, 80, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 95, 86, 81, 83, 84, 85, 284,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	87, 0, 0, 0, 0, 0, 96, 98, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 100, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	95, 86, 81, 83, 84, 85, 0, 79, 99, 0,
	87, 0, 0, 0, 0, 0, 96, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 82, 100, 0, 0, 97, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 80, 0,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	95, 86, 81, 83, 84, 85, 0, 79, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 87,
	0, 0, 0, 0, 0, 96, 98, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 100, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 0, 0, 80, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 93, 94, 95,
	86, 81, 83, 84, 85, 0, 79, 99, 0, 87,
	0, 0, 0, 0, 0, 96, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	131, 0, 0, 82, 100, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 80, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 93, 94, 95,
	86, 81, 83, 84, 85, 0, 79, 99, 0, 0,
	0, 0, 0, 68, 71, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 56, 0, 0, 0,
	96, 0, 0, 82, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 100, 247, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 12, 80, 45, 72, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 95, 86,
	81, 83, 84, 85, 0, 79, 68, 71, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 56,
	0, 101, 0, 0, 0, 0, 29, 44, 0, 0,
	11, 43, 47, 100, 0, 0, 96, 0, 82, 0,
	0, 0, 0, 0, 70, 0, 80, 0, 12, 0,
	45, 72, 89, 90, 91, 92, 93, 94, 95, 86,
	81, 83, 84, 85, 26, 79, 0, 69, 0, 0,
	49, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 29,
	44, 0, 0, 11, 43, 47, 0, 101, 0, 48,
	25, 0, 52, 53, 54, 59, 98, 66, 100, 67,
	0, 0, 0, 0, 82, 0, 0, 0, 97, 0,
	0, 80, 0, 0, 248, 0, 0, 26, 0, 0,
	69, 0, 0, 49, 86, 81, 83, 84, 85, 46,
	79, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 25, 0, 52, 53, 54, 59, 0,
	66, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 179, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 89, 90, 91, 92, 93, 94, 95,
	86, 81, 83, 84, 85, 64, 79, 0, 68, 71,
	0, 0, 0, 0, 0, 96, 0, 0, 65, 0,
	0, 56, 0, 0, 0, 0, 0, 0, 0, 62,
	99, 0, 0, 0, 0, 36, 0, 0, 0, 101,
	0, 63, 0, 0, 0, 0, 70, 0, 98, 15,
	12, 13, 45, 72, 0, 0, 82, 77, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 34, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	38, 29, 44, 82, 0, 11, 43, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 78, 26,
	0, 0, 69, 68, 71, 49, 0, 0, 0, 80,
	0, 46, 0, 0, 0, 0, 56, 0, 37, 35,
	0, 0, 86, 81, 83, 84, 85, 0, 79, 0,
	0, 0, 0, 100, 48, 25, 0, 52, 53, 54,
	59, 70, 66, 0, 67, 12, 80, 45, 72, 0,
	0, 68, 71, 0, 0, 92, 93, 94, 95, 86,
	81, 83, 84, 85, 56, 79, 68, 71, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 29, 44, 0, 70,
	11, 43, 47, 12, 0, 45, 72, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 12, 0,
	45, 72, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 69, 0, 0,
	49, 0, 0, 0, 29, 44, 46, 0, 11, 43,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 0, 0, 0, 48,
	25, 0, 52, 53, 54, 59, 0, 66, 0, 67,
	553, 0, 26, 0, 0, 69, 0, 0, 49, 0,
	0, 0, 0, 0, 46, 0, 78, 26, 0, 0,
	69, 68, 71, 49, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 56, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 0, 66, 0, 67, 419, 0,
	0, 0, 48, 25, 0, 52, 53, 54, 59, 70,
	66, 0, 67, 12, 0, 45, 72, 0, 0, 68,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 71, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 29, 44, 0, 70, 11, 43,
	47, 12, 0, 45, 72, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 45, 72, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 69, 0, 0, 49, 0,
	0, 0, 29, 44, 46, 0, 11, 43, 47, 0,
	0, 0, 0, 29, 44, 0, 0, 0, 43, 47,
	131, 0, 0, 0, 0, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 0, 66, 0, 67, 0, 0,
	26, 0, 0, 69, 0, 0, 49, 0, 0, 0,
	0, 26, 46, 0, 69, 0, 0, 49, 0, 0,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 48, 25, 0, 52, 53,
	54, 59, 65, 66, 0, 67, 48, 25, 0, 52,
	53, 54, 59, 62, 66, 0, 67, 0, 0, 36,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 15, 0, 13, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 35, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107,
}
var yyPact = []int{

	2540, -1000, -1000, 2142, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2901, 2901, 3054, 3054, 2901, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2901,
	-1000, -1000, -1000, 260, 457, 456, 498, 84, 454, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66, 2853, -1000, -1000, 2728,
	262, -1000, 362, 361, 482, 478, 198, 2901, 77, 77,
	77, 2901, 2901, -1000, -1000, 412, 497, 55, 707, 11,
	2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901, 2901,
	2901, 2901, 2901, 2901, 2901, 2901, 2912, 295, 2901, 2901,
	2901, 680, 2353, -1000, 6, -1000, 262, 115, -1000, 2142,
	-63, 401, 298, 296, 272, -1000, 553, 84, 84, 84,
	155, -36, 236, -1000, 84, 2265, 521, -1000, -1000, 2073,
	229, 2901, 2013, 48, 196, 194, 182, 470, 75, 468,
	84, 84, 353, -5, -10, -1000, -47, -34, -13, 2142,
	-11, -1000, 201, -1000, -11, -11, 1944, 1884, 99, -1000,
	85, 412, -1000, 452, -1000, -1000, -127, -73, -100, 115,
	-1000, -33, 1563, 2328, 2901, -1000, -1000, -1000, -1000, -1000,
	1104, -1000, -1000, 2901, 1073, -66, -66, -63, -63, -63,
	551, 2353, 2202, 2542, 2542, 2542, 2505, 2505, 2505, 2505,
	403, -1000, 2912, 2901, 2901, 2901, 2277, 6, 6, -1000,
	734, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 363,
	405, 2901, 2901, -1000, 115, -1000, -1000, -1000, 115, -1000,
	115, 2901, 65, 63, 155, 176, -1000, -1000, 343, 82,
	-1000, -1000, -1000, 85, -1000, 151, 47, 2901, 46, -1000,
	229, 2901, -1000, 2901, 1807, -1000, -1000, -1000, 115, -1000,
	115, -1000, 115, 75, 341, -1000, 307, -124, -1000, -101,
	-126, 84, -1000, 198, 2901, -1000, 2901, 519, 77, 2901,
	2901, 2901, 518, 516, 77, 77, 466, -1000, 2901, -27,
	-1000, -109, 99, 338, -1000, 287, 236, 76, 82, 82,
	44, 2328, -33, 2901, -33, 755, -28, -1000, 946, -1000,
	2713, 2912, 8, 2901, 2912, 2912, 2912, 2912, 2912, 2912,
	153, 2277, 6, 6, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2142, 2142, -1000,
	-1000, -1000, -18, -1000, 915, 117, 312, 117, 312, 99,
	132, 99, 76, 76, 419, 61, -1000, 236, -1000, -1000,
	13, -1000, 1747, -1000, -1000, 1676, 2142, 2901, -1000, -1000,
	-1000, 305, -1000, 84, 84, 75, 82, 75, 60, -1000,
	2142, 2142, -1000, -1000, 2142, 2142, 2142, -1000, -1000, -37,
	-37, 203, -1000, 550, -1000, 85, 2142, 85, 2901, 466,
	109, 109, 2901, -1000, -1000, -1000, -1000, 155, -95, -1000,
	-127, -127, 236, -1000, 755, -1000, -1000, -1000, -1000, -1000,
	1616, 544, -1000, -1000, 2901, 882, -72, -72, -71, -71,
	-71, 469, 2912, 2901, -1000, -1000, -1000, -1000, -14, -1000,
	56, -23, -22, 449, 2901, -14, -23, 405, 99, 405,
	405, -24, -1000, -64, -26, -1000, 15, 2901, 75, -1000,
	302, 115, -1000, 2901, 2142, 84, 9, 149, 149, -1000,
	149, 75, 513, 2901, 512, -1000, 2901, -27, -1000, 2142,
	-1000, -1000, -127, -102, -103, -1000, 755, -1000, 72, 2901,
	236, 236, -1000, -1000, -1000, 717, -1000, 2665, 544, -1000,
	-1000, 117, -1000, 1563, 2901, 42, 145, 142, -29, 2142,
	-1000, 36, 244, 405, 244, 244, 76, 2901, 76, -1000,
	-1000, 77, 2142, -32, -1000, 149, 303, 30, 2142, 149,
	2901, -1000, -1000, 226, -1000, 257, -43, -1000, -1000, 2142,
	-1000, -8, 236, 82, 82, -1000, -1000, -1000, 1487, 155,
	155, -1000, -1000, -1000, 1456, -1000, -1000, -33, 2901, 1329,
	115, 2901, 21, 135, 115, -1000, 244, -1000, -1000, -1000,
	1298, -1000, -44, -1000, 200, -1000, 75, -1000, 129, -1000,
	445, 236, 95, -65, -1000, 2142, -1000, -1000, -1000, 175,
	149, 75, 489, -1000, 293, -127, -127, -1000, -1000, -1000,
	-1000, 2142, 2901, 244, 2142, -1000, 19, 244, -1000, -1000,
	511, 77, 76, 76, -1000, 405, 404, -1000, 294, -1000,
	-1000, 2901, 284, 2901, 75, -1000, -1000, -1000, -1000, 2901,
	-1000, 278, 236, 236, 1267, -1000, -1000, -1000, -1000, -1000,
	-1000, -95, -1000, 244, 210, 395, 303, 2142, 101, 549,
	-1000, -1000, 2142, 418, 293, 293, -1000, -1000, 280, 208,
	129, 149, 2901, 2901, 2901, -1000, -1000, 176, 99, 464,
	405, 95, -1000, 2142, 2142, 121, 132, 99, 103, -1000,
	2901, 244, -1000, -1000, 381, -1000, 99, -1000, -1000, 372,
	-1000, 1138, -1000, 193, 391, -1000, 383, -1000, 532, 188,
	183, 99, 463, 462, 103, 2901, 2901, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 773, 771, 770, 769, 767, 62, 766, 764, 0,
	384, 55, 38, 398, 49, 53, 50, 25, 22, 27,
	763, 761, 758, 756, 61, 348, 755, 754, 752, 56,
	65, 296, 31, 751, 747, 745, 156, 54, 202, 738,
	44, 736, 729, 727, 497, 726, 51, 42, 723, 722,
	23, 24, 143, 109, 32, 720, 15, 719, 714, 29,
	256, 713, 6, 712, 43, 697, 692, 33, 691, 690,
	52, 36, 688, 47, 687, 675, 41, 674, 416, 9,
	64, 672, 669, 668, 570, 666, 661, 652, 651, 650,
	647, 646, 645, 641, 634, 633, 631, 629, 628, 627,
	626, 383, 37, 48, 20, 40, 623, 617, 4, 28,
	616, 18, 10, 35, 614, 8, 34, 613, 610, 26,
	21, 601, 600, 3, 2, 5, 19, 599, 598, 46,
	595, 589, 11, 588, 7, 586, 14, 581, 580, 579,
	39, 578, 17, 576, 63, 573,
}
var yyR1 = []int{

	0, 139, 139, 84, 84, 84, 84, 84, 84, 85,
	86, 87, 88, 89, 89, 89, 89, 89, 90, 96,
	96, 96, 96, 37, 37, 37, 39, 39, 39, 39,
	39, 39, 39, 39, 39, 39, 39, 39, 39, 38,
	38, 40, 40, 42, 41, 73, 72, 72, 72, 72,
	72, 140, 140, 140, 71, 71, 70, 70, 70, 18,
	18, 17, 17, 16, 45, 45, 44, 43, 43, 43,
	43, 43, 141, 141, 46, 46, 46, 48, 47, 47,
	47, 52, 53, 51, 51, 54, 54, 54, 55, 142,
	142, 57, 58, 58, 59, 49, 49, 49, 143, 143,
	56, 60, 60, 61, 15, 15, 14, 62, 62, 63,
	64, 64, 65, 65, 12, 12, 66, 66, 67, 68,
	68, 69, 75, 75, 74, 77, 77, 76, 83, 83,
	82, 82, 79, 79, 78, 81, 81, 80, 91, 91,
	101, 101, 144, 144, 144, 145, 145, 103, 103, 102,
	108, 108, 107, 106, 106, 104, 105, 105, 92, 92,
	93, 94, 94, 94, 112, 114, 114, 113, 119, 119,
	118, 110, 110, 109, 109, 19, 111, 32, 32, 115,
	117, 117, 116, 95, 95, 120, 120, 120, 120, 121,
	121, 121, 125, 125, 122, 122, 122, 123, 124, 97,
	97, 127, 127, 126, 129, 129, 130, 130, 132, 132,
	131, 131, 134, 134, 133, 138, 138, 136, 137, 137,
	98, 98, 99, 135, 135, 100, 128, 128, 50, 50,
	50, 50, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 3, 8, 8, 7,
	7, 6, 4, 13, 13, 5, 5, 5, 20, 21,
	21, 22, 25, 25, 23, 24, 24, 33, 33, 33,
	34, 26, 26, 27, 27, 27, 30, 30, 29, 29,
	31, 28, 28, 35, 35, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 4, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 1,
	1, 1, 1, 5, 5, 2, 1, 2, 2, 3,
	4, 1, 1, 1, 1, 3, 1, 3, 2, 0,
	1, 1, 2, 1, 0, 1, 2, 1, 1, 4,
	4, 5, 1, 1, 4, 6, 6, 4, 4, 6,
	6, 1, 1, 0, 2, 0, 1, 1, 4, 0,
	1, 5, 1, 3, 2, 0, 1, 2, 0, 1,
	4, 0, 1, 2, 1, 3, 3, 0, 1, 2,
	0, 1, 5, 1, 1, 3, 0, 1, 2, 0,
	1, 2, 0, 1, 3, 1, 3, 2, 0, 1,
	1, 1, 0, 1, 2, 0, 1, 2, 6, 9,
	4, 2, 0, 5, 6, 1, 2, 1, 3, 6,
	0, 1, 2, 1, 2, 2, 0, 3, 6, 9,
	7, 8, 7, 7, 2, 1, 3, 4, 0, 1,
	4, 1, 3, 3, 3, 1, 1, 0, 2, 2,
	1, 3, 2, 10, 13, 0, 6, 6, 6, 0,
	6, 6, 0, 6, 2, 3, 2, 1, 2, 8,
	12, 0, 1, 1, 1, 3, 0, 3, 0, 1,
	2, 2, 0, 1, 2, 1, 3, 1, 0, 2,
	6, 6, 7, 0, 3, 8, 1, 3, 1, 3,
	3, 4, 1, 3, 3, 5, 5, 4, 5, 6,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 2, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 5, 5, 4, 5,
	6, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 3, 3, 0, 1, 1, 1, 1, 3, 1,
	1, 3, 4, 5, 2, 0, 2, 4, 5, 4,
	1, 1, 1, 4, 4, 4, 1, 3, 3, 3,
	2, 6, 6, 3, 1, 3,
}
var yyChk = []int{

	-1000, -139, -84, -9, -85, -86, -87, -88, -89, -90,
	-10, 95, 50, 51, 110, 49, -37, -91, -92, -93,
	-94, -95, -96, -1, -2, 165, 129, -5, -33, 91,
	-20, -26, -35, -39, 71, 149, 35, 148, 90, -97,
	-98, -99, -100, 96, 92, 52, 141, 97, 164, 135,
	-3, -4, 167, 168, 169, -34, 21, -27, -28, 170,
	-36, -40, 29, 41, 5, 18, 172, 174, 8, 132,
	46, 9, 53, -42, -41, -44, -73, 57, 128, 193,
	174, 188, 91, 189, 190, 191, 187, 7, 102, 180,
	181, 182, 183, 184, 185, 186, 13, 95, 83, 65,
	161, 74, -9, -36, -9, -84, -36, 170, -84, -9,
	-9, -75, 144, 72, 47, -74, 103, 73, 73, 57,
	-101, -52, -53, 165, 73, 170, -21, -22, -23, -9,
	-25, 157, -9, -37, 144, 72, 47, 111, 68, 111,
	68, 68, 68, -8, -7, -6, 135, -13, -12, -9,
	-30, -29, -19, 165, -30, -30, -9, -9, -60, -61,
	81, -45, -44, -43, -46, -48, -53, -52, 136, 170,
	-72, -71, 39, 4, -140, -70, 116, 43, 153, 189,
	-9, 165, 166, 174, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-11, -10, 13, 83, 65, 161, -9, -9, -9, 96,
	95, 92, 154, 15, 97, 135, 9, 98, 14, -78,
	-80, 84, 99, -38, 4, -40, -36, -38, 4, -38,
	4, 19, -101, -101, -101, -54, -55, -57, 150, 178,
	-18, -17, -16, 10, 165, -101, -13, 39, 189, 45,
	-25, 157, -24, 44, -9, 171, 171, -38, 4, -38,
	4, -38, 4, 68, -126, 165, 68, -129, -53, -52,
	-129, 100, 173, 177, 178, 175, 177, -31, 177, 126,
	65, 161, -31, -31, 55, 55, -62, -63, 158, -15,
	-14, -16, -60, -49, 70, 80, -51, 193, 178, 178,
	-37, 177, -71, -140, -71, -9, 193, -18, -9, 175,
	178, 7, 193, 174, 188, 91, 189, 190, 191, 187,
	-11, -9, -9, -9, 96, 92, 154, 15, 97, 135,
	9, 98, 14, -81, -80, -79, -78, -9, -9, -38,
	-38, -38, -77, -76, -9, -144, 170, -144, 170, -54,
	-112, -115, 130, 147, -142, 68, 111, -53, 165, -16,
	152, 171, -9, 171, -24, -9, -9, 137, -38, -38,
	-38, -127, -126, 100, 100, 193, 178, 193, -129, -6,
	-9, -9, 45, -29, -9, -9, -9, 45, 45, -30,
	-30, -64, -65, 60, -67, 82, -9, 177, 180, -62,
	75, 94, -141, 146, 54, -143, 104, -18, -50, 165,
	-53, -53, 171, -70, -9, -18, 189, 175, 176, 175,
	-9, -11, 165, 166, 174, -9, -11, -11, -11, -11,
	-11, -11, 7, 177, -83, -82, 11, 37, -103, -102,
	155, -104, 76, 111, -145, -103, -104, -62, -115, -62,
	-62, -114, -113, -50, -117, -116, -50, 77, 170, -18,
	-46, 170, 171, 137, -9, 100, -129, -129, -126, -53,
	-126, 170, -32, 157, -32, -73, 19, -15, -14, -9,
	-64, -47, -53, -52, 136, -47, -9, -54, 193, 174,
	-51, -51, -17, -18, 175, -9, 175, 178, -11, -76,
	-108, 177, -107, 121, 170, -105, 177, 177, 76, -9,
	-108, -105, -79, -62, -79, -79, 177, 180, 177, -119,
	-118, 55, -9, -58, -59, -126, 100, -37, -9, -129,
	170, -132, -131, 152, -132, -132, -128, -126, 45, -9,
	45, -12, -51, 178, 178, -18, 165, 166, -9, -18,
	-18, 175, 176, 175, -9, -102, -106, -71, -140, -9,
	171, 153, 153, 177, 171, -108, -79, -108, -108, -113,
	-9, -116, -110, -109, -19, 171, 177, -132, -104, 76,
	111, 171, -132, -138, -136, -9, 156, 61, -135, 119,
	171, 177, -66, -67, -18, -53, -53, 175, -54, -54,
	175, -9, 177, -37, -9, 171, 153, -37, -108, -119,
	-32, 177, 65, 161, -59, -120, 157, 76, -17, -134,
	-133, 160, 171, 177, 138, -132, -126, -68, -69, 62,
	-56, 100, -51, -51, -9, -108, 171, -108, 45, -109,
	-111, -50, -111, -79, 88, 95, 100, -9, -130, 106,
	-136, -126, -9, -142, -18, -18, 171, -108, 137, 88,
	-104, -137, 158, 19, 77, -56, -56, 148, 35, 137,
	-120, -132, -136, -9, -9, -122, -112, -115, -123, -62,
	71, -79, -134, -121, 157, -62, -115, -62, -125, 157,
	-124, -9, -108, 88, 95, -62, 95, -62, 137, 88,
	88, 35, 137, 137, -123, 71, 71, -125, -124, -124,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	232, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 283, 284, -2, 286, 287, 288, 0,
	290, 291, 292, 122, 0, 0, 0, 0, 0, 19,
	20, 21, 22, 307, 308, 309, 310, 311, 312, 313,
	314, 315, 325, 326, 327, 0, 0, 341, 342, 0,
	354, 26, 0, 0, 0, 0, 317, 323, 0, 0,
	0, 0, 0, 41, 42, 101, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 354, 282, 9, 0, 0, 10, 11,
	289, 23, 0, 0, 0, 123, 0, 0, 0, 0,
	85, 0, 59, -2, 0, 323, 0, 329, 330, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 318, 319, 0, 0, 324, 114,
	0, 346, 0, 175, 0, 0, 0, 0, 107, 102,
	0, 101, 65, -2, 67, 68, 83, 0, 0, 0,
	45, 46, 0, 0, 0, 54, 51, 52, 53, 56,
	59, 233, 234, 0, 0, 240, 241, 242, 243, 244,
	245, 246, 247, -2, -2, -2, -2, -2, -2, -2,
	0, 293, 0, 0, 0, 0, -2, -2, -2, 264,
	0, 266, 268, 270, 272, 274, 276, 278, 280, 135,
	132, 0, 0, 27, 0, 39, 40, 29, 0, 31,
	0, 0, 142, 142, 85, 0, 86, 87, 89, 0,
	141, 60, 61, 0, 63, 0, 0, 0, 0, 328,
	335, 0, 334, 0, 0, 353, 355, 33, 0, 35,
	0, 37, 0, 201, 0, 203, 0, 0, 204, 0,
	0, 0, 316, 0, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 110, 108, 0, 103,
	104, 0, 107, 0, 96, 98, 59, 0, 0, 0,
	0, 0, 47, 0, 48, 59, 0, 58, 0, 237,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, -2, -2, -2, 265, 267, 269, 271, 273, 275,
	277, 279, 281, 24, 136, 25, 133, 134, 137, 28,
	30, 32, 124, 125, 128, 0, 0, 0, 0, 107,
	107, 107, 0, 0, 0, 0, 90, 59, 82, 62,
	0, 337, 0, 339, 331, 0, 336, 0, 34, 36,
	38, 0, 202, 0, 0, 0, 0, 0, 0, 320,
	321, 115, 343, 347, 350, 348, 349, 344, 345, 177,
	177, 0, 111, 0, 113, 0, 109, 0, 0, 110,
	0, 0, 0, 72, 73, 97, 99, 85, 84, 228,
	83, 83, 0, 55, 59, 49, 57, 235, 236, 238,
	0, 256, 294, 295, 0, 0, 301, 302, 303, 304,
	305, 306, 0, 0, 127, 129, 130, 131, 150, 147,
	0, 156, 145, 0, 0, 150, 156, 132, 107, 132,
	132, 164, 165, 0, 179, 180, 168, 0, 0, 140,
	0, 0, 338, 0, 332, 0, 0, 208, 208, 205,
	208, 0, 0, 0, 0, 43, 0, 118, 105, 106,
	44, 69, 83, 0, 0, 70, 59, 74, 0, 0,
	59, 59, 77, 50, 239, 0, 298, 0, 257, 126,
	138, 0, 151, 0, 0, 0, 0, 0, 146, 155,
	158, 0, 150, 132, 150, 150, 0, 0, 0, 182,
	169, 0, 88, 0, 92, 208, 0, 0, 333, 208,
	0, 220, 209, 0, 221, 223, 0, 226, 351, 178,
	352, 116, 59, 0, 0, 71, 229, 230, 0, 85,
	85, 296, 297, 299, 0, 148, 152, 153, 0, 0,
	0, 0, 0, 0, 0, 160, 150, 162, 163, 166,
	168, 181, 177, 171, 0, 91, 0, 94, 185, 145,
	0, 0, 212, 0, 215, 217, 210, 211, 222, 0,
	208, 0, 119, 117, 0, 83, 83, 231, 75, 76,
	300, 154, 0, 150, 157, 143, 0, 150, 161, 167,
	0, 0, 0, 0, 93, 132, 0, 146, 0, 199,
	213, 0, 206, 0, 0, 225, 227, 112, 120, 0,
	78, 89, 59, 59, 0, 139, 144, 159, 170, 172,
	173, 176, 174, 150, 0, 0, 0, 214, 218, 0,
	216, 224, 121, 0, 0, 0, 149, 183, 0, 0,
	185, 208, 0, 0, 0, 79, 80, 0, 107, 0,
	132, 212, 219, 207, 100, 189, 107, 107, 192, 197,
	0, 150, 200, 186, 0, 194, 107, 196, 187, 0,
	188, 107, 184, 0, 0, 195, 0, 198, 0, 0,
	0, 107, 0, 0, 192, 0, 0, 190, 191, 193,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:372
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:377
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:398
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:405
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:412
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:419
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		yyVAL.statement = yyS[yypt-0].statement
	case 23:
		//line n1ql.y:452
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:456
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:460
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 26:
		//line n1ql.y:466
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 27:
		//line n1ql.y:471
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subresult)
		}
	case 28:
		//line n1ql.y:476
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subresult)
		}
	case 29:
		//line n1ql.y:481
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subresult)
		}
	case 30:
		//line n1ql.y:486
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subresult)
		}
	case 31:
		//line n1ql.y:491
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subresult)
		}
	case 32:
		//line n1ql.y:496
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subresult)
		}
	case 33:
		//line n1ql.y:501
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-2].subquery.Select())
			yyVAL.subresult = algebra.NewUnion(left_term, yyS[yypt-0].subresult)
		}
	case 34:
		//line n1ql.y:507
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-3].subquery.Select())
			yyVAL.subresult = algebra.NewUnionAll(left_term, yyS[yypt-0].subresult)
		}
	case 35:
		//line n1ql.y:513
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-2].subquery.Select())
			yyVAL.subresult = algebra.NewIntersect(left_term, yyS[yypt-0].subresult)
		}
	case 36:
		//line n1ql.y:519
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-3].subquery.Select())
			yyVAL.subresult = algebra.NewIntersectAll(left_term, yyS[yypt-0].subresult)
		}
	case 37:
		//line n1ql.y:525
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-2].subquery.Select())
			yyVAL.subresult = algebra.NewExcept(left_term, yyS[yypt-0].subresult)
		}
	case 38:
		//line n1ql.y:531
		{
			left_term := algebra.NewSelectTerm(yyS[yypt-3].subquery.Select())
			yyVAL.subresult = algebra.NewExceptAll(left_term, yyS[yypt-0].subresult)
		}
	case 39:
		//line n1ql.y:539
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 40:
		//line n1ql.y:544
		{
			yyVAL.subresult = algebra.NewSelectTerm(yyS[yypt-0].subquery.Select())
		}
	case 41:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 42:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 43:
		//line n1ql.y:557
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 44:
		//line n1ql.y:564
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 45:
		//line n1ql.y:579
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 46:
		//line n1ql.y:586
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 47:
		//line n1ql.y:591
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 48:
		//line n1ql.y:596
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 49:
		//line n1ql.y:601
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 50:
		//line n1ql.y:606
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 54:
		//line n1ql.y:621
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 55:
		//line n1ql.y:626
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 56:
		//line n1ql.y:633
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 57:
		//line n1ql.y:638
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 58:
		//line n1ql.y:643
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 59:
		//line n1ql.y:650
		{
			yyVAL.s = ""
		}
	case 60:
		yyVAL.s = yyS[yypt-0].s
	case 61:
		yyVAL.s = yyS[yypt-0].s
	case 62:
		//line n1ql.y:661
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 63:
		yyVAL.s = yyS[yypt-0].s
	case 64:
		//line n1ql.y:679
		{
			yyVAL.fromTerm = nil
		}
	case 65:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 66:
		//line n1ql.y:688
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 67:
		//line n1ql.y:695
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 68:
		//line n1ql.y:700
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 69:
		//line n1ql.y:705
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 70:
		//line n1ql.y:710
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 71:
		//line n1ql.y:715
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 74:
		//line n1ql.y:728
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 75:
		//line n1ql.y:733
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 76:
		//line n1ql.y:738
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 77:
		//line n1ql.y:745
		{
			if yyS[yypt-0].s == "" {
				yylex.Error("Subquery in FROM clause must have an alias.")
			} else {
				yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
			}
		}
	case 78:
		//line n1ql.y:756
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 79:
		//line n1ql.y:761
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 80:
		//line n1ql.y:766
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 81:
		yyVAL.s = yyS[yypt-0].s
	case 82:
		yyVAL.s = yyS[yypt-0].s
	case 83:
		//line n1ql.y:781
		{
			yyVAL.path = nil
		}
	case 84:
		//line n1ql.y:786
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 85:
		//line n1ql.y:793
		{
			yyVAL.use = algebra.EMPTY_USE
		}
	case 86:
		//line n1ql.y:798
		{
			yyVAL.use = algebra.NewUse(yyS[yypt-0].expr, nil)
		}
	case 87:
		//line n1ql.y:803
		{
			yyVAL.use = algebra.NewUse(nil, yyS[yypt-0].indexRefs)
		}
	case 88:
		//line n1ql.y:810
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 89:
		//line n1ql.y:817
		{
		}
	case 91:
		//line n1ql.y:825
		{
			yyVAL.indexRefs = yyS[yypt-1].indexRefs
		}
	case 92:
		//line n1ql.y:832
		{
			yyVAL.indexRefs = algebra.IndexRefs{yyS[yypt-0].indexRef}
		}
	case 93:
		//line n1ql.y:837
		{
			yyVAL.indexRefs = append(yyS[yypt-2].indexRefs, yyS[yypt-0].indexRef)
		}
	case 94:
		//line n1ql.y:844
		{
			yyVAL.indexRef = algebra.NewIndexRef(yyS[yypt-1].s, yyS[yypt-0].indexType)
		}
	case 95:
		//line n1ql.y:850
		{
			yyVAL.b = false
		}
	case 96:
		//line n1ql.y:855
		{
			yyVAL.b = false
		}
	case 97:
		//line n1ql.y:860
		{
			yyVAL.b = true
		}
	case 100:
		//line n1ql.y:873
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 101:
		//line n1ql.y:887
		{
			yyVAL.bindings = nil
		}
	case 102:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 103:
		//line n1ql.y:896
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 104:
		//line n1ql.y:903
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 105:
		//line n1ql.y:908
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 106:
		//line n1ql.y:915
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 107:
		//line n1ql.y:929
		{
			yyVAL.expr = nil
		}
	case 108:
		yyVAL.expr = yyS[yypt-0].expr
	case 109:
		//line n1ql.y:938
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 110:
		//line n1ql.y:952
		{
			yyVAL.group = nil
		}
	case 111:
		yyVAL.group = yyS[yypt-0].group
	case 112:
		//line n1ql.y:961
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 113:
		//line n1ql.y:966
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 114:
		//line n1ql.y:973
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 115:
		//line n1ql.y:978
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 116:
		//line n1ql.y:985
		{
			yyVAL.bindings = nil
		}
	case 117:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 118:
		//line n1ql.y:994
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 119:
		//line n1ql.y:1001
		{
			yyVAL.expr = nil
		}
	case 120:
		yyVAL.expr = yyS[yypt-0].expr
	case 121:
		//line n1ql.y:1010
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 122:
		//line n1ql.y:1024
		{
			yyVAL.order = nil
		}
	case 123:
		yyVAL.order = yyS[yypt-0].order
	case 124:
		//line n1ql.y:1033
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 125:
		//line n1ql.y:1040
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 126:
		//line n1ql.y:1045
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 127:
		//line n1ql.y:1052
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 128:
		//line n1ql.y:1059
		{
			yyVAL.b = false
		}
	case 129:
		yyVAL.b = yyS[yypt-0].b
	case 130:
		//line n1ql.y:1068
		{
			yyVAL.b = false
		}
	case 131:
		//line n1ql.y:1073
		{
			yyVAL.b = true
		}
	case 132:
		//line n1ql.y:1087
		{
			yyVAL.expr = nil
		}
	case 133:
		yyVAL.expr = yyS[yypt-0].expr
	case 134:
		//line n1ql.y:1096
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 135:
		//line n1ql.y:1110
		{
			yyVAL.expr = nil
		}
	case 136:
		yyVAL.expr = yyS[yypt-0].expr
	case 137:
		//line n1ql.y:1119
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 138:
		//line n1ql.y:1133
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 139:
		//line n1ql.y:1138
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 140:
		//line n1ql.y:1145
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 141:
		//line n1ql.y:1150
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 147:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 148:
		//line n1ql.y:1173
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 149:
		//line n1ql.y:1180
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 150:
		//line n1ql.y:1187
		{
			yyVAL.projection = nil
		}
	case 151:
		yyVAL.projection = yyS[yypt-0].projection
	case 152:
		//line n1ql.y:1196
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 153:
		//line n1ql.y:1203
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 154:
		//line n1ql.y:1208
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 155:
		//line n1ql.y:1215
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 156:
		//line n1ql.y:1222
		{
			yyVAL.expr = nil
		}
	case 157:
		//line n1ql.y:1227
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 158:
		//line n1ql.y:1241
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 159:
		//line n1ql.y:1246
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 160:
		//line n1ql.y:1260
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].use.Keys(), yyS[yypt-3].use.Indexes(), yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 161:
		//line n1ql.y:1274
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].use.Keys(), yyS[yypt-5].use.Indexes(), yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 162:
		//line n1ql.y:1279
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].use.Keys(), yyS[yypt-4].use.Indexes(), yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 163:
		//line n1ql.y:1284
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].use.Keys(), yyS[yypt-4].use.Indexes(), nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 164:
		//line n1ql.y:1291
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 165:
		//line n1ql.y:1298
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 166:
		//line n1ql.y:1303
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 167:
		//line n1ql.y:1310
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 168:
		//line n1ql.y:1317
		{
			yyVAL.updateFor = nil
		}
	case 169:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 170:
		//line n1ql.y:1326
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 171:
		//line n1ql.y:1333
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 172:
		//line n1ql.y:1338
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 173:
		//line n1ql.y:1345
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 174:
		//line n1ql.y:1350
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 175:
		yyVAL.s = yyS[yypt-0].s
	case 176:
		//line n1ql.y:1361
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 177:
		//line n1ql.y:1368
		{
			yyVAL.expr = nil
		}
	case 178:
		//line n1ql.y:1373
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 179:
		//line n1ql.y:1380
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 180:
		//line n1ql.y:1387
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 181:
		//line n1ql.y:1392
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 182:
		//line n1ql.y:1399
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 183:
		//line n1ql.y:1413
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 184:
		//line n1ql.y:1419
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 185:
		//line n1ql.y:1427
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 186:
		//line n1ql.y:1432
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 187:
		//line n1ql.y:1437
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 188:
		//line n1ql.y:1442
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 189:
		//line n1ql.y:1449
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 190:
		//line n1ql.y:1454
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 191:
		//line n1ql.y:1459
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 192:
		//line n1ql.y:1466
		{
			yyVAL.mergeInsert = nil
		}
	case 193:
		//line n1ql.y:1471
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 194:
		//line n1ql.y:1478
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 195:
		//line n1ql.y:1483
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 196:
		//line n1ql.y:1488
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 197:
		//line n1ql.y:1495
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 198:
		//line n1ql.y:1502
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 199:
		//line n1ql.y:1516
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-4].s, yyS[yypt-2].keyspaceRef, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 200:
		//line n1ql.y:1521
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-9].s, yyS[yypt-7].keyspaceRef, yyS[yypt-5].exprs, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 201:
		//line n1ql.y:1528
		{
			yyVAL.s = "#primary"
		}
	case 202:
		yyVAL.s = yyS[yypt-0].s
	case 203:
		yyVAL.s = yyS[yypt-0].s
	case 204:
		//line n1ql.y:1541
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 205:
		//line n1ql.y:1546
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 206:
		//line n1ql.y:1553
		{
			yyVAL.expr = nil
		}
	case 207:
		//line n1ql.y:1558
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 208:
		//line n1ql.y:1565
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 209:
		yyVAL.indexType = yyS[yypt-0].indexType
	case 210:
		//line n1ql.y:1574
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 211:
		//line n1ql.y:1579
		{
			yyVAL.indexType = datastore.GSI
		}
	case 212:
		//line n1ql.y:1586
		{
			yyVAL.val = nil
		}
	case 213:
		yyVAL.val = yyS[yypt-0].val
	case 214:
		//line n1ql.y:1595
		{
			yyVAL.val = yyS[yypt-0].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 215:
		//line n1ql.y:1605
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 216:
		//line n1ql.y:1610
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 217:
		//line n1ql.y:1617
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 218:
		//line n1ql.y:1628
		{
			yyVAL.expr = nil
		}
	case 219:
		//line n1ql.y:1633
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 220:
		//line n1ql.y:1647
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-1].keyspaceRef, "#primary", yyS[yypt-0].indexType)
		}
	case 221:
		//line n1ql.y:1652
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].indexType)
		}
	case 222:
		//line n1ql.y:1665
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-4].keyspaceRef, yyS[yypt-2].s, yyS[yypt-1].indexType, yyS[yypt-0].s)
		}
	case 223:
		//line n1ql.y:1671
		{
			yyVAL.s = ""
		}
	case 224:
		//line n1ql.y:1676
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 225:
		//line n1ql.y:1689
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyS[yypt-4].keyspaceRef, yyS[yypt-0].indexType, yyS[yypt-2].ss...)
		}
	case 226:
		//line n1ql.y:1696
		{
			yyVAL.ss = []string{yyS[yypt-0].s}
		}
	case 227:
		//line n1ql.y:1701
		{
			yyVAL.ss = append(yyS[yypt-2].ss, yyS[yypt-0].s)
		}
	case 228:
		//line n1ql.y:1715
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 229:
		//line n1ql.y:1720
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 230:
		//line n1ql.y:1725
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 231:
		//line n1ql.y:1732
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 232:
		yyVAL.expr = yyS[yypt-0].expr
	case 233:
		//line n1ql.y:1749
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 234:
		//line n1ql.y:1754
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 235:
		//line n1ql.y:1761
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 236:
		//line n1ql.y:1766
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 237:
		//line n1ql.y:1773
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 238:
		//line n1ql.y:1778
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 239:
		//line n1ql.y:1783
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 240:
		//line n1ql.y:1789
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 241:
		//line n1ql.y:1794
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 242:
		//line n1ql.y:1799
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 243:
		//line n1ql.y:1804
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 244:
		//line n1ql.y:1809
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 245:
		//line n1ql.y:1815
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 246:
		//line n1ql.y:1821
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 247:
		//line n1ql.y:1826
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 248:
		//line n1ql.y:1831
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 249:
		//line n1ql.y:1837
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 250:
		//line n1ql.y:1842
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 251:
		//line n1ql.y:1847
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 252:
		//line n1ql.y:1852
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 253:
		//line n1ql.y:1857
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 254:
		//line n1ql.y:1862
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 255:
		//line n1ql.y:1867
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 256:
		//line n1ql.y:1872
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 257:
		//line n1ql.y:1877
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 258:
		//line n1ql.y:1882
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 259:
		//line n1ql.y:1887
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 260:
		//line n1ql.y:1892
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 261:
		//line n1ql.y:1897
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 262:
		//line n1ql.y:1902
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 263:
		//line n1ql.y:1907
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 264:
		//line n1ql.y:1912
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 265:
		//line n1ql.y:1917
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 266:
		//line n1ql.y:1922
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 267:
		//line n1ql.y:1927
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 268:
		//line n1ql.y:1932
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 269:
		//line n1ql.y:1937
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 270:
		//line n1ql.y:1942
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 271:
		//line n1ql.y:1947
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 272:
		//line n1ql.y:1952
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 273:
		//line n1ql.y:1957
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 274:
		//line n1ql.y:1962
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 275:
		//line n1ql.y:1967
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 276:
		//line n1ql.y:1972
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 277:
		//line n1ql.y:1977
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 278:
		//line n1ql.y:1982
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 279:
		//line n1ql.y:1987
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 280:
		//line n1ql.y:1992
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 281:
		//line n1ql.y:1997
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 282:
		//line n1ql.y:2002
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 283:
		yyVAL.expr = yyS[yypt-0].expr
	case 284:
		yyVAL.expr = yyS[yypt-0].expr
	case 285:
		//line n1ql.y:2016
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 286:
		//line n1ql.y:2022
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 287:
		yyVAL.expr = yyS[yypt-0].expr
	case 288:
		yyVAL.expr = yyS[yypt-0].expr
	case 289:
		//line n1ql.y:2034
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 290:
		yyVAL.expr = yyS[yypt-0].expr
	case 291:
		yyVAL.expr = yyS[yypt-0].expr
	case 292:
		yyVAL.expr = yyS[yypt-0].expr
	case 293:
		yyVAL.expr = yyS[yypt-0].expr
	case 294:
		//line n1ql.y:2053
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 295:
		//line n1ql.y:2058
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 296:
		//line n1ql.y:2065
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 297:
		//line n1ql.y:2070
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 298:
		//line n1ql.y:2077
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 299:
		//line n1ql.y:2082
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 300:
		//line n1ql.y:2087
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 301:
		//line n1ql.y:2093
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 302:
		//line n1ql.y:2098
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 303:
		//line n1ql.y:2103
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 304:
		//line n1ql.y:2108
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 305:
		//line n1ql.y:2113
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 306:
		//line n1ql.y:2119
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 307:
		//line n1ql.y:2133
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 308:
		//line n1ql.y:2138
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 309:
		//line n1ql.y:2143
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 310:
		//line n1ql.y:2148
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 311:
		//line n1ql.y:2153
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 312:
		//line n1ql.y:2158
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 313:
		//line n1ql.y:2163
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 314:
		yyVAL.expr = yyS[yypt-0].expr
	case 315:
		yyVAL.expr = yyS[yypt-0].expr
	case 316:
		//line n1ql.y:2183
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 317:
		//line n1ql.y:2190
		{
			yyVAL.bindings = nil
		}
	case 318:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 319:
		//line n1ql.y:2199
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 320:
		//line n1ql.y:2204
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 321:
		//line n1ql.y:2211
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 322:
		//line n1ql.y:2218
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 323:
		//line n1ql.y:2225
		{
			yyVAL.exprs = nil
		}
	case 324:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 325:
		//line n1ql.y:2241
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 326:
		//line n1ql.y:2246
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 327:
		//line n1ql.y:2251
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 328:
		//line n1ql.y:2266
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 329:
		yyVAL.expr = yyS[yypt-0].expr
	case 330:
		yyVAL.expr = yyS[yypt-0].expr
	case 331:
		//line n1ql.y:2279
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 332:
		//line n1ql.y:2286
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 333:
		//line n1ql.y:2291
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 334:
		//line n1ql.y:2299
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 335:
		//line n1ql.y:2306
		{
			yyVAL.expr = nil
		}
	case 336:
		//line n1ql.y:2311
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 337:
		//line n1ql.y:2325
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 338:
		//line n1ql.y:2344
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 339:
		//line n1ql.y:2359
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 340:
		yyVAL.s = yyS[yypt-0].s
	case 341:
		yyVAL.expr = yyS[yypt-0].expr
	case 342:
		yyVAL.expr = yyS[yypt-0].expr
	case 343:
		//line n1ql.y:2397
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 344:
		//line n1ql.y:2402
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 345:
		//line n1ql.y:2407
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 346:
		//line n1ql.y:2414
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 347:
		//line n1ql.y:2419
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 348:
		//line n1ql.y:2426
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 349:
		//line n1ql.y:2431
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 350:
		//line n1ql.y:2438
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 351:
		//line n1ql.y:2445
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 352:
		//line n1ql.y:2450
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 353:
		//line n1ql.y:2464
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 354:
		//line n1ql.y:2469
		{
			yyVAL.expr = yyS[yypt-0].subquery
		}
	case 355:
		//line n1ql.y:2476
		{
			yyVAL.subquery = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.subquery = algebra.NewSubquery(yyS[yypt-1].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
