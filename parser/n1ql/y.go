//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbase/clog"
import "github.com/couchbase/query/algebra"
import "github.com/couchbase/query/datastore"
import "github.com/couchbase/query/expression"
import "github.com/couchbase/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	ss        []string
	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	use          *algebra.Use
	indexRefs    algebra.IndexRefs
	indexRef     *algebra.IndexRef
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
	val         value.Value
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BUILD = 57360
const BY = 57361
const CALL = 57362
const CASE = 57363
const CAST = 57364
const CLUSTER = 57365
const COLLATE = 57366
const COLLECTION = 57367
const COMMIT = 57368
const CONNECT = 57369
const CONTINUE = 57370
const CREATE = 57371
const DATABASE = 57372
const DATASET = 57373
const DATASTORE = 57374
const DECLARE = 57375
const DECREMENT = 57376
const DELETE = 57377
const DERIVED = 57378
const DESC = 57379
const DESCRIBE = 57380
const DISTINCT = 57381
const DO = 57382
const DROP = 57383
const EACH = 57384
const ELEMENT = 57385
const ELSE = 57386
const END = 57387
const EVERY = 57388
const EXCEPT = 57389
const EXCLUDE = 57390
const EXECUTE = 57391
const EXISTS = 57392
const EXPLAIN = 57393
const FALSE = 57394
const FIRST = 57395
const FLATTEN = 57396
const FOR = 57397
const FORCE = 57398
const FROM = 57399
const FUNCTION = 57400
const GRANT = 57401
const GROUP = 57402
const GSI = 57403
const HAVING = 57404
const IF = 57405
const IGNORE = 57406
const IN = 57407
const INCLUDE = 57408
const INCREMENT = 57409
const INDEX = 57410
const INLINE = 57411
const INNER = 57412
const INSERT = 57413
const INTERSECT = 57414
const INTO = 57415
const IS = 57416
const JOIN = 57417
const KEY = 57418
const KEYS = 57419
const KEYSPACE = 57420
const LAST = 57421
const LEFT = 57422
const LET = 57423
const LETTING = 57424
const LIKE = 57425
const LIMIT = 57426
const LSM = 57427
const MAP = 57428
const MAPPING = 57429
const MATCHED = 57430
const MATERIALIZED = 57431
const MERGE = 57432
const MINUS = 57433
const MISSING = 57434
const NAMESPACE = 57435
const NEST = 57436
const NOT = 57437
const NULL = 57438
const NUMBER = 57439
const OBJECT = 57440
const OFFSET = 57441
const ON = 57442
const OPTION = 57443
const OR = 57444
const ORDER = 57445
const OUTER = 57446
const OVER = 57447
const PARTITION = 57448
const PASSWORD = 57449
const PATH = 57450
const POOL = 57451
const PREPARE = 57452
const PRIMARY = 57453
const PRIVATE = 57454
const PRIVILEGE = 57455
const PROCEDURE = 57456
const PUBLIC = 57457
const RAW = 57458
const REALM = 57459
const REDUCE = 57460
const RENAME = 57461
const RETURN = 57462
const RETURNING = 57463
const REVOKE = 57464
const RIGHT = 57465
const ROLE = 57466
const ROLLBACK = 57467
const SATISFIES = 57468
const SCHEMA = 57469
const SELECT = 57470
const SELF = 57471
const SET = 57472
const SHOW = 57473
const SOME = 57474
const START = 57475
const STATISTICS = 57476
const STRING = 57477
const SYSTEM = 57478
const THEN = 57479
const TO = 57480
const TRANSACTION = 57481
const TRIGGER = 57482
const TRUE = 57483
const TRUNCATE = 57484
const UNDER = 57485
const UNION = 57486
const UNIQUE = 57487
const UNNEST = 57488
const UNSET = 57489
const UPDATE = 57490
const UPSERT = 57491
const USE = 57492
const USER = 57493
const USING = 57494
const VALUE = 57495
const VALUED = 57496
const VALUES = 57497
const VIEW = 57498
const WHEN = 57499
const WHERE = 57500
const WHILE = 57501
const WITH = 57502
const WITHIN = 57503
const WORK = 57504
const XOR = 57505
const INT = 57506
const IDENTIFIER = 57507
const IDENTIFIER_ICASE = 57508
const NAMED_PARAM = 57509
const POSITIONAL_PARAM = 57510
const NEXT_PARAM = 57511
const LPAREN = 57512
const RPAREN = 57513
const LBRACE = 57514
const RBRACE = 57515
const LBRACKET = 57516
const RBRACKET = 57517
const RBRACKET_ICASE = 57518
const COMMA = 57519
const COLON = 57520
const INTERESECT = 57521
const EQ = 57522
const DEQ = 57523
const NE = 57524
const LT = 57525
const GT = 57526
const LE = 57527
const GE = 57528
const CONCAT = 57529
const PLUS = 57530
const STAR = 57531
const DIV = 57532
const MOD = 57533
const UMINUS = 57534
const DOT = 57535

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BUILD",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FORCE",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IGNORE",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	170, 331,
	-2, 276,
	-1, 119,
	178, 72,
	-2, 73,
	-1, 157,
	54, 86,
	75, 86,
	94, 86,
	146, 86,
	-2, 57,
	-1, 186,
	180, 0,
	181, 0,
	182, 0,
	-2, 240,
	-1, 187,
	180, 0,
	181, 0,
	182, 0,
	-2, 241,
	-1, 188,
	180, 0,
	181, 0,
	182, 0,
	-2, 242,
	-1, 189,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 243,
	-1, 190,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 244,
	-1, 191,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 245,
	-1, 192,
	183, 0,
	184, 0,
	185, 0,
	186, 0,
	-2, 246,
	-1, 199,
	83, 0,
	-2, 249,
	-1, 200,
	65, 0,
	161, 0,
	-2, 251,
	-1, 201,
	65, 0,
	161, 0,
	-2, 253,
	-1, 305,
	83, 0,
	-2, 250,
	-1, 306,
	65, 0,
	161, 0,
	-2, 252,
	-1, 307,
	65, 0,
	161, 0,
	-2, 254,
}

const yyNprod = 347
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2948

var yyAct = []int{

	173, 3, 671, 659, 481, 669, 660, 600, 335, 319,
	334, 512, 101, 102, 565, 611, 146, 338, 621, 506,
	422, 596, 231, 434, 232, 453, 500, 554, 505, 436,
	106, 226, 375, 433, 420, 165, 251, 486, 142, 168,
	252, 327, 462, 372, 273, 158, 75, 419, 16, 274,
	280, 169, 145, 139, 243, 10, 233, 125, 297, 329,
	129, 144, 213, 502, 253, 299, 193, 143, 281, 358,
	356, 150, 151, 300, 301, 302, 379, 296, 118, 60,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 79, 470, 199, 200,
	201, 470, 117, 498, 297, 79, 525, 524, 130, 454,
	376, 82, 83, 84, 484, 78, 469, 160, 100, 357,
	469, 603, 143, 296, 78, 174, 175, 604, 245, 592,
	148, 149, 571, 556, 176, 81, 283, 454, 572, 557,
	263, 161, 282, 258, 230, 285, 544, 378, 297, 397,
	499, 194, 248, 497, 118, 118, 118, 262, 95, 270,
	487, 118, 298, 300, 301, 302, 488, 296, 414, 289,
	482, 260, 254, 257, 403, 404, 259, 292, 117, 117,
	117, 617, 470, 405, 256, 117, 174, 175, 216, 218,
	220, 262, 162, 162, 65, 176, 291, 305, 306, 307,
	586, 469, 286, 288, 562, 260, 287, 545, 541, 393,
	98, 275, 284, 347, 345, 321, 322, 246, 79, 100,
	511, 119, 119, 328, 485, 452, 442, 163, 97, 439,
	332, 85, 80, 82, 83, 84, 81, 78, 330, 346,
	121, 527, 528, 349, 234, 350, 249, 465, 390, 147,
	342, 194, 119, 235, 593, 195, 602, 333, 272, 361,
	643, 362, 304, 337, 365, 366, 367, 353, 244, 670,
	665, 341, 597, 377, 272, 318, 119, 264, 152, 568,
	421, 587, 543, 380, 331, 542, 514, 344, 395, 229,
	605, 343, 359, 336, 649, 401, 348, 323, 406, 324,
	261, 325, 684, 388, 683, 389, 99, 197, 385, 679,
	337, 360, 396, 650, 639, 364, 140, 484, 76, 79,
	77, 570, 340, 391, 392, 196, 126, 630, 560, 381,
	370, 371, 85, 80, 82, 83, 84, 394, 78, 387,
	428, 430, 431, 429, 141, 320, 612, 423, 382, 221,
	594, 194, 445, 427, 194, 194, 194, 194, 194, 194,
	627, 437, 402, 561, 440, 407, 408, 409, 410, 411,
	412, 339, 507, 265, 567, 446, 449, 355, 451, 426,
	460, 242, 424, 354, 467, 160, 134, 132, 110, 77,
	441, 447, 448, 255, 215, 116, 95, 455, 450, 235,
	384, 219, 76, 198, 677, 681, 476, 648, 680, 161,
	674, 217, 214, 109, 340, 328, 473, 675, 474, 456,
	468, 458, 463, 463, 461, 466, 490, 215, 459, 133,
	131, 491, 640, 275, 276, 275, 494, 214, 493, 503,
	495, 496, 471, 472, 112, 509, 464, 464, 98, 266,
	267, 154, 241, 212, 76, 520, 480, 100, 143, 374,
	625, 515, 645, 516, 76, 492, 237, 626, 278, 194,
	438, 529, 518, 77, 81, 74, 598, 489, 279, 535,
	479, 376, 120, 510, 114, 108, 540, 113, 687, 686,
	526, 508, 661, 250, 530, 531, 522, 247, 546, 551,
	548, 549, 136, 135, 547, 610, 76, 115, 619, 223,
	224, 225, 566, 521, 523, 413, 236, 536, 558, 555,
	538, 519, 563, 437, 539, 77, 369, 368, 559, 552,
	363, 550, 240, 682, 644, 77, 457, 222, 425, 2,
	582, 386, 50, 585, 99, 383, 575, 1, 564, 295,
	642, 156, 589, 103, 104, 574, 569, 79, 105, 601,
	513, 629, 579, 580, 517, 576, 577, 352, 656, 664,
	85, 80, 82, 83, 84, 501, 78, 435, 590, 591,
	432, 553, 483, 606, 615, 537, 595, 599, 42, 616,
	584, 41, 607, 618, 588, 40, 39, 22, 21, 299,
	20, 19, 18, 628, 17, 566, 624, 9, 8, 555,
	7, 633, 6, 623, 5, 4, 415, 622, 622, 631,
	620, 416, 317, 326, 107, 632, 86, 613, 614, 638,
	634, 111, 95, 299, 164, 609, 635, 636, 608, 573,
	373, 299, 271, 153, 566, 654, 655, 504, 641, 228,
	227, 646, 647, 277, 652, 159, 155, 658, 653, 657,
	663, 662, 672, 651, 666, 668, 667, 673, 157, 86,
	72, 73, 234, 33, 676, 95, 81, 128, 32, 678,
	55, 28, 297, 58, 98, 57, 685, 672, 672, 689,
	690, 688, 31, 100, 124, 303, 298, 300, 301, 302,
	123, 296, 97, 86, 122, 30, 137, 138, 27, 95,
	81, 51, 24, 23, 96, 0, 297, 0, 0, 0,
	0, 87, 0, 0, 297, 0, 0, 98, 0, 303,
	298, 300, 301, 302, 0, 296, 100, 303, 298, 300,
	301, 302, 0, 296, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 0, 0, 96, 0, 79,
	0, 98, 0, 0, 87, 0, 0, 0, 0, 0,
	100, 0, 0, 80, 82, 83, 84, 0, 78, 97,
	99, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 96, 0, 79, 532, 533, 0, 0, 87, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 0, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 209, 0, 235, 0, 0,
	211, 206, 0, 86, 0, 0, 79, 417, 0, 95,
	0, 0, 88, 89, 90, 91, 92, 93, 94, 85,
	80, 82, 83, 84, 0, 78, 314, 99, 0, 0,
	0, 316, 311, 418, 0, 0, 86, 0, 0, 0,
	79, 477, 95, 0, 478, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 78,
	0, 98, 0, 0, 0, 0, 0, 86, 0, 0,
	100, 0, 0, 95, 0, 0, 0, 0, 204, 97,
	0, 203, 202, 207, 210, 0, 0, 81, 0, 0,
	0, 96, 0, 0, 98, 0, 0, 0, 87, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 309,
	0, 0, 97, 308, 312, 315, 0, 0, 0, 0,
	81, 208, 0, 0, 96, 98, 0, 0, 0, 0,
	0, 87, 0, 0, 100, 0, 0, 0, 0, 0,
	205, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 81, 313, 0, 0, 96, 0, 99, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	79, 310, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 0, 78,
	99, 0, 0, 0, 86, 0, 0, 234, 0, 0,
	95, 0, 0, 79, 398, 399, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 99, 78, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 293, 0, 0, 294, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 98, 78, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 167, 0, 0,
	97, 67, 70, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 96, 0, 56, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 0, 0, 0, 171, 0, 0, 69,
	0, 0, 0, 12, 0, 45, 71, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 235, 0, 29, 44, 0, 0, 11, 43,
	47, 79, 0, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 170,
	290, 98, 0, 86, 0, 0, 0, 0, 0, 95,
	100, 0, 26, 0, 0, 68, 0, 0, 49, 97,
	0, 0, 0, 0, 46, 0, 0, 81, 0, 0,
	63, 96, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 64, 0, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 61, 65, 0, 66, 0, 0,
	36, 98, 0, 0, 0, 0, 62, 0, 0, 0,
	100, 0, 172, 0, 15, 0, 13, 0, 0, 97,
	86, 0, 76, 0, 0, 0, 95, 81, 0, 0,
	0, 96, 0, 0, 272, 0, 34, 99, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 38, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 502, 78,
	86, 0, 0, 0, 0, 14, 95, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 77, 0, 0, 97, 99, 0, 0,
	0, 0, 0, 0, 81, 0, 0, 637, 96, 0,
	79, 0, 0, 37, 35, 87, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 98, 78,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 86, 0, 0,
	0, 0, 0, 95, 81, 0, 0, 0, 96, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 98, 78, 86, 0, 0,
	0, 0, 0, 95, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 99, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 96, 0, 79, 0, 0,
	583, 0, 87, 88, 89, 90, 91, 92, 93, 94,
	85, 80, 82, 83, 84, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 86, 0, 0, 0,
	0, 0, 95, 97, 0, 0, 0, 0, 0, 0,
	0, 81, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 99, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 581, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 0, 78, 98, 0, 86, 0, 0, 0,
	0, 0, 95, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	81, 99, 0, 0, 96, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 79, 578, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 94, 85, 80, 82,
	83, 84, 0, 78, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 86, 0, 0, 0, 0,
	0, 95, 97, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 96, 0, 0, 0, 0, 0,
	99, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 475, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 0, 78, 98, 0, 86, 444, 0, 0, 0,
	0, 95, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 81,
	99, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 79, 0, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 94, 85, 80, 82, 83,
	84, 0, 78, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 86, 0, 0, 0, 0, 0, 95, 81,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 99,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 79, 0, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	269, 78, 0, 0, 0, 351, 0, 0, 0, 0,
	98, 0, 86, 0, 0, 0, 0, 0, 95, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 99,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 0, 79, 0, 0, 0, 0, 87, 88, 89,
	90, 91, 92, 93, 94, 85, 80, 82, 83, 84,
	268, 78, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 86, 0, 0, 0, 0, 0, 95, 97, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	96, 0, 0, 0, 0, 0, 99, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 0, 78, 98,
	0, 86, 0, 0, 0, 0, 0, 95, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 81, 99, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 79,
	0, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 0, 78, 98,
	0, 0, 0, 0, 0, 67, 70, 0, 100, 0,
	0, 0, 0, 0, 86, 0, 0, 97, 56, 0,
	95, 0, 0, 0, 0, 81, 0, 0, 0, 96,
	0, 127, 0, 0, 0, 99, 87, 0, 0, 0,
	171, 0, 0, 69, 0, 0, 0, 12, 79, 45,
	71, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 0, 78, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 29, 44,
	97, 0, 11, 43, 47, 99, 0, 0, 81, 0,
	0, 0, 96, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 170, 88, 89, 90, 91, 92, 93,
	94, 85, 80, 82, 83, 84, 26, 78, 0, 68,
	0, 0, 49, 0, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 48, 25, 0, 52, 53, 54, 59, 99, 65,
	0, 66, 67, 70, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 56, 172, 88, 89, 90,
	91, 92, 93, 94, 85, 80, 82, 83, 84, 0,
	78, 0, 0, 238, 0, 0, 0, 0, 0, 0,
	69, 0, 0, 0, 12, 0, 45, 71, 0, 0,
	0, 0, 0, 0, 67, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 70, 56, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 0, 0, 29, 44, 0, 0, 11,
	43, 47, 69, 0, 0, 0, 12, 0, 45, 71,
	0, 0, 0, 69, 0, 0, 0, 12, 0, 45,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 26, 0, 0, 68, 0, 0, 49,
	100, 0, 0, 0, 0, 46, 0, 29, 44, 97,
	0, 11, 43, 47, 0, 0, 0, 81, 29, 44,
	0, 96, 11, 43, 47, 0, 0, 0, 48, 25,
	0, 52, 53, 54, 59, 0, 65, 0, 66, 0,
	0, 0, 0, 0, 0, 26, 0, 0, 68, 0,
	0, 49, 0, 239, 0, 0, 26, 46, 0, 68,
	0, 0, 49, 0, 0, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 25, 0, 52, 53, 54, 59, 99, 65, 0,
	66, 48, 25, 0, 52, 53, 54, 59, 0, 65,
	79, 66, 534, 0, 0, 172, 88, 89, 90, 91,
	92, 93, 94, 85, 80, 82, 83, 84, 63, 78,
	0, 67, 70, 0, 0, 0, 0, 0, 95, 0,
	0, 64, 0, 0, 56, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 36, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 69,
	0, 0, 15, 12, 13, 45, 71, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 34, 0, 67, 70, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 56,
	0, 0, 0, 38, 29, 44, 81, 0, 11, 43,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 14, 69, 0, 0, 0, 12, 0,
	45, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 26, 0, 0, 68, 67, 70, 49, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 56,
	0, 37, 35, 0, 0, 0, 0, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 99, 48, 25, 0,
	52, 53, 54, 59, 69, 65, 0, 66, 12, 79,
	45, 71, 0, 0, 0, 76, 0, 0, 91, 92,
	93, 94, 85, 80, 82, 83, 84, 26, 78, 0,
	68, 0, 0, 49, 0, 0, 0, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	44, 0, 0, 11, 43, 47, 67, 70, 0, 0,
	0, 0, 48, 25, 0, 52, 53, 54, 59, 56,
	65, 0, 66, 400, 0, 67, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 26, 56, 0,
	68, 0, 0, 49, 69, 0, 0, 0, 12, 46,
	45, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 12, 0, 45,
	71, 0, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 0, 66, 0, 0, 0, 0, 0, 0, 29,
	44, 67, 70, 11, 43, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 56, 0, 0, 0, 29, 44,
	0, 0, 11, 43, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 69,
	68, 0, 0, 49, 0, 45, 71, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 68,
	0, 0, 49, 0, 0, 127, 0, 0, 46, 0,
	0, 0, 48, 25, 0, 52, 53, 54, 59, 0,
	65, 0, 66, 0, 29, 44, 0, 0, 0, 43,
	47, 48, 25, 0, 52, 53, 54, 59, 0, 65,
	0, 66, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 68, 0, 0, 49, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 48, 25, 0,
	52, 53, 54, 59, 0, 65, 0, 66,
}
var yyPact = []int{

	2473, -1000, -1000, 1994, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2707, 2707, 1235, 1235, 22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2707,
	-1000, -1000, -1000, 341, 414, 411, 450, 87, 409, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 70, 2688, -1000, -1000, 2598,
	-1000, 319, 318, 435, 434, 181, 2707, 84, 84, 84,
	2707, 2707, -1000, -1000, 370, 449, 57, 1093, 21, 2707,
	2707, 2707, 2707, 2707, 2707, 2707, 2707, 2707, 2707, 2707,
	2707, 2707, 2707, 2707, 2707, 2773, 242, 2707, 2707, 2707,
	816, 2286, 44, -1000, -1000, -1000, -69, 328, 407, 397,
	345, -1000, 518, 87, 87, 87, 139, -34, 234, -1000,
	87, 2224, 487, -1000, -1000, 1934, 224, 2707, 46, 1994,
	-1000, 429, 81, 425, 87, 87, 293, 11, -4, -1000,
	-35, 1, -6, 1994, 14, -1000, 212, -1000, 14, 14,
	1865, 1805, 100, -1000, 88, 370, -1000, 398, -1000, -1000,
	-125, -36, -42, 261, -1000, -32, 2057, 2276, 2707, -1000,
	-1000, -1000, -1000, 1017, -1000, -1000, 2707, 890, -78, -78,
	-69, -69, -69, 585, 2286, 2067, 2475, 2475, 2475, 145,
	145, 145, 145, 542, -1000, 2773, 2707, 2707, 2707, 383,
	44, 44, -1000, 847, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 295, 353, 2707, 2707, -1000, 261, -1000, 261,
	-1000, 261, 2707, 68, 60, 139, 163, -1000, -1000, 303,
	85, -1000, -1000, -1000, 88, -1000, 135, 43, 2707, 42,
	-1000, 224, 2707, -1000, 2707, 1728, -1000, 81, 283, -1000,
	277, -123, -1000, -59, -124, 87, -1000, 181, 2707, -1000,
	2707, 485, 84, 2707, 2707, 2707, 482, 481, 84, 84,
	399, -1000, 2707, -30, -1000, -104, 100, 254, -1000, 235,
	234, 83, 85, 85, 38, 2276, -32, 2707, -32, 662,
	-40, -1000, 859, -1000, 2538, 2773, 9, 2707, 2773, 2773,
	2773, 2773, 2773, 2773, 508, 383, 44, 44, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1994, 1994, -1000, -1000, -1000, -9, -1000, 826, 125,
	271, 125, 271, 100, 116, 100, 83, 83, 393, 59,
	-1000, 234, -1000, -1000, 56, -1000, 1668, -1000, -1000, 1599,
	1994, 2707, 275, -1000, 87, 87, 81, 85, 81, 55,
	-1000, 1994, 1994, -1000, -1000, 1994, 1994, 1994, -1000, -1000,
	-20, -20, 192, -1000, 517, -1000, 88, 1994, 88, 2707,
	399, 111, 111, 2707, -1000, -1000, -1000, -1000, 139, -73,
	-1000, -125, -125, 234, -1000, 662, -1000, -1000, -1000, -1000,
	-1000, 1539, 550, -1000, -1000, 2707, 696, -116, -116, -70,
	-70, -70, -26, 2773, 2707, -1000, -1000, -1000, -1000, -7,
	-1000, 54, -17, -11, 401, 2707, -7, -17, 353, 100,
	353, 353, -24, -1000, -77, -27, -1000, 8, 2707, 81,
	-1000, 272, 261, -1000, 2707, 1994, 87, 50, 134, 134,
	-1000, 134, 81, 476, 2707, 468, -1000, 2707, -30, -1000,
	1994, -1000, -1000, -125, -71, -72, -1000, 662, -1000, 76,
	2707, 234, 234, -1000, -1000, -1000, 619, -1000, 2287, 550,
	-1000, -1000, 125, -1000, 2057, 2707, 37, 132, 129, -31,
	1994, -1000, 36, 196, 353, 196, 196, 83, 2707, 83,
	-1000, -1000, 84, 1994, -38, -1000, 134, 252, 33, 1994,
	134, 2707, -1000, -1000, 218, -1000, 202, -39, -1000, -1000,
	1994, -1000, 28, 234, 85, 85, -1000, -1000, -1000, 1470,
	139, 139, -1000, -1000, -1000, 1410, -1000, -1000, -32, 2707,
	1333, 261, 2707, 29, 128, 261, -1000, 196, -1000, -1000,
	-1000, 1283, -1000, -48, -1000, 189, -1000, 81, -1000, 115,
	-1000, 400, 234, 96, -50, -1000, 1994, -1000, -1000, -1000,
	152, 134, 81, 443, -1000, 246, -125, -125, -1000, -1000,
	-1000, -1000, 1994, 2707, 196, 1994, -1000, 10, 196, -1000,
	-1000, 463, 84, 83, 83, -1000, 353, 372, -1000, 260,
	-1000, -1000, 2707, 221, 2707, 81, -1000, -1000, -1000, -1000,
	2707, -1000, 211, 234, 234, 1206, -1000, -1000, -1000, -1000,
	-1000, -1000, -73, -1000, 196, 177, 344, 252, 1994, 102,
	515, -1000, -1000, 1994, 385, 246, 246, -1000, -1000, 259,
	176, 115, 134, 2707, 2707, 2707, -1000, -1000, 163, 100,
	421, 353, 96, -1000, 1994, 1994, 113, 116, 100, 112,
	-1000, 2707, 196, -1000, -1000, 322, -1000, 100, -1000, -1000,
	309, -1000, 1146, -1000, 172, 320, -1000, 317, -1000, 498,
	167, 165, 100, 418, 417, 112, 2707, 2707, -1000, -1000,
	-1000,
}
var yyPgo = []int{

	0, 713, 712, 542, 711, 708, 53, 707, 706, 0,
	55, 66, 38, 344, 49, 44, 56, 24, 22, 16,
	705, 704, 700, 694, 54, 326, 692, 685, 683, 52,
	61, 300, 25, 681, 680, 678, 677, 48, 673, 79,
	671, 670, 668, 475, 656, 45, 42, 655, 653, 23,
	50, 64, 40, 31, 650, 15, 649, 647, 28, 278,
	643, 6, 642, 43, 640, 639, 32, 638, 635, 51,
	35, 634, 46, 631, 624, 41, 623, 345, 9, 62,
	622, 621, 616, 539, 615, 614, 612, 610, 608, 607,
	604, 602, 601, 600, 598, 597, 596, 595, 591, 588,
	395, 34, 47, 20, 37, 585, 582, 4, 27, 581,
	18, 10, 33, 580, 8, 29, 577, 575, 26, 21,
	569, 568, 3, 2, 5, 19, 567, 564, 36, 561,
	560, 11, 559, 7, 556, 14, 550, 548, 547, 39,
	545, 17, 541, 59, 538,
}
var yyR1 = []int{

	0, 138, 138, 83, 83, 83, 83, 83, 83, 84,
	85, 86, 87, 88, 88, 88, 88, 88, 89, 95,
	95, 95, 95, 37, 37, 37, 38, 38, 38, 38,
	38, 38, 38, 39, 39, 41, 40, 72, 71, 71,
	71, 71, 71, 139, 139, 70, 70, 69, 69, 69,
	18, 18, 17, 17, 16, 44, 44, 43, 42, 42,
	42, 42, 42, 140, 140, 45, 45, 45, 47, 46,
	46, 46, 51, 52, 50, 50, 53, 53, 53, 54,
	141, 141, 56, 57, 57, 58, 48, 48, 48, 142,
	142, 55, 59, 59, 60, 15, 15, 14, 61, 61,
	62, 63, 63, 64, 64, 12, 12, 65, 65, 66,
	67, 67, 68, 74, 74, 73, 76, 76, 75, 82,
	82, 81, 81, 78, 78, 77, 80, 80, 79, 90,
	90, 100, 100, 143, 143, 143, 144, 144, 102, 102,
	101, 107, 107, 106, 105, 105, 103, 104, 104, 91,
	91, 92, 93, 93, 93, 111, 113, 113, 112, 118,
	118, 117, 109, 109, 108, 108, 19, 110, 32, 32,
	114, 116, 116, 115, 94, 94, 119, 119, 119, 119,
	120, 120, 120, 124, 124, 121, 121, 121, 122, 123,
	96, 96, 126, 126, 125, 128, 128, 129, 129, 131,
	131, 130, 130, 133, 133, 132, 137, 137, 135, 136,
	136, 97, 97, 98, 134, 134, 99, 127, 127, 49,
	49, 49, 49, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 3, 8, 8,
	7, 7, 6, 4, 13, 13, 5, 5, 5, 20,
	21, 21, 22, 25, 25, 23, 24, 24, 33, 33,
	33, 34, 26, 26, 27, 27, 27, 30, 30, 29,
	29, 31, 28, 28, 35, 36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 4, 1, 3, 4, 3,
	4, 3, 4, 1, 1, 5, 5, 2, 1, 2,
	2, 3, 4, 1, 1, 1, 3, 1, 3, 2,
	0, 1, 1, 2, 1, 0, 1, 2, 1, 1,
	4, 4, 5, 1, 1, 4, 6, 6, 4, 4,
	6, 6, 1, 1, 0, 2, 0, 1, 1, 4,
	0, 1, 5, 1, 3, 2, 0, 1, 2, 0,
	1, 4, 0, 1, 2, 1, 3, 3, 0, 1,
	2, 0, 1, 5, 1, 1, 3, 0, 1, 2,
	0, 1, 2, 0, 1, 3, 1, 3, 2, 0,
	1, 1, 1, 0, 1, 2, 0, 1, 2, 6,
	9, 4, 2, 0, 5, 6, 1, 2, 1, 3,
	6, 0, 1, 2, 1, 2, 2, 0, 3, 6,
	9, 7, 8, 7, 7, 2, 1, 3, 4, 0,
	1, 4, 1, 3, 3, 3, 1, 1, 0, 2,
	2, 1, 3, 2, 10, 13, 0, 6, 6, 6,
	0, 6, 6, 0, 6, 2, 3, 2, 1, 2,
	8, 12, 0, 1, 1, 1, 3, 0, 3, 0,
	1, 2, 2, 0, 1, 2, 1, 3, 1, 0,
	2, 6, 6, 7, 0, 3, 8, 1, 3, 1,
	3, 3, 4, 1, 3, 3, 5, 5, 4, 5,
	6, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 2, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 5, 5, 4,
	5, 6, 3, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 3, 3, 3, 0, 1, 1, 1, 1, 3,
	1, 1, 3, 4, 5, 2, 0, 2, 4, 5,
	4, 1, 1, 1, 4, 4, 4, 1, 3, 3,
	3, 2, 6, 6, 3, 1, 1,
}
var yyChk = []int{

	-1000, -138, -83, -9, -84, -85, -86, -87, -88, -89,
	-10, 95, 50, 51, 110, 49, -37, -90, -91, -92,
	-93, -94, -95, -1, -2, 165, 129, -5, -33, 91,
	-20, -26, -35, -38, 71, 149, 35, 148, 90, -96,
	-97, -98, -99, 96, 92, 52, 141, 97, 164, 135,
	-3, -4, 167, 168, 169, -34, 21, -27, -28, 170,
	-39, 29, 41, 5, 18, 172, 174, 8, 132, 46,
	9, 53, -41, -40, -43, -72, 57, 128, 193, 174,
	188, 91, 189, 190, 191, 187, 7, 102, 180, 181,
	182, 183, 184, 185, 186, 13, 95, 83, 65, 161,
	74, -9, -9, -83, -83, -3, -9, -74, 144, 72,
	47, -73, 103, 73, 73, 57, -100, -51, -52, 165,
	73, 170, -21, -22, -23, -9, -25, 157, -36, -9,
	-37, 111, 68, 111, 68, 68, 68, -8, -7, -6,
	135, -13, -12, -9, -30, -29, -19, 165, -30, -30,
	-9, -9, -59, -60, 81, -44, -43, -42, -45, -47,
	-52, -51, 136, 170, -71, -70, 39, 4, -139, -69,
	116, 43, 189, -9, 165, 166, 174, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -11, -10, 13, 83, 65, 161, -9,
	-9, -9, 96, 95, 92, 154, 15, 97, 135, 9,
	98, 14, -77, -79, 84, 99, -39, 4, -39, 4,
	-39, 4, 19, -100, -100, -100, -53, -54, -56, 150,
	178, -18, -17, -16, 10, 165, -100, -13, 39, 189,
	45, -25, 157, -24, 44, -9, 171, 68, -125, 165,
	68, -128, -52, -51, -128, 100, 173, 177, 178, 175,
	177, -31, 177, 126, 65, 161, -31, -31, 55, 55,
	-61, -62, 158, -15, -14, -16, -59, -48, 70, 80,
	-50, 193, 178, 178, -37, 177, -70, -139, -70, -9,
	193, -18, -9, 175, 178, 7, 193, 174, 188, 91,
	189, 190, 191, 187, -11, -9, -9, -9, 96, 92,
	154, 15, 97, 135, 9, 98, 14, -80, -79, -78,
	-77, -9, -9, -39, -39, -39, -76, -75, -9, -143,
	170, -143, 170, -53, -111, -114, 130, 147, -141, 68,
	111, -52, 165, -16, 152, 171, -9, 171, -24, -9,
	-9, 137, -126, -125, 100, 100, 193, 178, 193, -128,
	-6, -9, -9, 45, -29, -9, -9, -9, 45, 45,
	-30, -30, -63, -64, 60, -66, 82, -9, 177, 180,
	-61, 75, 94, -140, 146, 54, -142, 104, -18, -49,
	165, -52, -52, 171, -69, -9, -18, 189, 175, 176,
	175, -9, -11, 165, 166, 174, -9, -11, -11, -11,
	-11, -11, -11, 7, 177, -82, -81, 11, 37, -102,
	-101, 155, -103, 76, 111, -144, -102, -103, -61, -114,
	-61, -61, -113, -112, -49, -116, -115, -49, 77, 170,
	-18, -45, 170, 171, 137, -9, 100, -128, -128, -125,
	-52, -125, 170, -32, 157, -32, -72, 19, -15, -14,
	-9, -63, -46, -52, -51, 136, -46, -9, -53, 193,
	174, -50, -50, -18, -18, 175, -9, 175, 178, -11,
	-75, -107, 177, -106, 121, 170, -104, 177, 177, 76,
	-9, -107, -104, -78, -61, -78, -78, 177, 180, 177,
	-118, -117, 55, -9, -57, -58, -125, 100, -37, -9,
	-128, 170, -131, -130, 152, -131, -131, -127, -125, 45,
	-9, 45, -12, -50, 178, 178, -18, 165, 166, -9,
	-18, -18, 175, 176, 175, -9, -101, -105, -70, -139,
	-9, 171, 153, 153, 177, 171, -107, -78, -107, -107,
	-112, -9, -115, -109, -108, -19, 171, 177, -131, -103,
	76, 111, 171, -131, -137, -135, -9, 156, 61, -134,
	119, 171, 177, -65, -66, -18, -52, -52, 175, -53,
	-53, 175, -9, 177, -37, -9, 171, 153, -37, -107,
	-118, -32, 177, 65, 161, -58, -119, 157, 76, -17,
	-133, -132, 160, 171, 177, 138, -131, -125, -67, -68,
	62, -55, 100, -50, -50, -9, -107, 171, -107, 45,
	-108, -110, -49, -110, -78, 88, 95, 100, -9, -129,
	106, -135, -125, -9, -141, -18, -18, 171, -107, 137,
	88, -103, -136, 158, 19, 77, -55, -55, 148, 35,
	137, -119, -131, -135, -9, -9, -121, -111, -114, -122,
	-61, 71, -78, -133, -120, 157, -61, -114, -61, -124,
	157, -123, -9, -107, 88, 95, -61, 95, -61, 137,
	88, 88, 35, 137, 137, -122, 71, 71, -124, -123,
	-123,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	223, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 274, 275, -2, 277, 278, 279, 0,
	281, 282, 283, 113, 0, 0, 0, 0, 0, 19,
	20, 21, 22, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 316, 317, 318, 0, 0, 332, 333, 0,
	26, 0, 0, 0, 0, 308, 314, 0, 0, 0,
	0, 0, 33, 34, 92, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 273, 9, 10, 11, 280, 23, 0, 0,
	0, 114, 0, 0, 0, 0, 76, 0, 50, -2,
	0, 314, 0, 320, 321, 0, 326, 0, 0, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 309, 310,
	0, 0, 315, 105, 0, 337, 0, 166, 0, 0,
	0, 0, 98, 93, 0, 92, 56, -2, 58, 59,
	74, 0, 0, 0, 37, 38, 0, 0, 0, 45,
	43, 44, 47, 50, 224, 225, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, -2, -2, -2, -2,
	-2, -2, -2, 0, 284, 0, 0, 0, 0, -2,
	-2, -2, 255, 0, 257, 259, 261, 263, 265, 267,
	269, 271, 126, 123, 0, 0, 27, 0, 29, 0,
	31, 0, 0, 133, 133, 76, 0, 77, 78, 80,
	0, 132, 51, 52, 0, 54, 0, 0, 0, 0,
	319, 326, 0, 325, 0, 0, 344, 192, 0, 194,
	0, 0, 195, 0, 0, 0, 307, 0, 0, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 99, 0, 94, 95, 0, 98, 0, 87, 89,
	50, 0, 0, 0, 0, 0, 39, 0, 40, 50,
	0, 49, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, -2, -2, 256, 258,
	260, 262, 264, 266, 268, 270, 272, 24, 127, 25,
	124, 125, 128, 28, 30, 32, 115, 116, 119, 0,
	0, 0, 0, 98, 98, 98, 0, 0, 0, 0,
	81, 50, 73, 53, 0, 328, 0, 330, 322, 0,
	327, 0, 0, 193, 0, 0, 0, 0, 0, 0,
	311, 312, 106, 334, 338, 341, 339, 340, 335, 336,
	168, 168, 0, 102, 0, 104, 0, 100, 0, 0,
	101, 0, 0, 0, 63, 64, 88, 90, 76, 75,
	219, 74, 74, 50, 46, 50, 41, 48, 226, 227,
	229, 0, 247, 285, 286, 0, 0, 292, 293, 294,
	295, 296, 297, 0, 0, 118, 120, 121, 122, 141,
	138, 0, 147, 136, 0, 0, 141, 147, 123, 98,
	123, 123, 155, 156, 0, 170, 171, 159, 0, 0,
	131, 0, 0, 329, 0, 323, 0, 0, 199, 199,
	196, 199, 0, 0, 0, 0, 35, 0, 109, 96,
	97, 36, 60, 74, 0, 0, 61, 50, 65, 0,
	0, 50, 50, 68, 42, 230, 0, 289, 0, 248,
	117, 129, 0, 142, 0, 0, 0, 0, 0, 137,
	146, 149, 0, 141, 123, 141, 141, 0, 0, 0,
	173, 160, 0, 79, 0, 83, 199, 0, 0, 324,
	199, 0, 211, 200, 0, 212, 214, 0, 217, 342,
	169, 343, 107, 50, 0, 0, 62, 220, 221, 0,
	76, 76, 287, 288, 290, 0, 139, 143, 144, 0,
	0, 0, 0, 0, 0, 0, 151, 141, 153, 154,
	157, 159, 172, 168, 162, 0, 82, 0, 85, 176,
	136, 0, 0, 203, 0, 206, 208, 201, 202, 213,
	0, 199, 0, 110, 108, 0, 74, 74, 222, 66,
	67, 291, 145, 0, 141, 148, 134, 0, 141, 152,
	158, 0, 0, 0, 0, 84, 123, 0, 137, 0,
	190, 204, 0, 197, 0, 0, 216, 218, 103, 111,
	0, 69, 80, 50, 50, 0, 130, 135, 150, 161,
	163, 164, 167, 165, 141, 0, 0, 0, 205, 209,
	0, 207, 215, 112, 0, 0, 0, 140, 174, 0,
	0, 176, 199, 0, 0, 0, 70, 71, 0, 98,
	0, 123, 203, 210, 198, 91, 180, 98, 98, 183,
	188, 0, 141, 191, 177, 0, 185, 98, 187, 178,
	0, 179, 98, 175, 0, 0, 186, 0, 189, 0,
	0, 0, 98, 0, 0, 183, 0, 0, 181, 182,
	184,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:369
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:374
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:395
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:402
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:409
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:416
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		yyVAL.statement = yyS[yypt-0].statement
	case 23:
		//line n1ql.y:449
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:453
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:457
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 26:
		//line n1ql.y:463
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 27:
		//line n1ql.y:468
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:473
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:478
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:483
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:488
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		//line n1ql.y:493
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 35:
		//line n1ql.y:506
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 36:
		//line n1ql.y:513
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 37:
		//line n1ql.y:528
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 38:
		//line n1ql.y:535
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:540
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:545
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 41:
		//line n1ql.y:550
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 42:
		//line n1ql.y:555
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 45:
		//line n1ql.y:568
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 46:
		//line n1ql.y:573
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 47:
		//line n1ql.y:580
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 48:
		//line n1ql.y:585
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 49:
		//line n1ql.y:590
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 50:
		//line n1ql.y:597
		{
			yyVAL.s = ""
		}
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		yyVAL.s = yyS[yypt-0].s
	case 53:
		//line n1ql.y:608
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 54:
		yyVAL.s = yyS[yypt-0].s
	case 55:
		//line n1ql.y:626
		{
			yyVAL.fromTerm = nil
		}
	case 56:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 57:
		//line n1ql.y:635
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 58:
		//line n1ql.y:642
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 59:
		//line n1ql.y:647
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 60:
		//line n1ql.y:652
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 61:
		//line n1ql.y:657
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 62:
		//line n1ql.y:662
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 65:
		//line n1ql.y:675
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 66:
		//line n1ql.y:680
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 67:
		//line n1ql.y:685
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].use.Keys(), yyS[yypt-0].use.Indexes())
		}
	case 68:
		//line n1ql.y:692
		{
			if yyS[yypt-0].s == "" {
				yylex.Error("Subquery in FROM clause must have an alias.")
			} else {
				yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
			}
		}
	case 69:
		//line n1ql.y:703
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 70:
		//line n1ql.y:708
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 71:
		//line n1ql.y:713
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr, nil)
		}
	case 72:
		yyVAL.s = yyS[yypt-0].s
	case 73:
		yyVAL.s = yyS[yypt-0].s
	case 74:
		//line n1ql.y:728
		{
			yyVAL.path = nil
		}
	case 75:
		//line n1ql.y:733
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 76:
		//line n1ql.y:740
		{
			yyVAL.use = algebra.EMPTY_USE
		}
	case 77:
		//line n1ql.y:745
		{
			yyVAL.use = algebra.NewUse(yyS[yypt-0].expr, nil)
		}
	case 78:
		//line n1ql.y:750
		{
			yyVAL.use = algebra.NewUse(nil, yyS[yypt-0].indexRefs)
		}
	case 79:
		//line n1ql.y:757
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 80:
		//line n1ql.y:764
		{
		}
	case 82:
		//line n1ql.y:772
		{
			yyVAL.indexRefs = yyS[yypt-1].indexRefs
		}
	case 83:
		//line n1ql.y:779
		{
			yyVAL.indexRefs = algebra.IndexRefs{yyS[yypt-0].indexRef}
		}
	case 84:
		//line n1ql.y:784
		{
			yyVAL.indexRefs = append(yyS[yypt-2].indexRefs, yyS[yypt-0].indexRef)
		}
	case 85:
		//line n1ql.y:791
		{
			yyVAL.indexRef = algebra.NewIndexRef(yyS[yypt-1].s, yyS[yypt-0].indexType)
		}
	case 86:
		//line n1ql.y:797
		{
			yyVAL.b = false
		}
	case 87:
		//line n1ql.y:802
		{
			yyVAL.b = false
		}
	case 88:
		//line n1ql.y:807
		{
			yyVAL.b = true
		}
	case 91:
		//line n1ql.y:820
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 92:
		//line n1ql.y:834
		{
			yyVAL.bindings = nil
		}
	case 93:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 94:
		//line n1ql.y:843
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 95:
		//line n1ql.y:850
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 96:
		//line n1ql.y:855
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 97:
		//line n1ql.y:862
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 98:
		//line n1ql.y:876
		{
			yyVAL.expr = nil
		}
	case 99:
		yyVAL.expr = yyS[yypt-0].expr
	case 100:
		//line n1ql.y:885
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 101:
		//line n1ql.y:899
		{
			yyVAL.group = nil
		}
	case 102:
		yyVAL.group = yyS[yypt-0].group
	case 103:
		//line n1ql.y:908
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 104:
		//line n1ql.y:913
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 105:
		//line n1ql.y:920
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 106:
		//line n1ql.y:925
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 107:
		//line n1ql.y:932
		{
			yyVAL.bindings = nil
		}
	case 108:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 109:
		//line n1ql.y:941
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 110:
		//line n1ql.y:948
		{
			yyVAL.expr = nil
		}
	case 111:
		yyVAL.expr = yyS[yypt-0].expr
	case 112:
		//line n1ql.y:957
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 113:
		//line n1ql.y:971
		{
			yyVAL.order = nil
		}
	case 114:
		yyVAL.order = yyS[yypt-0].order
	case 115:
		//line n1ql.y:980
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 116:
		//line n1ql.y:987
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 117:
		//line n1ql.y:992
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 118:
		//line n1ql.y:999
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 119:
		//line n1ql.y:1006
		{
			yyVAL.b = false
		}
	case 120:
		yyVAL.b = yyS[yypt-0].b
	case 121:
		//line n1ql.y:1015
		{
			yyVAL.b = false
		}
	case 122:
		//line n1ql.y:1020
		{
			yyVAL.b = true
		}
	case 123:
		//line n1ql.y:1034
		{
			yyVAL.expr = nil
		}
	case 124:
		yyVAL.expr = yyS[yypt-0].expr
	case 125:
		//line n1ql.y:1043
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 126:
		//line n1ql.y:1057
		{
			yyVAL.expr = nil
		}
	case 127:
		yyVAL.expr = yyS[yypt-0].expr
	case 128:
		//line n1ql.y:1066
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 129:
		//line n1ql.y:1080
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 130:
		//line n1ql.y:1085
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 131:
		//line n1ql.y:1092
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 132:
		//line n1ql.y:1097
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 138:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 139:
		//line n1ql.y:1120
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 140:
		//line n1ql.y:1127
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 141:
		//line n1ql.y:1134
		{
			yyVAL.projection = nil
		}
	case 142:
		yyVAL.projection = yyS[yypt-0].projection
	case 143:
		//line n1ql.y:1143
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 144:
		//line n1ql.y:1150
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 145:
		//line n1ql.y:1155
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 146:
		//line n1ql.y:1162
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 147:
		//line n1ql.y:1169
		{
			yyVAL.expr = nil
		}
	case 148:
		//line n1ql.y:1174
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 149:
		//line n1ql.y:1188
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 150:
		//line n1ql.y:1193
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 151:
		//line n1ql.y:1207
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].use.Keys(), yyS[yypt-3].use.Indexes(), yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 152:
		//line n1ql.y:1221
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].use.Keys(), yyS[yypt-5].use.Indexes(), yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 153:
		//line n1ql.y:1226
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].use.Keys(), yyS[yypt-4].use.Indexes(), yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 154:
		//line n1ql.y:1231
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].use.Keys(), yyS[yypt-4].use.Indexes(), nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 155:
		//line n1ql.y:1238
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 156:
		//line n1ql.y:1245
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 157:
		//line n1ql.y:1250
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 158:
		//line n1ql.y:1257
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 159:
		//line n1ql.y:1264
		{
			yyVAL.updateFor = nil
		}
	case 160:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 161:
		//line n1ql.y:1273
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 162:
		//line n1ql.y:1280
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 163:
		//line n1ql.y:1285
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 164:
		//line n1ql.y:1292
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 165:
		//line n1ql.y:1297
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 166:
		yyVAL.s = yyS[yypt-0].s
	case 167:
		//line n1ql.y:1308
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 168:
		//line n1ql.y:1315
		{
			yyVAL.expr = nil
		}
	case 169:
		//line n1ql.y:1320
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 170:
		//line n1ql.y:1327
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 171:
		//line n1ql.y:1334
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 172:
		//line n1ql.y:1339
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 173:
		//line n1ql.y:1346
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 174:
		//line n1ql.y:1360
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 175:
		//line n1ql.y:1366
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 176:
		//line n1ql.y:1374
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 177:
		//line n1ql.y:1379
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 178:
		//line n1ql.y:1384
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 179:
		//line n1ql.y:1389
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 180:
		//line n1ql.y:1396
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 181:
		//line n1ql.y:1401
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 182:
		//line n1ql.y:1406
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 183:
		//line n1ql.y:1413
		{
			yyVAL.mergeInsert = nil
		}
	case 184:
		//line n1ql.y:1418
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 185:
		//line n1ql.y:1425
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 186:
		//line n1ql.y:1430
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 187:
		//line n1ql.y:1435
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 188:
		//line n1ql.y:1442
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 189:
		//line n1ql.y:1449
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 190:
		//line n1ql.y:1463
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-4].s, yyS[yypt-2].keyspaceRef, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 191:
		//line n1ql.y:1468
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-9].s, yyS[yypt-7].keyspaceRef, yyS[yypt-5].exprs, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].indexType, yyS[yypt-0].val)
		}
	case 192:
		//line n1ql.y:1475
		{
			yyVAL.s = "#primary"
		}
	case 193:
		yyVAL.s = yyS[yypt-0].s
	case 194:
		yyVAL.s = yyS[yypt-0].s
	case 195:
		//line n1ql.y:1488
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 196:
		//line n1ql.y:1493
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 197:
		//line n1ql.y:1500
		{
			yyVAL.expr = nil
		}
	case 198:
		//line n1ql.y:1505
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 199:
		//line n1ql.y:1512
		{
			yyVAL.indexType = datastore.DEFAULT
		}
	case 200:
		yyVAL.indexType = yyS[yypt-0].indexType
	case 201:
		//line n1ql.y:1521
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 202:
		//line n1ql.y:1526
		{
			yyVAL.indexType = datastore.GSI
		}
	case 203:
		//line n1ql.y:1533
		{
			yyVAL.val = nil
		}
	case 204:
		yyVAL.val = yyS[yypt-0].val
	case 205:
		//line n1ql.y:1542
		{
			yyVAL.val = yyS[yypt-0].expr.Value()
			if yyVAL.val == nil {
				yylex.Error("WITH value must be static.")
			}
		}
	case 206:
		//line n1ql.y:1552
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 207:
		//line n1ql.y:1557
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 208:
		//line n1ql.y:1564
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable: %s", exp.String()))
			}

			yyVAL.expr = exp
		}
	case 209:
		//line n1ql.y:1575
		{
			yyVAL.expr = nil
		}
	case 210:
		//line n1ql.y:1580
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 211:
		//line n1ql.y:1594
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-1].keyspaceRef, "#primary", yyS[yypt-0].indexType)
		}
	case 212:
		//line n1ql.y:1599
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].indexType)
		}
	case 213:
		//line n1ql.y:1612
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-4].keyspaceRef, yyS[yypt-2].s, yyS[yypt-1].indexType, yyS[yypt-0].s)
		}
	case 214:
		//line n1ql.y:1618
		{
			yyVAL.s = ""
		}
	case 215:
		//line n1ql.y:1623
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 216:
		//line n1ql.y:1636
		{
			yyVAL.statement = algebra.NewBuildIndexes(yyS[yypt-4].keyspaceRef, yyS[yypt-0].indexType, yyS[yypt-2].ss...)
		}
	case 217:
		//line n1ql.y:1643
		{
			yyVAL.ss = []string{yyS[yypt-0].s}
		}
	case 218:
		//line n1ql.y:1648
		{
			yyVAL.ss = append(yyS[yypt-2].ss, yyS[yypt-0].s)
		}
	case 219:
		//line n1ql.y:1662
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 220:
		//line n1ql.y:1667
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 221:
		//line n1ql.y:1672
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 222:
		//line n1ql.y:1679
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 223:
		yyVAL.expr = yyS[yypt-0].expr
	case 224:
		//line n1ql.y:1696
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 225:
		//line n1ql.y:1701
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 226:
		//line n1ql.y:1708
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 227:
		//line n1ql.y:1713
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 228:
		//line n1ql.y:1720
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 229:
		//line n1ql.y:1725
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 230:
		//line n1ql.y:1730
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 231:
		//line n1ql.y:1736
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1741
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1746
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1751
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1756
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1762
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1768
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1773
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1778
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 240:
		//line n1ql.y:1784
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 241:
		//line n1ql.y:1789
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 242:
		//line n1ql.y:1794
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 243:
		//line n1ql.y:1799
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 244:
		//line n1ql.y:1804
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 245:
		//line n1ql.y:1809
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 246:
		//line n1ql.y:1814
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 247:
		//line n1ql.y:1819
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 248:
		//line n1ql.y:1824
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 249:
		//line n1ql.y:1829
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 250:
		//line n1ql.y:1834
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 251:
		//line n1ql.y:1839
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 252:
		//line n1ql.y:1844
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 253:
		//line n1ql.y:1849
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 254:
		//line n1ql.y:1854
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 255:
		//line n1ql.y:1859
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 256:
		//line n1ql.y:1864
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 257:
		//line n1ql.y:1869
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 258:
		//line n1ql.y:1874
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 259:
		//line n1ql.y:1879
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 260:
		//line n1ql.y:1884
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 261:
		//line n1ql.y:1889
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 262:
		//line n1ql.y:1894
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 263:
		//line n1ql.y:1899
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 264:
		//line n1ql.y:1904
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 265:
		//line n1ql.y:1909
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 266:
		//line n1ql.y:1914
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 267:
		//line n1ql.y:1919
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 268:
		//line n1ql.y:1924
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 269:
		//line n1ql.y:1929
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 270:
		//line n1ql.y:1934
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 271:
		//line n1ql.y:1939
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 272:
		//line n1ql.y:1944
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 273:
		//line n1ql.y:1949
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 274:
		yyVAL.expr = yyS[yypt-0].expr
	case 275:
		yyVAL.expr = yyS[yypt-0].expr
	case 276:
		//line n1ql.y:1963
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 277:
		//line n1ql.y:1969
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 278:
		yyVAL.expr = yyS[yypt-0].expr
	case 279:
		yyVAL.expr = yyS[yypt-0].expr
	case 280:
		//line n1ql.y:1981
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 281:
		yyVAL.expr = yyS[yypt-0].expr
	case 282:
		yyVAL.expr = yyS[yypt-0].expr
	case 283:
		yyVAL.expr = yyS[yypt-0].expr
	case 284:
		yyVAL.expr = yyS[yypt-0].expr
	case 285:
		//line n1ql.y:2000
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 286:
		//line n1ql.y:2005
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 287:
		//line n1ql.y:2012
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 288:
		//line n1ql.y:2017
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 289:
		//line n1ql.y:2024
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 290:
		//line n1ql.y:2029
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 291:
		//line n1ql.y:2034
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 292:
		//line n1ql.y:2040
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 293:
		//line n1ql.y:2045
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 294:
		//line n1ql.y:2050
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 295:
		//line n1ql.y:2055
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 296:
		//line n1ql.y:2060
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 297:
		//line n1ql.y:2066
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 298:
		//line n1ql.y:2080
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 299:
		//line n1ql.y:2085
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 300:
		//line n1ql.y:2090
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 301:
		//line n1ql.y:2095
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 302:
		//line n1ql.y:2100
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 303:
		//line n1ql.y:2105
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 304:
		//line n1ql.y:2110
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 305:
		yyVAL.expr = yyS[yypt-0].expr
	case 306:
		yyVAL.expr = yyS[yypt-0].expr
	case 307:
		//line n1ql.y:2130
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 308:
		//line n1ql.y:2137
		{
			yyVAL.bindings = nil
		}
	case 309:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 310:
		//line n1ql.y:2146
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 311:
		//line n1ql.y:2151
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 312:
		//line n1ql.y:2158
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 313:
		//line n1ql.y:2165
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 314:
		//line n1ql.y:2172
		{
			yyVAL.exprs = nil
		}
	case 315:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 316:
		//line n1ql.y:2188
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 317:
		//line n1ql.y:2193
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 318:
		//line n1ql.y:2198
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 319:
		//line n1ql.y:2213
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 320:
		yyVAL.expr = yyS[yypt-0].expr
	case 321:
		yyVAL.expr = yyS[yypt-0].expr
	case 322:
		//line n1ql.y:2226
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 323:
		//line n1ql.y:2233
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 324:
		//line n1ql.y:2238
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 325:
		//line n1ql.y:2246
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 326:
		//line n1ql.y:2253
		{
			yyVAL.expr = nil
		}
	case 327:
		//line n1ql.y:2258
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 328:
		//line n1ql.y:2272
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 329:
		//line n1ql.y:2291
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 330:
		//line n1ql.y:2306
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 331:
		yyVAL.s = yyS[yypt-0].s
	case 332:
		yyVAL.expr = yyS[yypt-0].expr
	case 333:
		yyVAL.expr = yyS[yypt-0].expr
	case 334:
		//line n1ql.y:2344
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 335:
		//line n1ql.y:2349
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 336:
		//line n1ql.y:2354
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 337:
		//line n1ql.y:2361
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 338:
		//line n1ql.y:2366
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 339:
		//line n1ql.y:2373
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 340:
		//line n1ql.y:2378
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 341:
		//line n1ql.y:2385
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 342:
		//line n1ql.y:2392
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 343:
		//line n1ql.y:2397
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 344:
		//line n1ql.y:2411
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 345:
		yyVAL.expr = yyS[yypt-0].expr
	case 346:
		//line n1ql.y:2420
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
