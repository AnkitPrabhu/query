//line n1ql.y:2
package n1ql

import __yyfmt__ "fmt"

//line n1ql.y:2
import "fmt"
import "strings"
import "github.com/couchbaselabs/clog"
import "github.com/couchbaselabs/query/algebra"
import "github.com/couchbaselabs/query/datastore"
import "github.com/couchbaselabs/query/expression"
import "github.com/couchbaselabs/query/value"

func logDebugGrammar(format string, v ...interface{}) {
	clog.To("PARSER", format, v...)
}

//line n1ql.y:17
type yySymType struct {
	yys int
	s   string
	n   int
	f   float64
	b   bool

	expr      expression.Expression
	exprs     expression.Expressions
	whenTerm  *expression.WhenTerm
	whenTerms expression.WhenTerms
	binding   *expression.Binding
	bindings  expression.Bindings

	node      algebra.Node
	statement algebra.Statement

	fullselect   *algebra.Select
	subresult    algebra.Subresult
	subselect    *algebra.Subselect
	fromTerm     algebra.FromTerm
	keyspaceTerm *algebra.KeyspaceTerm
	subqueryTerm *algebra.SubqueryTerm
	path         expression.Path
	group        *algebra.Group
	resultTerm   *algebra.ResultTerm
	resultTerms  algebra.ResultTerms
	projection   *algebra.Projection
	order        *algebra.Order
	sortTerm     *algebra.SortTerm
	sortTerms    algebra.SortTerms

	keyspaceRef *algebra.KeyspaceRef

	pairs        algebra.Pairs
	set          *algebra.Set
	unset        *algebra.Unset
	setTerm      *algebra.SetTerm
	setTerms     algebra.SetTerms
	unsetTerm    *algebra.UnsetTerm
	unsetTerms   algebra.UnsetTerms
	updateFor    *algebra.UpdateFor
	mergeActions *algebra.MergeActions
	mergeUpdate  *algebra.MergeUpdate
	mergeDelete  *algebra.MergeDelete
	mergeInsert  *algebra.MergeInsert

	createIndex *algebra.CreateIndex
	dropIndex   *algebra.DropIndex
	alterIndex  *algebra.AlterIndex
	indexType   datastore.IndexType
}

const ALL = 57346
const ALTER = 57347
const ANALYZE = 57348
const AND = 57349
const ANY = 57350
const ARRAY = 57351
const AS = 57352
const ASC = 57353
const BEGIN = 57354
const BETWEEN = 57355
const BINARY = 57356
const BOOLEAN = 57357
const BREAK = 57358
const BUCKET = 57359
const BY = 57360
const CALL = 57361
const CASE = 57362
const CAST = 57363
const CLUSTER = 57364
const COLLATE = 57365
const COLLECTION = 57366
const COMMIT = 57367
const CONNECT = 57368
const CONTINUE = 57369
const CREATE = 57370
const DATABASE = 57371
const DATASET = 57372
const DATASTORE = 57373
const DECLARE = 57374
const DECREMENT = 57375
const DELETE = 57376
const DERIVED = 57377
const DESC = 57378
const DESCRIBE = 57379
const DISTINCT = 57380
const DO = 57381
const DROP = 57382
const EACH = 57383
const ELEMENT = 57384
const ELSE = 57385
const END = 57386
const EVERY = 57387
const EXCEPT = 57388
const EXCLUDE = 57389
const EXECUTE = 57390
const EXISTS = 57391
const EXPLAIN = 57392
const FALSE = 57393
const FIRST = 57394
const FLATTEN = 57395
const FOR = 57396
const FROM = 57397
const FUNCTION = 57398
const GRANT = 57399
const GROUP = 57400
const GSI = 57401
const HAVING = 57402
const IF = 57403
const IN = 57404
const INCLUDE = 57405
const INCREMENT = 57406
const INDEX = 57407
const INLINE = 57408
const INNER = 57409
const INSERT = 57410
const INTERSECT = 57411
const INTO = 57412
const IS = 57413
const JOIN = 57414
const KEY = 57415
const KEYS = 57416
const KEYSPACE = 57417
const LAST = 57418
const LEFT = 57419
const LET = 57420
const LETTING = 57421
const LIKE = 57422
const LIMIT = 57423
const LSM = 57424
const MAP = 57425
const MAPPING = 57426
const MATCHED = 57427
const MATERIALIZED = 57428
const MERGE = 57429
const MINUS = 57430
const MISSING = 57431
const NAMESPACE = 57432
const NEST = 57433
const NOT = 57434
const NULL = 57435
const NUMBER = 57436
const OBJECT = 57437
const OFFSET = 57438
const ON = 57439
const OPTION = 57440
const OR = 57441
const ORDER = 57442
const OUTER = 57443
const OVER = 57444
const PARTITION = 57445
const PASSWORD = 57446
const PATH = 57447
const POOL = 57448
const PREPARE = 57449
const PRIMARY = 57450
const PRIVATE = 57451
const PRIVILEGE = 57452
const PROCEDURE = 57453
const PUBLIC = 57454
const RAW = 57455
const REALM = 57456
const REDUCE = 57457
const RENAME = 57458
const RETURN = 57459
const RETURNING = 57460
const REVOKE = 57461
const RIGHT = 57462
const ROLE = 57463
const ROLLBACK = 57464
const SATISFIES = 57465
const SCHEMA = 57466
const SELECT = 57467
const SELF = 57468
const SET = 57469
const SHOW = 57470
const SOME = 57471
const START = 57472
const STATISTICS = 57473
const STRING = 57474
const SYSTEM = 57475
const THEN = 57476
const TO = 57477
const TRANSACTION = 57478
const TRIGGER = 57479
const TRUE = 57480
const TRUNCATE = 57481
const UNDER = 57482
const UNION = 57483
const UNIQUE = 57484
const UNNEST = 57485
const UNSET = 57486
const UPDATE = 57487
const UPSERT = 57488
const USE = 57489
const USER = 57490
const USING = 57491
const VALUE = 57492
const VALUED = 57493
const VALUES = 57494
const VIEW = 57495
const WHEN = 57496
const WHERE = 57497
const WHILE = 57498
const WITH = 57499
const WITHIN = 57500
const WORK = 57501
const XOR = 57502
const INT = 57503
const IDENTIFIER = 57504
const IDENTIFIER_ICASE = 57505
const NAMED_PARAM = 57506
const POSITIONAL_PARAM = 57507
const NEXT_PARAM = 57508
const LPAREN = 57509
const RPAREN = 57510
const LBRACE = 57511
const RBRACE = 57512
const LBRACKET = 57513
const RBRACKET = 57514
const RBRACKET_ICASE = 57515
const COMMA = 57516
const COLON = 57517
const INTERESECT = 57518
const EQ = 57519
const DEQ = 57520
const NE = 57521
const LT = 57522
const GT = 57523
const LE = 57524
const GE = 57525
const CONCAT = 57526
const PLUS = 57527
const STAR = 57528
const DIV = 57529
const MOD = 57530
const UMINUS = 57531
const DOT = 57532

var yyToknames = []string{
	"ALL",
	"ALTER",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"BEGIN",
	"BETWEEN",
	"BINARY",
	"BOOLEAN",
	"BREAK",
	"BUCKET",
	"BY",
	"CALL",
	"CASE",
	"CAST",
	"CLUSTER",
	"COLLATE",
	"COLLECTION",
	"COMMIT",
	"CONNECT",
	"CONTINUE",
	"CREATE",
	"DATABASE",
	"DATASET",
	"DATASTORE",
	"DECLARE",
	"DECREMENT",
	"DELETE",
	"DERIVED",
	"DESC",
	"DESCRIBE",
	"DISTINCT",
	"DO",
	"DROP",
	"EACH",
	"ELEMENT",
	"ELSE",
	"END",
	"EVERY",
	"EXCEPT",
	"EXCLUDE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"FALSE",
	"FIRST",
	"FLATTEN",
	"FOR",
	"FROM",
	"FUNCTION",
	"GRANT",
	"GROUP",
	"GSI",
	"HAVING",
	"IF",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INDEX",
	"INLINE",
	"INNER",
	"INSERT",
	"INTERSECT",
	"INTO",
	"IS",
	"JOIN",
	"KEY",
	"KEYS",
	"KEYSPACE",
	"LAST",
	"LEFT",
	"LET",
	"LETTING",
	"LIKE",
	"LIMIT",
	"LSM",
	"MAP",
	"MAPPING",
	"MATCHED",
	"MATERIALIZED",
	"MERGE",
	"MINUS",
	"MISSING",
	"NAMESPACE",
	"NEST",
	"NOT",
	"NULL",
	"NUMBER",
	"OBJECT",
	"OFFSET",
	"ON",
	"OPTION",
	"OR",
	"ORDER",
	"OUTER",
	"OVER",
	"PARTITION",
	"PASSWORD",
	"PATH",
	"POOL",
	"PREPARE",
	"PRIMARY",
	"PRIVATE",
	"PRIVILEGE",
	"PROCEDURE",
	"PUBLIC",
	"RAW",
	"REALM",
	"REDUCE",
	"RENAME",
	"RETURN",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"SATISFIES",
	"SCHEMA",
	"SELECT",
	"SELF",
	"SET",
	"SHOW",
	"SOME",
	"START",
	"STATISTICS",
	"STRING",
	"SYSTEM",
	"THEN",
	"TO",
	"TRANSACTION",
	"TRIGGER",
	"TRUE",
	"TRUNCATE",
	"UNDER",
	"UNION",
	"UNIQUE",
	"UNNEST",
	"UNSET",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USING",
	"VALUE",
	"VALUED",
	"VALUES",
	"VIEW",
	"WHEN",
	"WHERE",
	"WHILE",
	"WITH",
	"WITHIN",
	"WORK",
	"XOR",
	"INT",
	"IDENTIFIER",
	"IDENTIFIER_ICASE",
	"NAMED_PARAM",
	"POSITIONAL_PARAM",
	"NEXT_PARAM",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LBRACKET",
	"RBRACKET",
	"RBRACKET_ICASE",
	"COMMA",
	"COLON",
	"INTERESECT",
	"EQ",
	"DEQ",
	"NE",
	"LT",
	"GT",
	"LE",
	"GE",
	"CONCAT",
	"PLUS",
	"STAR",
	"DIV",
	"MOD",
	"UMINUS",
	"DOT",
}
var yyStatenames = []string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line yacctab:1
var yyExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	167, 316,
	-2, 261,
	-1, 117,
	175, 71,
	-2, 72,
	-1, 154,
	53, 80,
	72, 80,
	91, 80,
	143, 80,
	-2, 56,
	-1, 183,
	177, 0,
	178, 0,
	179, 0,
	-2, 225,
	-1, 184,
	177, 0,
	178, 0,
	179, 0,
	-2, 226,
	-1, 185,
	177, 0,
	178, 0,
	179, 0,
	-2, 227,
	-1, 186,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 228,
	-1, 187,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 229,
	-1, 188,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 230,
	-1, 189,
	180, 0,
	181, 0,
	182, 0,
	183, 0,
	-2, 231,
	-1, 196,
	80, 0,
	-2, 234,
	-1, 197,
	62, 0,
	158, 0,
	-2, 236,
	-1, 198,
	62, 0,
	158, 0,
	-2, 238,
	-1, 300,
	80, 0,
	-2, 235,
	-1, 301,
	62, 0,
	158, 0,
	-2, 237,
	-1, 302,
	62, 0,
	158, 0,
	-2, 239,
}

const yyNprod = 332
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2853

var yyAct = []int{

	170, 3, 638, 627, 471, 636, 628, 329, 330, 546,
	571, 314, 99, 100, 581, 497, 591, 414, 333, 537,
	227, 426, 443, 244, 143, 275, 490, 228, 367, 428,
	104, 116, 425, 162, 223, 165, 412, 139, 476, 322,
	269, 452, 155, 268, 411, 247, 16, 364, 229, 73,
	166, 141, 115, 10, 142, 136, 123, 239, 324, 127,
	210, 294, 276, 351, 349, 140, 492, 371, 575, 147,
	148, 294, 368, 508, 576, 444, 93, 507, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 292, 568, 196, 197, 198, 474,
	350, 278, 59, 277, 460, 128, 157, 253, 444, 295,
	296, 297, 226, 291, 98, 280, 460, 527, 145, 146,
	140, 77, 488, 459, 258, 96, 241, 158, 257, 93,
	292, 79, 370, 77, 98, 459, 80, 81, 82, 489,
	76, 487, 477, 95, 292, 478, 406, 191, 255, 291,
	252, 79, 76, 63, 292, 472, 265, 298, 293, 295,
	296, 297, 254, 291, 248, 248, 284, 255, 293, 295,
	296, 297, 251, 291, 287, 257, 190, 587, 96, 250,
	499, 171, 172, 460, 562, 249, 249, 98, 159, 159,
	173, 286, 395, 396, 300, 301, 302, 281, 283, 282,
	270, 397, 459, 542, 79, 389, 528, 279, 524, 213,
	215, 217, 316, 317, 77, 171, 172, 117, 117, 385,
	323, 97, 433, 160, 173, 341, 339, 83, 78, 80,
	81, 82, 242, 76, 77, 340, 475, 327, 325, 343,
	119, 344, 510, 511, 230, 382, 191, 83, 78, 80,
	81, 82, 455, 76, 353, 144, 354, 328, 335, 357,
	358, 359, 245, 336, 231, 117, 569, 259, 369, 267,
	313, 332, 611, 240, 97, 637, 192, 632, 372, 337,
	326, 117, 267, 387, 572, 405, 413, 77, 563, 149,
	393, 544, 526, 398, 525, 342, 380, 498, 381, 338,
	83, 78, 80, 81, 82, 388, 76, 256, 352, 383,
	384, 225, 356, 331, 617, 362, 363, 318, 548, 319,
	74, 320, 651, 650, 646, 194, 618, 607, 137, 474,
	332, 386, 75, 124, 501, 420, 422, 423, 421, 377,
	138, 79, 599, 193, 191, 419, 436, 191, 191, 191,
	191, 191, 191, 334, 429, 379, 431, 582, 373, 597,
	540, 132, 570, 260, 494, 348, 294, 347, 415, 299,
	157, 418, 450, 440, 290, 442, 457, 374, 248, 248,
	248, 432, 441, 644, 238, 543, 445, 130, 315, 346,
	75, 158, 437, 438, 439, 541, 231, 212, 466, 249,
	249, 249, 114, 416, 131, 453, 453, 323, 464, 461,
	462, 449, 448, 463, 446, 458, 456, 270, 480, 270,
	451, 195, 211, 481, 77, 616, 454, 454, 484, 376,
	129, 493, 483, 108, 485, 486, 496, 212, 78, 80,
	81, 82, 271, 76, 641, 503, 470, 218, 140, 292,
	648, 642, 216, 261, 262, 294, 107, 237, 482, 191,
	233, 512, 298, 293, 295, 296, 297, 394, 291, 518,
	399, 400, 401, 402, 403, 404, 523, 595, 509, 506,
	495, 647, 513, 514, 596, 505, 214, 110, 529, 534,
	531, 532, 608, 211, 209, 273, 530, 366, 74, 151,
	547, 613, 72, 74, 430, 274, 573, 479, 521, 519,
	522, 429, 539, 654, 220, 221, 222, 538, 368, 535,
	533, 232, 118, 558, 112, 84, 561, 551, 106, 111,
	653, 93, 629, 246, 550, 565, 243, 74, 292, 552,
	553, 133, 74, 580, 113, 589, 504, 502, 555, 556,
	361, 298, 293, 295, 296, 297, 360, 291, 355, 567,
	585, 566, 649, 236, 612, 586, 447, 219, 75, 588,
	574, 560, 577, 75, 49, 564, 153, 547, 583, 584,
	96, 601, 469, 594, 417, 378, 600, 593, 590, 98,
	103, 592, 592, 538, 2, 375, 84, 1, 95, 606,
	545, 602, 93, 610, 603, 604, 79, 75, 101, 102,
	94, 500, 547, 622, 623, 609, 598, 85, 614, 615,
	619, 621, 624, 631, 625, 626, 620, 491, 427, 424,
	639, 630, 633, 635, 634, 640, 536, 473, 520, 41,
	40, 643, 39, 22, 21, 20, 645, 19, 18, 17,
	9, 96, 8, 652, 639, 639, 656, 657, 655, 84,
	98, 7, 230, 6, 5, 93, 4, 407, 408, 95,
	312, 321, 105, 309, 109, 161, 97, 79, 311, 306,
	579, 94, 578, 549, 365, 266, 150, 224, 85, 77,
	515, 516, 272, 156, 152, 86, 87, 88, 89, 90,
	91, 92, 83, 78, 80, 81, 82, 154, 76, 70,
	71, 33, 126, 32, 96, 54, 28, 57, 56, 31,
	122, 121, 120, 98, 30, 134, 135, 84, 27, 50,
	24, 409, 95, 93, 23, 0, 0, 0, 0, 0,
	79, 0, 0, 0, 94, 0, 0, 97, 0, 0,
	0, 85, 0, 304, 0, 0, 410, 303, 307, 310,
	77, 467, 0, 0, 468, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	0, 0, 96, 0, 0, 0, 0, 0, 84, 0,
	0, 98, 0, 0, 93, 0, 308, 0, 0, 0,
	95, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	97, 0, 94, 0, 231, 305, 0, 0, 0, 85,
	0, 0, 0, 77, 0, 0, 0, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 84, 0, 0, 0,
	206, 95, 93, 0, 0, 208, 203, 0, 0, 79,
	0, 0, 0, 94, 0, 0, 0, 0, 97, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 86, 87, 88,
	89, 90, 91, 92, 83, 78, 80, 81, 82, 0,
	76, 96, 0, 0, 0, 0, 0, 0, 84, 0,
	98, 230, 0, 0, 93, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	201, 94, 0, 200, 199, 204, 207, 0, 85, 0,
	0, 0, 77, 390, 391, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	0, 76, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 205, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 202, 94, 0, 0, 0, 97, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 288, 0, 0, 289, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 164, 76,
	0, 0, 65, 68, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 93, 0, 0, 97,
	0, 0, 163, 231, 0, 0, 168, 0, 0, 67,
	0, 0, 77, 12, 0, 44, 69, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	84, 285, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 0, 0, 0, 0,
	0, 0, 29, 43, 98, 0, 11, 42, 46, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 94, 0, 167, 0, 0,
	0, 0, 85, 0, 0, 96, 0, 0, 0, 0,
	26, 0, 0, 66, 98, 0, 48, 0, 0, 0,
	0, 0, 45, 95, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 47, 25, 0, 51, 52,
	53, 58, 0, 63, 0, 64, 0, 0, 267, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 84, 76, 0, 0, 0, 0, 93, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 77, 0, 0, 62, 0, 0,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 84, 76, 0, 0, 0, 0, 93, 492,
	60, 0, 0, 0, 0, 0, 36, 96, 0, 0,
	0, 0, 61, 0, 0, 0, 98, 0, 0, 0,
	15, 0, 13, 84, 0, 95, 0, 74, 0, 93,
	0, 0, 0, 79, 0, 0, 0, 94, 0, 0,
	34, 0, 0, 0, 85, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 38,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 94, 96, 14,
	0, 0, 0, 0, 85, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 75, 0, 0,
	0, 0, 0, 97, 79, 0, 0, 0, 94, 0,
	0, 0, 0, 0, 0, 85, 77, 37, 35, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 0, 76, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 77, 0, 93, 559,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 97, 76, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 77, 557, 93,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 0, 76, 96, 0, 0,
	0, 0, 0, 0, 84, 0, 98, 0, 0, 0,
	93, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 94, 96, 0,
	0, 0, 0, 0, 85, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 96,
	0, 0, 0, 0, 0, 85, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 0, 0, 94,
	0, 0, 0, 97, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 554, 0, 0,
	0, 0, 86, 87, 88, 89, 90, 91, 92, 83,
	78, 80, 81, 82, 97, 76, 0, 0, 0, 0,
	0, 435, 0, 84, 0, 0, 0, 77, 465, 93,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 97, 76, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 77, 0,
	93, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 0, 76, 96, 0,
	0, 0, 0, 0, 0, 84, 0, 98, 0, 0,
	0, 93, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 96,
	0, 0, 0, 0, 0, 85, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 264, 0, 0, 79, 0, 0, 0, 94,
	96, 0, 0, 0, 0, 0, 85, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	94, 0, 0, 0, 97, 0, 0, 85, 0, 0,
	0, 345, 0, 0, 434, 0, 0, 77, 0, 0,
	0, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 97, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 0, 86, 87, 88, 89, 90, 91,
	92, 83, 78, 80, 81, 82, 97, 76, 84, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 86, 87, 88, 89, 90,
	91, 92, 83, 78, 80, 81, 82, 0, 76, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 263, 0, 0, 0, 0,
	0, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 84, 0, 0, 0,
	0, 95, 93, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 0, 94, 0, 0, 0, 0, 96, 0,
	85, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 0, 0, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 94, 0,
	0, 96, 0, 0, 0, 85, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 97,
	0, 94, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 77, 0, 0, 0, 0, 0, 86, 87,
	88, 89, 90, 91, 92, 83, 78, 80, 81, 82,
	125, 76, 0, 0, 97, 0, 0, 0, 65, 68,
	0, 0, 0, 0, 0, 0, 0, 77, 0, 0,
	55, 0, 0, 86, 87, 88, 89, 90, 91, 92,
	83, 78, 80, 81, 82, 0, 76, 97, 0, 0,
	0, 0, 168, 0, 0, 67, 0, 0, 0, 12,
	77, 44, 69, 0, 0, 0, 86, 87, 88, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 0, 76,
	84, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 43,
	0, 0, 11, 42, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	68, 0, 0, 167, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 96, 26, 0, 0, 66,
	0, 0, 48, 0, 98, 0, 0, 0, 45, 234,
	0, 0, 0, 95, 0, 0, 67, 0, 0, 0,
	12, 79, 44, 69, 0, 94, 0, 0, 0, 0,
	0, 47, 25, 0, 51, 52, 53, 58, 0, 63,
	0, 64, 0, 0, 0, 65, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 55, 0, 29,
	43, 0, 0, 11, 42, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 0, 93, 12, 0, 44, 69,
	0, 97, 0, 0, 0, 0, 0, 26, 0, 0,
	66, 0, 0, 48, 77, 0, 0, 0, 0, 45,
	86, 87, 88, 89, 90, 91, 92, 83, 78, 80,
	81, 82, 0, 76, 0, 29, 43, 0, 0, 11,
	42, 46, 47, 25, 96, 51, 52, 53, 58, 0,
	63, 0, 64, 98, 62, 0, 0, 65, 68, 0,
	0, 0, 95, 0, 0, 0, 0, 235, 0, 55,
	79, 0, 93, 26, 94, 0, 66, 60, 0, 48,
	0, 0, 0, 36, 0, 45, 0, 0, 0, 61,
	0, 0, 0, 0, 67, 0, 0, 15, 12, 13,
	44, 69, 0, 0, 74, 0, 0, 0, 47, 25,
	0, 51, 52, 53, 58, 0, 63, 34, 64, 0,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 169, 0, 0, 38, 29, 43, 95,
	97, 11, 42, 46, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 77, 0, 0, 14, 0, 0, 86,
	87, 88, 89, 90, 91, 92, 83, 78, 80, 81,
	82, 0, 76, 0, 75, 26, 0, 0, 66, 0,
	0, 48, 0, 0, 65, 68, 0, 45, 0, 0,
	0, 0, 0, 0, 37, 35, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 25, 0, 51, 52, 53, 58, 97, 63, 0,
	64, 67, 0, 0, 0, 12, 0, 44, 69, 0,
	77, 0, 0, 0, 0, 0, 65, 68, 0, 89,
	90, 91, 92, 83, 78, 80, 81, 82, 55, 76,
	65, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 29, 43, 0, 0, 11, 42,
	46, 0, 0, 67, 0, 0, 0, 12, 0, 44,
	69, 0, 0, 0, 0, 0, 0, 67, 0, 0,
	0, 12, 0, 44, 69, 0, 0, 74, 0, 0,
	0, 0, 26, 0, 0, 66, 0, 0, 48, 0,
	0, 0, 0, 0, 45, 0, 29, 43, 0, 0,
	11, 42, 46, 0, 0, 0, 0, 0, 0, 0,
	29, 43, 0, 0, 11, 42, 46, 47, 25, 0,
	51, 52, 53, 58, 0, 63, 0, 64, 517, 0,
	0, 0, 0, 0, 26, 0, 0, 66, 0, 0,
	48, 0, 0, 0, 0, 0, 45, 75, 26, 0,
	0, 66, 0, 0, 48, 65, 68, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 55, 0, 47,
	25, 0, 51, 52, 53, 58, 0, 63, 0, 64,
	392, 0, 0, 47, 25, 0, 51, 52, 53, 58,
	0, 63, 67, 64, 0, 0, 12, 0, 44, 69,
	0, 0, 0, 0, 0, 0, 65, 68, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 65,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 29, 43, 0, 0, 11,
	42, 46, 0, 67, 0, 0, 0, 12, 0, 44,
	69, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 44, 69, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 66, 0, 0, 48,
	0, 0, 0, 0, 0, 45, 29, 43, 0, 0,
	11, 42, 46, 0, 0, 0, 0, 0, 0, 29,
	43, 125, 0, 0, 42, 46, 0, 0, 47, 25,
	0, 51, 52, 53, 58, 0, 63, 0, 64, 0,
	0, 0, 0, 0, 26, 0, 0, 66, 0, 0,
	48, 0, 0, 0, 0, 0, 45, 26, 0, 0,
	66, 0, 0, 48, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	25, 0, 51, 52, 53, 58, 0, 63, 0, 64,
	0, 0, 47, 25, 0, 51, 52, 53, 58, 0,
	63, 0, 64,
}
var yyPact = []int{

	2299, -1000, -1000, 1909, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2668, 2668, 1262, 1262, -16, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2668,
	-1000, -1000, -1000, 387, 459, 454, 489, 103, 452, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 73, 2617, -1000, -1000, 2492, -1000,
	322, 296, 476, 196, 2668, 93, 93, 93, 2668, 2668,
	-1000, -1000, 421, 487, 56, 1034, 53, 2668, 2668, 2668,
	2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668, 2668,
	2668, 2668, 2668, 2681, 263, 2668, 2668, 2668, 851, 2232,
	43, -1000, -1000, -1000, -38, 341, 482, 448, 443, -1000,
	549, 103, 103, 103, 164, -63, 234, -1000, 103, 2131,
	519, -1000, -1000, 1876, 230, 2668, 64, 1909, -1000, 471,
	100, 468, 103, 103, 2, -24, -1000, -68, -10, -26,
	1909, 1, -1000, 205, -1000, 1, 1, 1841, 1688, 114,
	-1000, 102, 421, -1000, 428, -1000, -1000, -128, -72, -74,
	265, -1000, -59, 2030, 2197, 2668, -1000, -1000, -1000, -1000,
	911, -1000, -1000, 2668, 849, -50, -50, -38, -38, -38,
	253, 2232, 2093, 2309, 2309, 2309, 63, 63, 63, 63,
	367, -1000, 2681, 2668, 2668, 2668, 116, 43, 43, -1000,
	664, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 301,
	412, 2668, 2668, -1000, 265, -1000, 265, -1000, 265, 2668,
	71, 70, 164, 186, -1000, 245, 101, -1000, -1000, -1000,
	102, -1000, 150, 58, 2668, 57, -1000, 230, 2668, -1000,
	2668, 1657, -1000, 292, 270, -1000, 268, -126, -1000, -75,
	-127, -1000, 196, 2668, -1000, 2668, 514, 93, 2668, 2668,
	2668, 512, 506, 93, 93, 439, -1000, 2668, -42, -1000,
	-110, 114, 286, -1000, 254, 234, 83, 101, 101, 51,
	2197, -59, 2668, -59, 652, 19, -1000, 781, -1000, 2478,
	2681, 30, 2668, 2681, 2681, 2681, 2681, 2681, 2681, 278,
	116, 43, 43, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1909, 1909, -1000, -1000,
	-1000, -28, -1000, 720, 134, 295, 134, 295, 114, 127,
	114, 83, 83, 430, -1000, 234, -1000, -1000, 55, -1000,
	1626, -1000, -1000, 1497, 1909, 2668, 103, 103, 103, 100,
	101, 100, -1000, 1909, 1909, -1000, -1000, 1909, 1909, 1909,
	-1000, -1000, -46, -46, 207, -1000, 548, -1000, 102, 1909,
	102, 2668, 439, 119, 119, 2668, -1000, -1000, -1000, -1000,
	164, -67, -1000, -128, -128, 234, -1000, 652, -1000, -1000,
	-1000, -1000, -1000, 1466, -27, -1000, -1000, 2668, 589, -77,
	-77, -41, -41, -41, -17, 2681, 2668, -1000, -1000, -1000,
	-1000, -19, -1000, 69, -32, -29, 434, 2668, -19, -32,
	412, 114, 412, 412, -33, -1000, -55, -35, -1000, 12,
	2668, -1000, 267, 265, -1000, 2668, 1909, 148, 13, -1000,
	-1000, -1000, 218, 503, 2668, 502, -1000, 2668, -42, -1000,
	1909, -1000, -1000, -128, -98, -102, -1000, 652, -1000, 80,
	2668, 234, 234, -1000, -1000, -1000, 518, -1000, 2426, -27,
	-1000, -1000, 134, -1000, 2030, 2668, 40, 144, 142, -57,
	1909, -1000, 38, 211, 412, 211, 211, 83, 2668, 83,
	-1000, -1000, 93, 1909, 287, 35, 1909, -1000, 232, 2668,
	-1000, 183, -1000, 1909, -1000, -7, 234, 101, 101, -1000,
	-1000, -1000, 1435, 164, 164, -1000, -1000, -1000, 1306, -1000,
	-1000, -59, 2668, 1275, 265, 2668, 16, 138, 265, -1000,
	211, -1000, -1000, -1000, 1235, -1000, -79, -1000, 204, 130,
	-1000, 433, 234, -1000, -1000, -100, -1000, 1909, 100, 483,
	-1000, 260, -128, -128, -1000, -1000, -1000, -1000, 1909, 2668,
	211, 1909, -1000, 9, 211, -1000, -1000, 501, 93, 83,
	83, 412, 392, -1000, 262, 239, 2668, -1000, -1000, -1000,
	2668, -1000, 245, 234, 234, 1093, -1000, -1000, -1000, -1000,
	-1000, -1000, -67, -1000, 211, 193, 407, 287, 117, 546,
	-1000, 1909, 427, 260, 260, -1000, -1000, 280, 192, 130,
	148, 2668, 2668, 2668, -1000, -1000, 186, 114, 464, 412,
	-1000, -1000, 1909, 1909, 123, 127, 114, 121, -1000, 2668,
	211, -1000, 359, -1000, 114, -1000, -1000, 291, -1000, 1053,
	-1000, 190, 396, -1000, 365, -1000, 528, 189, 188, 114,
	462, 445, 121, 2668, 2668, -1000, -1000, -1000,
}
var yyPgo = []int{

	0, 734, 730, 574, 729, 728, 55, 726, 725, 0,
	53, 176, 37, 340, 40, 43, 48, 27, 20, 24,
	724, 722, 721, 720, 57, 333, 719, 718, 717, 54,
	51, 307, 22, 716, 715, 713, 712, 46, 711, 102,
	710, 709, 707, 502, 694, 42, 41, 693, 692, 21,
	25, 52, 31, 687, 34, 14, 289, 686, 6, 685,
	47, 684, 683, 28, 682, 680, 50, 33, 675, 49,
	674, 672, 39, 671, 388, 11, 60, 670, 668, 667,
	594, 666, 664, 663, 661, 652, 650, 649, 648, 647,
	645, 644, 643, 642, 640, 639, 402, 36, 44, 17,
	38, 638, 637, 4, 19, 636, 16, 7, 32, 629,
	8, 29, 628, 627, 26, 10, 623, 622, 3, 2,
	5, 23, 45, 616, 15, 611, 9, 603, 600, 597,
	35, 595, 18, 585, 58, 584,
}
var yyR1 = []int{

	0, 129, 129, 80, 80, 80, 80, 80, 80, 81,
	82, 83, 84, 85, 85, 85, 85, 85, 86, 92,
	92, 92, 37, 37, 37, 38, 38, 38, 38, 38,
	38, 38, 39, 39, 41, 40, 69, 68, 68, 68,
	68, 68, 130, 130, 67, 67, 66, 66, 66, 18,
	18, 17, 17, 16, 44, 44, 43, 42, 42, 42,
	42, 42, 131, 131, 45, 45, 45, 47, 46, 46,
	46, 51, 52, 50, 50, 54, 54, 53, 132, 132,
	48, 48, 48, 133, 133, 55, 56, 56, 57, 15,
	15, 14, 58, 58, 59, 60, 60, 61, 61, 12,
	12, 62, 62, 63, 64, 64, 65, 71, 71, 70,
	73, 73, 72, 79, 79, 78, 78, 75, 75, 74,
	77, 77, 76, 87, 87, 96, 96, 134, 134, 134,
	135, 135, 98, 98, 97, 103, 103, 102, 101, 101,
	99, 100, 100, 88, 88, 89, 90, 90, 90, 107,
	109, 109, 108, 114, 114, 113, 105, 105, 104, 104,
	19, 106, 32, 32, 110, 112, 112, 111, 91, 91,
	115, 115, 115, 115, 116, 116, 116, 120, 120, 117,
	117, 117, 118, 119, 93, 93, 121, 122, 122, 123,
	123, 124, 124, 124, 128, 128, 126, 127, 127, 94,
	94, 95, 125, 125, 49, 49, 49, 49, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 10,
	10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 3, 8, 8, 7, 7, 6, 4, 13,
	13, 5, 5, 5, 20, 21, 21, 22, 25, 25,
	23, 24, 24, 33, 33, 33, 34, 26, 26, 27,
	27, 27, 30, 30, 29, 29, 31, 28, 28, 35,
	36, 36,
}
var yyR2 = []int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 4, 1, 3, 4, 3, 4,
	3, 4, 1, 1, 5, 5, 2, 1, 2, 2,
	3, 4, 1, 1, 1, 3, 1, 3, 2, 0,
	1, 1, 2, 1, 0, 1, 2, 1, 1, 4,
	4, 5, 1, 1, 4, 6, 6, 4, 4, 6,
	6, 1, 1, 0, 2, 0, 1, 4, 0, 1,
	0, 1, 2, 0, 1, 4, 0, 1, 2, 1,
	3, 3, 0, 1, 2, 0, 1, 5, 1, 1,
	3, 0, 1, 2, 0, 1, 2, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 1, 0, 1, 2,
	0, 1, 2, 6, 9, 4, 2, 0, 5, 6,
	1, 2, 1, 3, 6, 0, 1, 2, 1, 2,
	2, 0, 3, 6, 9, 7, 8, 7, 7, 2,
	1, 3, 4, 0, 1, 4, 1, 3, 3, 3,
	1, 1, 0, 2, 2, 1, 3, 2, 10, 13,
	0, 6, 6, 6, 0, 6, 6, 0, 6, 2,
	3, 2, 1, 2, 6, 11, 1, 1, 3, 0,
	3, 0, 2, 2, 1, 3, 1, 0, 2, 5,
	5, 6, 0, 3, 1, 3, 3, 4, 1, 3,
	3, 5, 5, 4, 5, 6, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 2, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 5, 5, 4, 5, 6, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 0,
	1, 1, 1, 1, 3, 1, 1, 3, 4, 5,
	2, 0, 2, 4, 5, 4, 1, 1, 1, 4,
	4, 4, 1, 3, 3, 3, 2, 6, 6, 3,
	1, 1,
}
var yyChk = []int{

	-1000, -129, -80, -9, -81, -82, -83, -84, -85, -86,
	-10, 92, 49, 50, 107, 48, -37, -87, -88, -89,
	-90, -91, -92, -1, -2, 162, 126, -5, -33, 88,
	-20, -26, -35, -38, 68, 146, 34, 145, 87, -93,
	-94, -95, 93, 89, 51, 138, 94, 161, 132, -3,
	-4, 164, 165, 166, -34, 20, -27, -28, 167, -39,
	28, 40, 5, 169, 171, 8, 129, 45, 9, 52,
	-41, -40, -43, -69, 55, 125, 190, 171, 185, 88,
	186, 187, 188, 184, 7, 99, 177, 178, 179, 180,
	181, 182, 183, 13, 92, 80, 62, 158, 71, -9,
	-9, -80, -80, -3, -9, -71, 141, 69, 46, -70,
	100, 70, 70, 55, -96, -51, -52, 162, 70, 167,
	-21, -22, -23, -9, -25, 154, -36, -9, -37, 108,
	65, 108, 65, 65, -8, -7, -6, 132, -13, -12,
	-9, -30, -29, -19, 162, -30, -30, -9, -9, -56,
	-57, 78, -44, -43, -42, -45, -47, -52, -51, 133,
	167, -68, -67, 38, 4, -130, -66, 113, 42, 186,
	-9, 162, 163, 171, -9, -9, -9, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
	-11, -10, 13, 80, 62, 158, -9, -9, -9, 93,
	92, 89, 151, 15, 94, 132, 9, 95, 14, -74,
	-76, 81, 96, -39, 4, -39, 4, -39, 4, 18,
	-96, -96, -96, -54, -53, 147, 175, -18, -17, -16,
	10, 162, -96, -13, 38, 186, 44, -25, 154, -24,
	43, -9, 168, 65, -121, 162, 65, -122, -52, -51,
	-122, 170, 174, 175, 172, 174, -31, 174, 123, 62,
	158, -31, -31, 54, 54, -58, -59, 155, -15, -14,
	-16, -56, -48, 67, 77, -50, 190, 175, 175, -37,
	174, -67, -130, -67, -9, 190, -18, -9, 172, 175,
	7, 190, 171, 185, 88, 186, 187, 188, 184, -11,
	-9, -9, -9, 93, 89, 151, 15, 94, 132, 9,
	95, 14, -77, -76, -75, -74, -9, -9, -39, -39,
	-39, -73, -72, -9, -134, 167, -134, 167, -54, -107,
	-110, 127, 144, -132, 108, -52, 162, -16, 149, 168,
	-9, 168, -24, -9, -9, 134, 97, 97, 97, 190,
	175, 190, -6, -9, -9, 44, -29, -9, -9, -9,
	44, 44, -30, -30, -60, -61, 58, -63, 79, -9,
	174, 177, -58, 72, 91, -131, 143, 53, -133, 101,
	-18, -49, 162, -52, -52, 168, -66, -9, -18, 186,
	172, 173, 172, -9, -11, 162, 163, 171, -9, -11,
	-11, -11, -11, -11, -11, 7, 174, -79, -78, 11,
	36, -98, -97, 152, -99, 73, 108, -135, -98, -99,
	-58, -110, -58, -58, -109, -108, -49, -112, -111, -49,
	74, -18, -45, 167, 168, 134, -9, -122, -122, -122,
	-121, -52, -121, -32, 154, -32, -69, 18, -15, -14,
	-9, -60, -46, -52, -51, 133, -46, -9, -54, 190,
	171, -50, -50, -17, -18, 172, -9, 172, 175, -11,
	-72, -103, 174, -102, 118, 167, -100, 174, 174, 73,
	-9, -103, -100, -75, -58, -75, -75, 174, 177, 174,
	-114, -113, 54, -9, 97, -37, -9, -124, 149, 167,
	-125, 116, 44, -9, 44, -12, -50, 175, 175, -18,
	162, 163, -9, -18, -18, 172, 173, 172, -9, -97,
	-101, -67, -130, -9, 168, 150, 150, 174, 168, -103,
	-75, -103, -103, -108, -9, -111, -105, -104, -19, -99,
	73, 108, 168, 153, 59, -128, -126, -9, 135, -62,
	-63, -18, -52, -52, 172, -54, -54, 172, -9, 174,
	-37, -9, 168, 150, -37, -103, -114, -32, 174, 62,
	158, -115, 154, 73, -17, 168, 174, -121, -64, -65,
	60, -55, 97, -50, -50, -9, -103, 168, -103, 44,
	-104, -106, -49, -106, -75, 85, 92, 97, -123, 103,
	-126, -9, -132, -18, -18, 168, -103, 134, 85, -99,
	-127, 155, 18, 74, -55, -55, 145, 34, 134, -115,
	-124, -126, -9, -9, -117, -107, -110, -118, -58, 68,
	-75, -116, 154, -58, -110, -58, -120, 154, -119, -9,
	-103, 85, 92, -58, 92, -58, 134, 85, 85, 34,
	134, 134, -118, 68, 68, -120, -119, -119,
}
var yyDef = []int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	208, 0, 0, 0, 0, 0, 12, 13, 14, 15,
	16, 17, 18, 259, 260, -2, 262, 263, 264, 0,
	266, 267, 268, 107, 0, 0, 0, 0, 0, 19,
	20, 21, 283, 284, 285, 286, 287, 288, 289, 290,
	291, 301, 302, 303, 0, 0, 317, 318, 0, 25,
	0, 0, 0, 293, 299, 0, 0, 0, 0, 0,
	32, 33, 86, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 224,
	258, 9, 10, 11, 265, 22, 0, 0, 0, 108,
	0, 0, 0, 0, 75, 0, 49, -2, 0, 299,
	0, 305, 306, 0, 311, 0, 0, 330, 331, 0,
	0, 0, 0, 0, 0, 294, 295, 0, 0, 300,
	99, 0, 322, 0, 160, 0, 0, 0, 0, 92,
	87, 0, 86, 55, -2, 57, 58, 73, 0, 0,
	0, 36, 37, 0, 0, 0, 44, 42, 43, 46,
	49, 209, 210, 0, 0, 216, 217, 218, 219, 220,
	221, 222, 223, -2, -2, -2, -2, -2, -2, -2,
	0, 269, 0, 0, 0, 0, -2, -2, -2, 240,
	0, 242, 244, 246, 248, 250, 252, 254, 256, 120,
	117, 0, 0, 26, 0, 28, 0, 30, 0, 0,
	127, 127, 75, 0, 76, 78, 0, 126, 50, 51,
	0, 53, 0, 0, 0, 0, 304, 311, 0, 310,
	0, 0, 329, 0, 0, 186, 0, 0, 187, 0,
	0, 292, 0, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 93, 0, 88, 89,
	0, 92, 0, 81, 83, 49, 0, 0, 0, 0,
	0, 38, 0, 39, 49, 0, 48, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, -2, -2, 241, 243, 245, 247, 249, 251, 253,
	255, 257, 23, 121, 24, 118, 119, 122, 27, 29,
	31, 109, 110, 113, 0, 0, 0, 0, 92, 92,
	92, 0, 0, 0, 79, 49, 72, 52, 0, 313,
	0, 315, 307, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 296, 297, 100, 319, 323, 326, 324, 325,
	320, 321, 162, 162, 0, 96, 0, 98, 0, 94,
	0, 0, 95, 0, 0, 0, 62, 63, 82, 84,
	75, 74, 204, 73, 73, 0, 45, 49, 40, 47,
	211, 212, 214, 0, 232, 270, 271, 0, 0, 277,
	278, 279, 280, 281, 282, 0, 0, 112, 114, 115,
	116, 135, 132, 0, 141, 130, 0, 0, 135, 141,
	117, 92, 117, 117, 149, 150, 0, 164, 165, 153,
	0, 125, 0, 0, 314, 0, 308, 191, 0, 199,
	200, 188, 202, 0, 0, 0, 34, 0, 103, 90,
	91, 35, 59, 73, 0, 0, 60, 49, 64, 0,
	0, 49, 49, 67, 41, 215, 0, 274, 0, 233,
	111, 123, 0, 136, 0, 0, 0, 0, 0, 131,
	140, 143, 0, 135, 117, 135, 135, 0, 0, 0,
	167, 154, 0, 77, 0, 0, 309, 184, 0, 0,
	201, 0, 327, 163, 328, 101, 49, 0, 0, 61,
	205, 206, 0, 75, 75, 272, 273, 275, 0, 133,
	137, 138, 0, 0, 0, 0, 0, 0, 0, 145,
	135, 147, 148, 151, 153, 166, 162, 156, 0, 170,
	130, 0, 0, 192, 193, 0, 194, 196, 0, 104,
	102, 0, 73, 73, 207, 65, 66, 276, 139, 0,
	135, 142, 128, 0, 135, 146, 152, 0, 0, 0,
	0, 117, 0, 131, 0, 189, 0, 203, 97, 105,
	0, 68, 78, 49, 49, 0, 124, 129, 144, 155,
	157, 158, 161, 159, 135, 0, 0, 0, 197, 0,
	195, 106, 0, 0, 0, 134, 168, 0, 0, 170,
	191, 0, 0, 0, 69, 70, 0, 92, 0, 117,
	185, 198, 190, 85, 174, 92, 92, 177, 182, 0,
	135, 171, 0, 179, 92, 181, 172, 0, 173, 92,
	169, 0, 0, 180, 0, 183, 0, 0, 0, 92,
	0, 0, 177, 0, 0, 175, 176, 178,
}
var yyTok1 = []int{

	1,
}
var yyTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190,
}
var yyTok3 = []int{
	0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

const yyFlag = -1000

func yyTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(yyToknames) {
		if yyToknames[c-4] != "" {
			return yyToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yylex1(lex yyLexer, lval *yySymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		c = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			c = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		c = yyTok3[i+0]
		if c == char {
			c = yyTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(c), uint(char))
	}
	return c
}

func yyParse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yychar), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar = yylex1(yylex, &yylval)
	}
	yyn += yychar
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yychar { /* valid shift */
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yychar {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error("syntax error")
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yychar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}
			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		//line n1ql.y:356
		{
			yylex.(*lexer).setStatement(yyS[yypt-0].statement)
		}
	case 2:
		//line n1ql.y:361
		{
			yylex.(*lexer).setExpression(yyS[yypt-0].expr)
		}
	case 3:
		yyVAL.statement = yyS[yypt-0].statement
	case 4:
		yyVAL.statement = yyS[yypt-0].statement
	case 5:
		yyVAL.statement = yyS[yypt-0].statement
	case 6:
		yyVAL.statement = yyS[yypt-0].statement
	case 7:
		yyVAL.statement = yyS[yypt-0].statement
	case 8:
		yyVAL.statement = yyS[yypt-0].statement
	case 9:
		//line n1ql.y:382
		{
			yyVAL.statement = algebra.NewExplain(yyS[yypt-0].statement)
		}
	case 10:
		//line n1ql.y:389
		{
			yyVAL.statement = algebra.NewPrepare(yyS[yypt-0].statement)
		}
	case 11:
		//line n1ql.y:396
		{
			yyVAL.statement = algebra.NewExecute(yyS[yypt-0].expr)
		}
	case 12:
		//line n1ql.y:403
		{
			yyVAL.statement = yyS[yypt-0].fullselect
		}
	case 13:
		yyVAL.statement = yyS[yypt-0].statement
	case 14:
		yyVAL.statement = yyS[yypt-0].statement
	case 15:
		yyVAL.statement = yyS[yypt-0].statement
	case 16:
		yyVAL.statement = yyS[yypt-0].statement
	case 17:
		yyVAL.statement = yyS[yypt-0].statement
	case 18:
		yyVAL.statement = yyS[yypt-0].statement
	case 19:
		yyVAL.statement = yyS[yypt-0].statement
	case 20:
		yyVAL.statement = yyS[yypt-0].statement
	case 21:
		yyVAL.statement = yyS[yypt-0].statement
	case 22:
		//line n1ql.y:434
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-1].subresult, yyS[yypt-0].order, nil, nil) /* OFFSET precedes LIMIT */
		}
	case 23:
		//line n1ql.y:438
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-0].expr, yyS[yypt-1].expr) /* OFFSET precedes LIMIT */
		}
	case 24:
		//line n1ql.y:442
		{
			yyVAL.fullselect = algebra.NewSelect(yyS[yypt-3].subresult, yyS[yypt-2].order, yyS[yypt-1].expr, yyS[yypt-0].expr) /* OFFSET precedes LIMIT */
		}
	case 25:
		//line n1ql.y:448
		{
			yyVAL.subresult = yyS[yypt-0].subselect
		}
	case 26:
		//line n1ql.y:453
		{
			yyVAL.subresult = algebra.NewUnion(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 27:
		//line n1ql.y:458
		{
			yyVAL.subresult = algebra.NewUnionAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 28:
		//line n1ql.y:463
		{
			yyVAL.subresult = algebra.NewIntersect(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 29:
		//line n1ql.y:468
		{
			yyVAL.subresult = algebra.NewIntersectAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 30:
		//line n1ql.y:473
		{
			yyVAL.subresult = algebra.NewExcept(yyS[yypt-2].subresult, yyS[yypt-0].subselect)
		}
	case 31:
		//line n1ql.y:478
		{
			yyVAL.subresult = algebra.NewExceptAll(yyS[yypt-3].subresult, yyS[yypt-0].subselect)
		}
	case 32:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 33:
		yyVAL.subselect = yyS[yypt-0].subselect
	case 34:
		//line n1ql.y:491
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-4].fromTerm, yyS[yypt-3].bindings, yyS[yypt-2].expr, yyS[yypt-1].group, yyS[yypt-0].projection)
		}
	case 35:
		//line n1ql.y:498
		{
			yyVAL.subselect = algebra.NewSubselect(yyS[yypt-3].fromTerm, yyS[yypt-2].bindings, yyS[yypt-1].expr, yyS[yypt-0].group, yyS[yypt-4].projection)
		}
	case 36:
		//line n1ql.y:513
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 37:
		//line n1ql.y:520
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 38:
		//line n1ql.y:525
		{
			yyVAL.projection = algebra.NewProjection(true, yyS[yypt-0].resultTerms)
		}
	case 39:
		//line n1ql.y:530
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 40:
		//line n1ql.y:535
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 41:
		//line n1ql.y:540
		{
			yyVAL.projection = algebra.NewRawProjection(true, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 44:
		//line n1ql.y:553
		{
			yyVAL.resultTerms = algebra.ResultTerms{yyS[yypt-0].resultTerm}
		}
	case 45:
		//line n1ql.y:558
		{
			yyVAL.resultTerms = append(yyS[yypt-2].resultTerms, yyS[yypt-0].resultTerm)
		}
	case 46:
		//line n1ql.y:565
		{
			yyVAL.resultTerm = algebra.NewResultTerm(nil, true, "")
		}
	case 47:
		//line n1ql.y:570
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-2].expr, true, "")
		}
	case 48:
		//line n1ql.y:575
		{
			yyVAL.resultTerm = algebra.NewResultTerm(yyS[yypt-1].expr, false, yyS[yypt-0].s)
		}
	case 49:
		//line n1ql.y:582
		{
			yyVAL.s = ""
		}
	case 50:
		yyVAL.s = yyS[yypt-0].s
	case 51:
		yyVAL.s = yyS[yypt-0].s
	case 52:
		//line n1ql.y:593
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 53:
		yyVAL.s = yyS[yypt-0].s
	case 54:
		//line n1ql.y:611
		{
			yyVAL.fromTerm = nil
		}
	case 55:
		yyVAL.fromTerm = yyS[yypt-0].fromTerm
	case 56:
		//line n1ql.y:620
		{
			yyVAL.fromTerm = yyS[yypt-0].fromTerm
		}
	case 57:
		//line n1ql.y:627
		{
			yyVAL.fromTerm = yyS[yypt-0].keyspaceTerm
		}
	case 58:
		//line n1ql.y:632
		{
			yyVAL.fromTerm = yyS[yypt-0].subqueryTerm
		}
	case 59:
		//line n1ql.y:637
		{
			yyVAL.fromTerm = algebra.NewJoin(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 60:
		//line n1ql.y:642
		{
			yyVAL.fromTerm = algebra.NewNest(yyS[yypt-3].fromTerm, yyS[yypt-2].b, yyS[yypt-0].keyspaceTerm)
		}
	case 61:
		//line n1ql.y:647
		{
			yyVAL.fromTerm = algebra.NewUnnest(yyS[yypt-4].fromTerm, yyS[yypt-3].b, yyS[yypt-1].expr, yyS[yypt-0].s)
		}
	case 64:
		//line n1ql.y:660
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 65:
		//line n1ql.y:665
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 66:
		//line n1ql.y:670
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 67:
		//line n1ql.y:677
		{
			yyVAL.subqueryTerm = algebra.NewSubqueryTerm(yyS[yypt-2].fullselect, yyS[yypt-0].s)
		}
	case 68:
		//line n1ql.y:684
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 69:
		//line n1ql.y:689
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm(yyS[yypt-5].s, yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 70:
		//line n1ql.y:694
		{
			yyVAL.keyspaceTerm = algebra.NewKeyspaceTerm("#system", yyS[yypt-3].s, yyS[yypt-2].path, yyS[yypt-1].s, yyS[yypt-0].expr)
		}
	case 71:
		yyVAL.s = yyS[yypt-0].s
	case 72:
		yyVAL.s = yyS[yypt-0].s
	case 73:
		//line n1ql.y:709
		{
			yyVAL.path = nil
		}
	case 74:
		//line n1ql.y:714
		{
			yyVAL.path = yyS[yypt-0].path
		}
	case 75:
		//line n1ql.y:721
		{
			yyVAL.expr = nil
		}
	case 76:
		yyVAL.expr = yyS[yypt-0].expr
	case 77:
		//line n1ql.y:730
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 78:
		//line n1ql.y:737
		{
		}
	case 80:
		//line n1ql.y:745
		{
			yyVAL.b = false
		}
	case 81:
		//line n1ql.y:750
		{
			yyVAL.b = false
		}
	case 82:
		//line n1ql.y:755
		{
			yyVAL.b = true
		}
	case 85:
		//line n1ql.y:768
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 86:
		//line n1ql.y:782
		{
			yyVAL.bindings = nil
		}
	case 87:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 88:
		//line n1ql.y:791
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 89:
		//line n1ql.y:798
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 90:
		//line n1ql.y:803
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 91:
		//line n1ql.y:810
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 92:
		//line n1ql.y:824
		{
			yyVAL.expr = nil
		}
	case 93:
		yyVAL.expr = yyS[yypt-0].expr
	case 94:
		//line n1ql.y:833
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 95:
		//line n1ql.y:847
		{
			yyVAL.group = nil
		}
	case 96:
		yyVAL.group = yyS[yypt-0].group
	case 97:
		//line n1ql.y:856
		{
			yyVAL.group = algebra.NewGroup(yyS[yypt-2].exprs, yyS[yypt-1].bindings, yyS[yypt-0].expr)
		}
	case 98:
		//line n1ql.y:861
		{
			yyVAL.group = algebra.NewGroup(nil, yyS[yypt-0].bindings, nil)
		}
	case 99:
		//line n1ql.y:868
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 100:
		//line n1ql.y:873
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 101:
		//line n1ql.y:880
		{
			yyVAL.bindings = nil
		}
	case 102:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 103:
		//line n1ql.y:889
		{
			yyVAL.bindings = yyS[yypt-0].bindings
		}
	case 104:
		//line n1ql.y:896
		{
			yyVAL.expr = nil
		}
	case 105:
		yyVAL.expr = yyS[yypt-0].expr
	case 106:
		//line n1ql.y:905
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 107:
		//line n1ql.y:919
		{
			yyVAL.order = nil
		}
	case 108:
		yyVAL.order = yyS[yypt-0].order
	case 109:
		//line n1ql.y:928
		{
			yyVAL.order = algebra.NewOrder(yyS[yypt-0].sortTerms)
		}
	case 110:
		//line n1ql.y:935
		{
			yyVAL.sortTerms = algebra.SortTerms{yyS[yypt-0].sortTerm}
		}
	case 111:
		//line n1ql.y:940
		{
			yyVAL.sortTerms = append(yyS[yypt-2].sortTerms, yyS[yypt-0].sortTerm)
		}
	case 112:
		//line n1ql.y:947
		{
			yyVAL.sortTerm = algebra.NewSortTerm(yyS[yypt-1].expr, yyS[yypt-0].b)
		}
	case 113:
		//line n1ql.y:954
		{
			yyVAL.b = false
		}
	case 114:
		yyVAL.b = yyS[yypt-0].b
	case 115:
		//line n1ql.y:963
		{
			yyVAL.b = false
		}
	case 116:
		//line n1ql.y:968
		{
			yyVAL.b = true
		}
	case 117:
		//line n1ql.y:982
		{
			yyVAL.expr = nil
		}
	case 118:
		yyVAL.expr = yyS[yypt-0].expr
	case 119:
		//line n1ql.y:991
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 120:
		//line n1ql.y:1005
		{
			yyVAL.expr = nil
		}
	case 121:
		yyVAL.expr = yyS[yypt-0].expr
	case 122:
		//line n1ql.y:1014
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 123:
		//line n1ql.y:1028
		{
			yyVAL.statement = algebra.NewInsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 124:
		//line n1ql.y:1033
		{
			yyVAL.statement = algebra.NewInsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 125:
		//line n1ql.y:1040
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-3].s, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 126:
		//line n1ql.y:1045
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 132:
		yyVAL.pairs = yyS[yypt-0].pairs
	case 133:
		//line n1ql.y:1068
		{
			yyVAL.pairs = append(yyS[yypt-2].pairs, yyS[yypt-0].pairs...)
		}
	case 134:
		//line n1ql.y:1075
		{
			yyVAL.pairs = algebra.Pairs{&algebra.Pair{Key: yyS[yypt-3].expr, Value: yyS[yypt-1].expr}}
		}
	case 135:
		//line n1ql.y:1082
		{
			yyVAL.projection = nil
		}
	case 136:
		yyVAL.projection = yyS[yypt-0].projection
	case 137:
		//line n1ql.y:1091
		{
			yyVAL.projection = yyS[yypt-0].projection
		}
	case 138:
		//line n1ql.y:1098
		{
			yyVAL.projection = algebra.NewProjection(false, yyS[yypt-0].resultTerms)
		}
	case 139:
		//line n1ql.y:1103
		{
			yyVAL.projection = algebra.NewRawProjection(false, yyS[yypt-0].expr, "")
		}
	case 140:
		//line n1ql.y:1110
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		//line n1ql.y:1117
		{
			yyVAL.expr = nil
		}
	case 142:
		//line n1ql.y:1122
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 143:
		//line n1ql.y:1136
		{
			yyVAL.statement = algebra.NewUpsertValues(yyS[yypt-3].keyspaceRef, yyS[yypt-1].pairs, yyS[yypt-0].projection)
		}
	case 144:
		//line n1ql.y:1141
		{
			yyVAL.statement = algebra.NewUpsertSelect(yyS[yypt-6].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].expr, yyS[yypt-1].fullselect, yyS[yypt-0].projection)
		}
	case 145:
		//line n1ql.y:1155
		{
			yyVAL.statement = algebra.NewDelete(yyS[yypt-4].keyspaceRef, yyS[yypt-3].expr, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 146:
		//line n1ql.y:1169
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-6].keyspaceRef, yyS[yypt-5].expr, yyS[yypt-4].set, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 147:
		//line n1ql.y:1174
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, yyS[yypt-3].set, nil, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 148:
		//line n1ql.y:1179
		{
			yyVAL.statement = algebra.NewUpdate(yyS[yypt-5].keyspaceRef, yyS[yypt-4].expr, nil, yyS[yypt-3].unset, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 149:
		//line n1ql.y:1186
		{
			yyVAL.set = algebra.NewSet(yyS[yypt-0].setTerms)
		}
	case 150:
		//line n1ql.y:1193
		{
			yyVAL.setTerms = algebra.SetTerms{yyS[yypt-0].setTerm}
		}
	case 151:
		//line n1ql.y:1198
		{
			yyVAL.setTerms = append(yyS[yypt-2].setTerms, yyS[yypt-0].setTerm)
		}
	case 152:
		//line n1ql.y:1205
		{
			yyVAL.setTerm = algebra.NewSetTerm(yyS[yypt-3].path, yyS[yypt-1].expr, yyS[yypt-0].updateFor)
		}
	case 153:
		//line n1ql.y:1212
		{
			yyVAL.updateFor = nil
		}
	case 154:
		yyVAL.updateFor = yyS[yypt-0].updateFor
	case 155:
		//line n1ql.y:1221
		{
			yyVAL.updateFor = algebra.NewUpdateFor(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 156:
		//line n1ql.y:1228
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 157:
		//line n1ql.y:1233
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 158:
		//line n1ql.y:1240
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 159:
		//line n1ql.y:1245
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 160:
		yyVAL.s = yyS[yypt-0].s
	case 161:
		//line n1ql.y:1256
		{
			yyVAL.expr = yyS[yypt-0].path
		}
	case 162:
		//line n1ql.y:1263
		{
			yyVAL.expr = nil
		}
	case 163:
		//line n1ql.y:1268
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 164:
		//line n1ql.y:1275
		{
			yyVAL.unset = algebra.NewUnset(yyS[yypt-0].unsetTerms)
		}
	case 165:
		//line n1ql.y:1282
		{
			yyVAL.unsetTerms = algebra.UnsetTerms{yyS[yypt-0].unsetTerm}
		}
	case 166:
		//line n1ql.y:1287
		{
			yyVAL.unsetTerms = append(yyS[yypt-2].unsetTerms, yyS[yypt-0].unsetTerm)
		}
	case 167:
		//line n1ql.y:1294
		{
			yyVAL.unsetTerm = algebra.NewUnsetTerm(yyS[yypt-1].path, yyS[yypt-0].updateFor)
		}
	case 168:
		//line n1ql.y:1308
		{
			source := algebra.NewMergeSourceFrom(yyS[yypt-5].keyspaceTerm, "")
			yyVAL.statement = algebra.NewMerge(yyS[yypt-7].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 169:
		//line n1ql.y:1314
		{
			source := algebra.NewMergeSourceSelect(yyS[yypt-7].fullselect, yyS[yypt-5].s)
			yyVAL.statement = algebra.NewMerge(yyS[yypt-10].keyspaceRef, source, yyS[yypt-3].expr, yyS[yypt-2].mergeActions, yyS[yypt-1].expr, yyS[yypt-0].projection)
		}
	case 170:
		//line n1ql.y:1322
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 171:
		//line n1ql.y:1327
		{
			yyVAL.mergeActions = algebra.NewMergeActions(yyS[yypt-1].mergeUpdate, yyS[yypt-0].mergeActions.Delete(), yyS[yypt-0].mergeActions.Insert())
		}
	case 172:
		//line n1ql.y:1332
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 173:
		//line n1ql.y:1337
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 174:
		//line n1ql.y:1344
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, nil)
		}
	case 175:
		//line n1ql.y:1349
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, yyS[yypt-1].mergeDelete, yyS[yypt-0].mergeInsert)
		}
	case 176:
		//line n1ql.y:1354
		{
			yyVAL.mergeActions = algebra.NewMergeActions(nil, nil, yyS[yypt-0].mergeInsert)
		}
	case 177:
		//line n1ql.y:1361
		{
			yyVAL.mergeInsert = nil
		}
	case 178:
		//line n1ql.y:1366
		{
			yyVAL.mergeInsert = yyS[yypt-0].mergeInsert
		}
	case 179:
		//line n1ql.y:1373
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-1].set, nil, yyS[yypt-0].expr)
		}
	case 180:
		//line n1ql.y:1378
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(yyS[yypt-2].set, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 181:
		//line n1ql.y:1383
		{
			yyVAL.mergeUpdate = algebra.NewMergeUpdate(nil, yyS[yypt-1].unset, yyS[yypt-0].expr)
		}
	case 182:
		//line n1ql.y:1390
		{
			yyVAL.mergeDelete = algebra.NewMergeDelete(yyS[yypt-0].expr)
		}
	case 183:
		//line n1ql.y:1397
		{
			yyVAL.mergeInsert = algebra.NewMergeInsert(yyS[yypt-1].expr, yyS[yypt-0].expr)
		}
	case 184:
		//line n1ql.y:1411
		{
			yyVAL.statement = algebra.NewCreatePrimaryIndex(yyS[yypt-1].keyspaceRef, yyS[yypt-0].indexType)
		}
	case 185:
		//line n1ql.y:1416
		{
			yyVAL.statement = algebra.NewCreateIndex(yyS[yypt-8].s, yyS[yypt-6].keyspaceRef, yyS[yypt-4].exprs, yyS[yypt-2].expr, yyS[yypt-1].expr, yyS[yypt-0].indexType)
		}
	case 186:
		yyVAL.s = yyS[yypt-0].s
	case 187:
		//line n1ql.y:1427
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef("", yyS[yypt-0].s, "")
		}
	case 188:
		//line n1ql.y:1432
		{
			yyVAL.keyspaceRef = algebra.NewKeyspaceRef(yyS[yypt-2].s, yyS[yypt-0].s, "")
		}
	case 189:
		//line n1ql.y:1439
		{
			yyVAL.expr = nil
		}
	case 190:
		//line n1ql.y:1444
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 191:
		//line n1ql.y:1451
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 192:
		//line n1ql.y:1456
		{
			yyVAL.indexType = datastore.VIEW
		}
	case 193:
		//line n1ql.y:1461
		{
			yyVAL.indexType = datastore.GSI
		}
	case 194:
		//line n1ql.y:1468
		{
			yyVAL.exprs = expression.Expressions{yyS[yypt-0].expr}
		}
	case 195:
		//line n1ql.y:1473
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 196:
		//line n1ql.y:1480
		{
			exp := yyS[yypt-0].expr
			if !exp.Indexable() || exp.Value() != nil {
				yylex.Error(fmt.Sprintf("Expression not indexable."))
			}

			yyVAL.expr = exp
		}
	case 197:
		//line n1ql.y:1491
		{
			yyVAL.expr = nil
		}
	case 198:
		//line n1ql.y:1496
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 199:
		//line n1ql.y:1510
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-0].keyspaceRef, "#primary")
		}
	case 200:
		//line n1ql.y:1515
		{
			yyVAL.statement = algebra.NewDropIndex(yyS[yypt-2].keyspaceRef, yyS[yypt-0].s)
		}
	case 201:
		//line n1ql.y:1528
		{
			yyVAL.statement = algebra.NewAlterIndex(yyS[yypt-3].keyspaceRef, yyS[yypt-1].s, yyS[yypt-0].s)
		}
	case 202:
		//line n1ql.y:1534
		{
			yyVAL.s = ""
		}
	case 203:
		//line n1ql.y:1539
		{
			yyVAL.s = yyS[yypt-0].s
		}
	case 204:
		//line n1ql.y:1553
		{
			yyVAL.path = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 205:
		//line n1ql.y:1558
		{
			yyVAL.path = expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 206:
		//line n1ql.y:1563
		{
			field := expression.NewField(yyS[yypt-2].path, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.path = field
		}
	case 207:
		//line n1ql.y:1570
		{
			yyVAL.path = expression.NewElement(yyS[yypt-3].path, yyS[yypt-1].expr)
		}
	case 208:
		yyVAL.expr = yyS[yypt-0].expr
	case 209:
		//line n1ql.y:1587
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 210:
		//line n1ql.y:1592
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 211:
		//line n1ql.y:1599
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 212:
		//line n1ql.y:1604
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 213:
		//line n1ql.y:1611
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 214:
		//line n1ql.y:1616
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 215:
		//line n1ql.y:1621
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 216:
		//line n1ql.y:1627
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 217:
		//line n1ql.y:1632
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 218:
		//line n1ql.y:1637
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 219:
		//line n1ql.y:1642
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 220:
		//line n1ql.y:1647
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 221:
		//line n1ql.y:1653
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 222:
		//line n1ql.y:1659
		{
			yyVAL.expr = expression.NewAnd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 223:
		//line n1ql.y:1664
		{
			yyVAL.expr = expression.NewOr(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 224:
		//line n1ql.y:1669
		{
			yyVAL.expr = expression.NewNot(yyS[yypt-0].expr)
		}
	case 225:
		//line n1ql.y:1675
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 226:
		//line n1ql.y:1680
		{
			yyVAL.expr = expression.NewEq(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 227:
		//line n1ql.y:1685
		{
			yyVAL.expr = expression.NewNE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 228:
		//line n1ql.y:1690
		{
			yyVAL.expr = expression.NewLT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 229:
		//line n1ql.y:1695
		{
			yyVAL.expr = expression.NewGT(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 230:
		//line n1ql.y:1700
		{
			yyVAL.expr = expression.NewLE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 231:
		//line n1ql.y:1705
		{
			yyVAL.expr = expression.NewGE(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 232:
		//line n1ql.y:1710
		{
			yyVAL.expr = expression.NewBetween(yyS[yypt-4].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 233:
		//line n1ql.y:1715
		{
			yyVAL.expr = expression.NewNotBetween(yyS[yypt-5].expr, yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 234:
		//line n1ql.y:1720
		{
			yyVAL.expr = expression.NewLike(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 235:
		//line n1ql.y:1725
		{
			yyVAL.expr = expression.NewNotLike(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 236:
		//line n1ql.y:1730
		{
			yyVAL.expr = expression.NewIn(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 237:
		//line n1ql.y:1735
		{
			yyVAL.expr = expression.NewNotIn(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 238:
		//line n1ql.y:1740
		{
			yyVAL.expr = expression.NewWithin(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 239:
		//line n1ql.y:1745
		{
			yyVAL.expr = expression.NewNotWithin(yyS[yypt-3].expr, yyS[yypt-0].expr)
		}
	case 240:
		//line n1ql.y:1750
		{
			yyVAL.expr = expression.NewIsNull(yyS[yypt-2].expr)
		}
	case 241:
		//line n1ql.y:1755
		{
			yyVAL.expr = expression.NewIsNotNull(yyS[yypt-3].expr)
		}
	case 242:
		//line n1ql.y:1760
		{
			yyVAL.expr = expression.NewIsMissing(yyS[yypt-2].expr)
		}
	case 243:
		//line n1ql.y:1765
		{
			yyVAL.expr = expression.NewIsNotMissing(yyS[yypt-3].expr)
		}
	case 244:
		//line n1ql.y:1770
		{
			yyVAL.expr = expression.NewIsValued(yyS[yypt-2].expr)
		}
	case 245:
		//line n1ql.y:1775
		{
			yyVAL.expr = expression.NewIsNotValued(yyS[yypt-3].expr)
		}
	case 246:
		//line n1ql.y:1780
		{
			yyVAL.expr = expression.NewIsBoolean(yyS[yypt-2].expr)
		}
	case 247:
		//line n1ql.y:1785
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBoolean(yyS[yypt-3].expr))
		}
	case 248:
		//line n1ql.y:1790
		{
			yyVAL.expr = expression.NewIsNumber(yyS[yypt-2].expr)
		}
	case 249:
		//line n1ql.y:1795
		{
			yyVAL.expr = expression.NewNot(expression.NewIsNumber(yyS[yypt-3].expr))
		}
	case 250:
		//line n1ql.y:1800
		{
			yyVAL.expr = expression.NewIsString(yyS[yypt-2].expr)
		}
	case 251:
		//line n1ql.y:1805
		{
			yyVAL.expr = expression.NewNot(expression.NewIsString(yyS[yypt-3].expr))
		}
	case 252:
		//line n1ql.y:1810
		{
			yyVAL.expr = expression.NewIsArray(yyS[yypt-2].expr)
		}
	case 253:
		//line n1ql.y:1815
		{
			yyVAL.expr = expression.NewNot(expression.NewIsArray(yyS[yypt-3].expr))
		}
	case 254:
		//line n1ql.y:1820
		{
			yyVAL.expr = expression.NewIsObject(yyS[yypt-2].expr)
		}
	case 255:
		//line n1ql.y:1825
		{
			yyVAL.expr = expression.NewNot(expression.NewIsObject(yyS[yypt-3].expr))
		}
	case 256:
		//line n1ql.y:1830
		{
			yyVAL.expr = expression.NewIsBinary(yyS[yypt-2].expr)
		}
	case 257:
		//line n1ql.y:1835
		{
			yyVAL.expr = expression.NewNot(expression.NewIsBinary(yyS[yypt-3].expr))
		}
	case 258:
		//line n1ql.y:1840
		{
			yyVAL.expr = expression.NewExists(yyS[yypt-0].expr)
		}
	case 259:
		yyVAL.expr = yyS[yypt-0].expr
	case 260:
		yyVAL.expr = yyS[yypt-0].expr
	case 261:
		//line n1ql.y:1854
		{
			yyVAL.expr = expression.NewIdentifier(yyS[yypt-0].s)
		}
	case 262:
		//line n1ql.y:1860
		{
			yyVAL.expr = expression.NewSelf()
		}
	case 263:
		yyVAL.expr = yyS[yypt-0].expr
	case 264:
		yyVAL.expr = yyS[yypt-0].expr
	case 265:
		//line n1ql.y:1872
		{
			yyVAL.expr = expression.NewNeg(yyS[yypt-0].expr)
		}
	case 266:
		yyVAL.expr = yyS[yypt-0].expr
	case 267:
		yyVAL.expr = yyS[yypt-0].expr
	case 268:
		yyVAL.expr = yyS[yypt-0].expr
	case 269:
		yyVAL.expr = yyS[yypt-0].expr
	case 270:
		//line n1ql.y:1891
		{
			yyVAL.expr = expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
		}
	case 271:
		//line n1ql.y:1896
		{
			field := expression.NewField(yyS[yypt-2].expr, expression.NewFieldName(yyS[yypt-0].s))
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 272:
		//line n1ql.y:1903
		{
			yyVAL.expr = expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
		}
	case 273:
		//line n1ql.y:1908
		{
			field := expression.NewField(yyS[yypt-4].expr, yyS[yypt-1].expr)
			field.SetCaseInsensitive(true)
			yyVAL.expr = field
		}
	case 274:
		//line n1ql.y:1915
		{
			yyVAL.expr = expression.NewElement(yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 275:
		//line n1ql.y:1920
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-4].expr, yyS[yypt-2].expr)
		}
	case 276:
		//line n1ql.y:1925
		{
			yyVAL.expr = expression.NewSlice(yyS[yypt-5].expr, yyS[yypt-3].expr, yyS[yypt-1].expr)
		}
	case 277:
		//line n1ql.y:1931
		{
			yyVAL.expr = expression.NewAdd(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 278:
		//line n1ql.y:1936
		{
			yyVAL.expr = expression.NewSub(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 279:
		//line n1ql.y:1941
		{
			yyVAL.expr = expression.NewMult(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 280:
		//line n1ql.y:1946
		{
			yyVAL.expr = expression.NewDiv(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 281:
		//line n1ql.y:1951
		{
			yyVAL.expr = expression.NewMod(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 282:
		//line n1ql.y:1957
		{
			yyVAL.expr = expression.NewConcat(yyS[yypt-2].expr, yyS[yypt-0].expr)
		}
	case 283:
		//line n1ql.y:1971
		{
			yyVAL.expr = expression.NULL_EXPR
		}
	case 284:
		//line n1ql.y:1976
		{
			yyVAL.expr = expression.MISSING_EXPR
		}
	case 285:
		//line n1ql.y:1981
		{
			yyVAL.expr = expression.FALSE_EXPR
		}
	case 286:
		//line n1ql.y:1986
		{
			yyVAL.expr = expression.TRUE_EXPR
		}
	case 287:
		//line n1ql.y:1991
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].f))
		}
	case 288:
		//line n1ql.y:1996
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].n))
		}
	case 289:
		//line n1ql.y:2001
		{
			yyVAL.expr = expression.NewConstant(value.NewValue(yyS[yypt-0].s))
		}
	case 290:
		yyVAL.expr = yyS[yypt-0].expr
	case 291:
		yyVAL.expr = yyS[yypt-0].expr
	case 292:
		//line n1ql.y:2021
		{
			yyVAL.expr = expression.NewObjectConstruct(yyS[yypt-1].bindings)
		}
	case 293:
		//line n1ql.y:2028
		{
			yyVAL.bindings = nil
		}
	case 294:
		yyVAL.bindings = yyS[yypt-0].bindings
	case 295:
		//line n1ql.y:2037
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 296:
		//line n1ql.y:2042
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 297:
		//line n1ql.y:2049
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 298:
		//line n1ql.y:2056
		{
			yyVAL.expr = expression.NewArrayConstruct(yyS[yypt-1].exprs...)
		}
	case 299:
		//line n1ql.y:2063
		{
			yyVAL.exprs = nil
		}
	case 300:
		yyVAL.exprs = yyS[yypt-0].exprs
	case 301:
		//line n1ql.y:2079
		{
			yyVAL.expr = algebra.NewNamedParameter(yyS[yypt-0].s)
		}
	case 302:
		//line n1ql.y:2084
		{
			yyVAL.expr = algebra.NewPositionalParameter(yyS[yypt-0].n)
		}
	case 303:
		//line n1ql.y:2089
		{
			n := yylex.(*lexer).nextParam()
			yyVAL.expr = algebra.NewPositionalParameter(n)
		}
	case 304:
		//line n1ql.y:2104
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 305:
		yyVAL.expr = yyS[yypt-0].expr
	case 306:
		yyVAL.expr = yyS[yypt-0].expr
	case 307:
		//line n1ql.y:2117
		{
			yyVAL.expr = expression.NewSimpleCase(yyS[yypt-2].expr, yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 308:
		//line n1ql.y:2124
		{
			yyVAL.whenTerms = expression.WhenTerms{&expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr}}
		}
	case 309:
		//line n1ql.y:2129
		{
			yyVAL.whenTerms = append(yyS[yypt-4].whenTerms, &expression.WhenTerm{yyS[yypt-2].expr, yyS[yypt-0].expr})
		}
	case 310:
		//line n1ql.y:2137
		{
			yyVAL.expr = expression.NewSearchedCase(yyS[yypt-1].whenTerms, yyS[yypt-0].expr)
		}
	case 311:
		//line n1ql.y:2144
		{
			yyVAL.expr = nil
		}
	case 312:
		//line n1ql.y:2149
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 313:
		//line n1ql.y:2163
		{
			yyVAL.expr = nil
			f, ok := expression.GetFunction(yyS[yypt-3].s)
			if !ok && yylex.(*lexer).parsingStatement() {
				f, ok = algebra.GetAggregate(yyS[yypt-3].s, false)
			}

			if ok {
				if len(yyS[yypt-1].exprs) < f.MinArgs() || len(yyS[yypt-1].exprs) > f.MaxArgs() {
					yylex.Error(fmt.Sprintf("Wrong number of arguments to function %s.", yyS[yypt-3].s))
				} else {
					yyVAL.expr = f.Constructor()(yyS[yypt-1].exprs...)
				}
			} else {
				yylex.Error(fmt.Sprintf("Invalid function %s.", yyS[yypt-3].s))
			}
		}
	case 314:
		//line n1ql.y:2182
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				agg, ok := algebra.GetAggregate(yyS[yypt-4].s, true)
				if ok {
					yyVAL.expr = agg.Constructor()(yyS[yypt-1].expr)
				} else {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-4].s))
				}
			}
		}
	case 315:
		//line n1ql.y:2197
		{
			yyVAL.expr = nil
			if !yylex.(*lexer).parsingStatement() {
				yylex.Error("Cannot use aggregate as an inline expression.")
			} else {
				if strings.ToLower(yyS[yypt-3].s) != "count" {
					yylex.Error(fmt.Sprintf("Invalid aggregate function %s(*).", yyS[yypt-3].s))
				} else {
					agg, ok := algebra.GetAggregate(yyS[yypt-3].s, false)
					if ok {
						yyVAL.expr = agg.Constructor()(nil)
					} else {
						yylex.Error(fmt.Sprintf("Invalid aggregate function %s.", yyS[yypt-3].s))
					}
				}
			}
		}
	case 316:
		yyVAL.s = yyS[yypt-0].s
	case 317:
		yyVAL.expr = yyS[yypt-0].expr
	case 318:
		yyVAL.expr = yyS[yypt-0].expr
	case 319:
		//line n1ql.y:2235
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 320:
		//line n1ql.y:2240
		{
			yyVAL.expr = expression.NewAny(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 321:
		//line n1ql.y:2245
		{
			yyVAL.expr = expression.NewEvery(yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 322:
		//line n1ql.y:2252
		{
			yyVAL.bindings = expression.Bindings{yyS[yypt-0].binding}
		}
	case 323:
		//line n1ql.y:2257
		{
			yyVAL.bindings = append(yyS[yypt-2].bindings, yyS[yypt-0].binding)
		}
	case 324:
		//line n1ql.y:2264
		{
			yyVAL.binding = expression.NewBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 325:
		//line n1ql.y:2269
		{
			yyVAL.binding = expression.NewDescendantBinding(yyS[yypt-2].s, yyS[yypt-0].expr)
		}
	case 326:
		//line n1ql.y:2276
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 327:
		//line n1ql.y:2283
		{
			yyVAL.expr = expression.NewArray(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 328:
		//line n1ql.y:2288
		{
			yyVAL.expr = expression.NewFirst(yyS[yypt-4].expr, yyS[yypt-2].bindings, yyS[yypt-1].expr)
		}
	case 329:
		//line n1ql.y:2302
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 330:
		yyVAL.expr = yyS[yypt-0].expr
	case 331:
		//line n1ql.y:2311
		{
			yyVAL.expr = nil
			if yylex.(*lexer).parsingStatement() {
				yyVAL.expr = algebra.NewSubquery(yyS[yypt-0].fullselect)
			} else {
				yylex.Error("Cannot use subquery as an inline expression.")
			}
		}
	}
	goto yystack /* stack new state and value */
}
