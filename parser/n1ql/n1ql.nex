/\"((\\\")|[^\"])*\"/ {
		    lval.s, _ = UnmarshalDoubleQuoted(yylex.Text())
		    logToken(yylex.Text(), "STR - %s", lval.s)
		    return STR
		  }

/'(('')|[^'])*'/ {
		    lval.s, _ = UnmarshalSingleQuoted(yylex.Text())
		    logToken(yylex.Text(), "STR - %s", lval.s)
		    return STR
		  }

/`((``)|[^`])+`i/ {
		    // Case-insensitive identifier
		    text := yylex.Text()
		    text = text[0 : len(text)-1]
		    lval.s, _ = UnmarshalBackQuoted(text)
		    logToken(yylex.Text(), "IDENT_ICASE - %s", lval.s)
		    return IDENT_ICASE
		  }

/`((``)|[^`])+`/ {
		    // Escaped identifier
		    lval.s, _ = UnmarshalBackQuoted(yylex.Text())
		    logToken(yylex.Text(), "IDENT - %s", lval.s)
		    return IDENT
		  }

/(0|[1-9][0-9]*)\.[0-9]+([eE][+\-]?[0-9]+)?/ {
		  // We differentiate NUM from INT
		    lval.f,_ = strconv.ParseFloat(yylex.Text(), 64)
		    logToken(yylex.Text(), "NUM - %f", lval.f)
		    return NUM
		  }

/(0|[1-9][0-9]*)[eE][+\-]?[0-9]+/ {
		  // We differentiate NUM from INT
		    lval.f, _ = strconv.ParseFloat(yylex.Text(), 64)
		    logToken(yylex.Text(), "NUM - %f", lval.f)
		    return NUM
		  }

/0|[1-9][0-9]*/ {
		  // We differentiate NUM from INT
		    lval.n, _ = strconv.ParseInt(yylex.Text(), 10, 64)
		    logToken(yylex.Text(), "INT - %d", lval.n)
		    return INT
		  }

/(\/\*)([^\*]|(\*)+[^\/])*((\*)+\/)/ {
		    logToken(yylex.Text(), "BLOCK_COMMENT (length=%d)", len(yylex.Text())) /* eat up block comment */
		  }

/"--"[^\n\r]*/	  { logToken(yylex.Text(), "LINE_COMMENT (length=%d)", len(yylex.Text())) /* eat up line comment */ }

/[ \t\n\r\f]+/	  { logToken(yylex.Text(), "WHITESPACE (count=%d)", len(yylex.Text())) /* eat up whitespace */ }

/\./		  { logToken(yylex.Text(), "DOT"); return DOT }
/\+/		  { logToken(yylex.Text(), "PLUS"); return PLUS }
/-/		  { logToken(yylex.Text(), "MINUS"); return MINUS }
/\*/		  { logToken(yylex.Text(), "MULT"); return STAR }
/\//		  { logToken(yylex.Text(), "DIV"); return DIV }
/%/		  { logToken(yylex.Text(), "MOD"); return MOD }
/\=\=/		  { logToken(yylex.Text(), "DEQ"); return DEQ }
/\=/		  { logToken(yylex.Text(), "EQ"); return EQ }
/\!\=/		  { logToken(yylex.Text(), "NE"); return NE }
/\<\>/		  { logToken(yylex.Text(), "NE"); return NE }
/\</		  { logToken(yylex.Text(), "LT"); return LT }
/\<\=/		  { logToken(yylex.Text(), "LTE"); return LE }
/\>/		  { logToken(yylex.Text(), "GT"); return GT }
/\>\=/		  { logToken(yylex.Text(), "GTE"); return GE }
/\|\|/		  { logToken(yylex.Text(), "CONCAT"); return CONCAT }
/\(/		  { logToken(yylex.Text(), "LPAREN"); return LPAREN }
/\)/		  { logToken(yylex.Text(), "RPAREN"); return RPAREN }
/\{/		  { logToken(yylex.Text(), "LBRACE"); return LBRACE }
/\}/		  { logToken(yylex.Text(), "RBRACE"); return RBRACE }
/\,/		  { logToken(yylex.Text(), "COMMA"); return COMMA }
/\:/		  { logToken(yylex.Text(), "COLON"); return COLON }
/\[/		  { logToken(yylex.Text(), "LBRACKET"); return LBRACKET }
/\]/		  { logToken(yylex.Text(), "RBRACKET"); return RBRACKET }
/\]i/		  { logToken(yylex.Text(), "RBRACKET_ICASE"); return RBRACKET_ICASE }
/;/		  { logToken(yylex.Text(), "SEMI"); return SEMI }
/\!/		  { logToken(yylex.Text(), "NOT_A_TOKEN"); return NOT_A_TOKEN }

/[aA][lL][lL]/	    			  	 { logToken(yylex.Text(), "ALL"); return ALL }
/[aA][lL][tT][eE][rR]/				 { logToken(yylex.Text(), "ALTER"); return ALTER }
/[aA][nN][aA][lL][yY][zZ][eE]/			 { logToken(yylex.Text(), "ANALYZE"); return ANALYZE }
/[aA][nN][dD]/					 { logToken(yylex.Text(), "AND"); return AND }
/[aA][nN][yY]/					 { logToken(yylex.Text(), "ANY"); return ANY }
/[aA][rR][rR][aA][yY]/				 { logToken(yylex.Text(), "ARRAY"); return ARRAY }
/[aA][sS]/					 {
							logToken(yylex.Text(), "AS")
							lval.tokOffset = curOffset
							return AS
						 }
/[aA][sS][cC]/					 { logToken(yylex.Text(), "ASC"); return ASC }
/[bB][eE][gG][iI][nN]/				 { logToken(yylex.Text(), "BEGIN"); return BEGIN }
/[bB][eE][tT][wW][eE][eE][nN]/			 { logToken(yylex.Text(), "BETWEEN"); return BETWEEN }
/[bB][iI][nN][aA][rR][yY]/			 { logToken(yylex.Text(), "BINARY"); return BINARY }
/[bB][oO][oO][lL][eE][aA][nN]/			 { logToken(yylex.Text(), "BOOLEAN"); return BOOLEAN }
/[bB][rR][eE][aA][kK]/				 { logToken(yylex.Text(), "BREAK"); return BREAK }
/[bB][uU][cC][kK][eE][tT]/			 { logToken(yylex.Text(), "BUCKET"); return BUCKET }
/[bB][uU][iI][lL][dD]/				 { logToken(yylex.Text(), "BUILD"); return BUILD }
/[bB][yY]/					 { logToken(yylex.Text(), "BY"); return BY }
/[cC][aA][lL][lL]/				 { logToken(yylex.Text(), "CALL"); return CALL }
/[cC][aA][sS][eE]/				 { logToken(yylex.Text(), "CASE"); return CASE }
/[cC][aA][sS][tT]/				 { logToken(yylex.Text(), "CAST"); return CAST }
/[cC][lL][uU][sS][tT][eE][rR]/			 { logToken(yylex.Text(), "CLUSTER"); return CLUSTER }
/[cC][oO][lL][lL][aA][tT][eE]/			 { logToken(yylex.Text(), "COLLATE"); return COLLATE }
/[cC][oO][lL][lL][eE][cC][tT][iI][oO][nN]/	 { logToken(yylex.Text(), "COLLECTION"); return COLLECTION }
/[cC][oO][mM][mM][iI][tT]/			 { logToken(yylex.Text(), "COMMIT"); return COMMIT }
/[cC][oO][nN][nN][eE][cC][tT]/			 { logToken(yylex.Text(), "CONNECT"); return CONNECT }
/[cC][oO][nN][tT][iI][nN][uU][eE]/		 { logToken(yylex.Text(), "CONTINUE"); return CONTINUE }
/[cC][oO][rR][rR][eE][lL][aA][tT][eE]/		 { logToken(yylex.Text(), "CORRELATE"); return CORRELATE }
/[cC][oO][vV][eE][rR]/				 { logToken(yylex.Text(), "COVER"); return COVER }
/[cC][rR][eE][aA][tT][eE]/			 { logToken(yylex.Text(), "CREATE"); return CREATE }
/[dD][aA][tT][aA][bB][aA][sS][eE]/		 { logToken(yylex.Text(), "DATABASE"); return DATABASE }
/[dD][aA][tT][aA][sS][eE][tT]/			 { logToken(yylex.Text(), "DATASET"); return DATASET }
/[dD][aA][tT][aA][sS][tT][oO][rR][eE]/		 { logToken(yylex.Text(), "DATASTORE"); return DATASTORE }
/[dD][eE][cC][lL][aA][rR][eE]/			 { logToken(yylex.Text(), "DECLARE"); return DECLARE }
/[dD][eE][cC][rR][eE][mM][eE][nN][tT]/		 { logToken(yylex.Text(), "DECREMENT"); return DECREMENT }
/[dD][eE][lL][eE][tT][eE]/			 { logToken(yylex.Text(), "DELETE"); return DELETE }
/[dD][eE][rR][iI][vV][eE][dD]/			 { logToken(yylex.Text(), "DERIVED"); return DERIVED }
/[dD][eE][sS][cC]/				 { logToken(yylex.Text(), "DESC"); return DESC }
/[dD][eE][sS][cC][rR][iI][bB][eE]/		 { logToken(yylex.Text(), "DESCRIBE"); return DESCRIBE }
/[dD][iI][sS][tT][iI][nN][cC][tT]/		 { logToken(yylex.Text(), "DISTINCT"); return DISTINCT }
/[dD][oO]/					 { logToken(yylex.Text(), "DO"); return DO }
/[dD][rR][oO][pP]/				 { logToken(yylex.Text(), "DROP"); return DROP }
/[eE][aA][cC][hH]/				 { logToken(yylex.Text(), "EACH"); return EACH }
/[eE][lL][eE][mM][eE][nN][tT]/			 { logToken(yylex.Text(), "ELEMENT"); return ELEMENT }
/[eE][lL][sS][eE]/				 { logToken(yylex.Text(), "ELSE"); return ELSE }
/[eE][nN][dD]/					 { logToken(yylex.Text(), "END"); return END }
/[eE][vV][eE][rR][yY]/				 { logToken(yylex.Text(), "EVERY"); return EVERY }
/[eE][xX][cC][eE][pP][tT]/			 { logToken(yylex.Text(), "EXCEPT"); return EXCEPT }
/[eE][xX][cC][lL][uU][dD][eE]/			 { logToken(yylex.Text(), "EXCLUDE"); return EXCLUDE }
/[eE][xX][eE][cC][uU][tT][eE]/			 { logToken(yylex.Text(), "EXECUTE"); return EXECUTE }
/[eE][xX][iI][sS][tT][sS]/			 { logToken(yylex.Text(), "EXISTS"); return EXISTS }
/[eE][xX][pP][lL][aA][iI][nN]/			 {
							logToken(yylex.Text(), "EXPLAIN")
							lval.tokOffset = curOffset
							return EXPLAIN
						 }
/[fF][aA][lL][sS][eE]/				 { logToken(yylex.Text(), "FALSE"); return FALSE }
/[fF][eE][tT][cC][hH]/				 { logToken(yylex.Text(), "FETCH"); return FETCH }
/[fF][iI][rR][sS][tT]/				 { logToken(yylex.Text(), "FIRST"); return FIRST }
/[fF][lL][aA][tT][tT][eE][nN]/			 { logToken(yylex.Text(), "FLATTEN"); return FLATTEN }
/[fF][oO][rR]/					 { logToken(yylex.Text(), "FOR"); return FOR }
/[fF][oO][rR][cC][eE]/				 { logToken(yylex.Text(), "FORCE"); return FORCE }
/[fF][rR][oO][mM]/				 {
							logToken(yylex.Text(), "FROM")
							lval.tokOffset = curOffset
							return FROM
						 }
/[fF][uU][nN][cC][tT][iI][oO][nN]/		 { logToken(yylex.Text(), "FUNCTION"); return FUNCTION }
/[gG][rR][aA][nN][tT]/				 { logToken(yylex.Text(), "GRANT"); return GRANT }
/[gG][rR][oO][uU][pP]/				 { logToken(yylex.Text(), "GROUP"); return GROUP }
/[gG][sS][iI]/					 { logToken(yylex.Text(), "GSI"); return GSI }
/[hH][aA][vV][iI][nN][gG]/			 { logToken(yylex.Text(), "HAVING"); return HAVING }
/[iI][fF]/					 { logToken(yylex.Text(), "IF"); return IF }
/[iI][gG][nN][oO][rR][eE]/			 { logToken(yylex.Text(), "IGNORE"); return IGNORE }
/[iI][lL][iI][kK][eE]/				 { logToken(yylex.Text(), "ILIKE"); return ILIKE }
/[iI][nN]/					 { logToken(yylex.Text(), "IN"); return IN }
/[iI][nN][cC][lL][uU][dD][eE]/			 { logToken(yylex.Text(), "INCLUDE"); return INCLUDE }
/[iI][nN][cC][rR][eE][mM][eE][nN][tT]/		 { logToken(yylex.Text(), "INCREMENT"); return INCREMENT }
/[iI][nN][dD][eE][xX]/				 { logToken(yylex.Text(), "INDEX"); return INDEX }
/[iI][nN][fF][eE][rR]/				 { logToken(yylex.Text(), "INFER"); return INFER }
/[iI][nN][lL][iI][nN][eE]/			 { logToken(yylex.Text(), "INLINE"); return INLINE }
/[iI][nN][nN][eE][rR]/				 { logToken(yylex.Text(), "INNER"); return INNER }
/[iI][nN][sS][eE][rR][tT]/			 { logToken(yylex.Text(), "INSERT"); return INSERT }
/[iI][nN][tT][eE][rR][sS][eE][cC][tT]/		 { logToken(yylex.Text(), "INTERSECT"); return INTERSECT }
/[iI][nN][tT][oO]/				 { logToken(yylex.Text(), "INTO"); return INTO }
/[iI][sS]/					 { logToken(yylex.Text(), "IS"); return IS }
/[jJ][oO][iI][nN]/				 { logToken(yylex.Text(), "JOIN"); return JOIN }
/[kK][eE][yY]/					 { logToken(yylex.Text(), "KEY"); return KEY }
/[kK][eE][yY][sS]/				 { logToken(yylex.Text(), "KEYS"); return KEYS }
/[kK][eE][yY][sS][pP][aA][cC][eE]/		 { logToken(yylex.Text(), "KEYSPACE"); return KEYSPACE }
/[kK][nN][oO][wW][nN]/				 { logToken(yylex.Text(), "KNOWN"); return KNOWN }
/[lL][aA][sS][tT]/				 { logToken(yylex.Text(), "LAST"); return LAST }
/[lL][eE][fF][tT]/				 { logToken(yylex.Text(), "LEFT"); return LEFT }
/[lL][eE][tT]/					 { logToken(yylex.Text(), "LET"); return LET }
/[lL][eE][tT][tT][iI][nN][gG]/			 { logToken(yylex.Text(), "LETTING"); return LETTING }
/[lL][iI][kK][eE]/				 { logToken(yylex.Text(), "LIKE"); return LIKE }
/[lL][iI][mM][iI][tT]/				 { logToken(yylex.Text(), "LIMIT"); return LIMIT }
/[lL][sS][mM]/					 { logToken(yylex.Text(), "LSM"); return LSM }
/[mM][aA][pP]/					 { logToken(yylex.Text(), "MAP"); return MAP }
/[mM][aA][pP][pP][iI][nN][gG]/			 { logToken(yylex.Text(), "MAPPING"); return MAPPING }
/[mM][aA][tT][cC][hH][eE][dD]/			 { logToken(yylex.Text(), "MATCHED"); return MATCHED }
/[mM][aA][tT][eE][rR][iI][aA][lL][iI][zZ][eE][dD]/ { logToken(yylex.Text(), "MATERIALIZED"); return MATERIALIZED }
/[mM][eE][rR][gG][eE]/				 { logToken(yylex.Text(), "MERGE"); return MERGE }
/[mM][iI][nN][uU][sS]/				 { logToken(yylex.Text(), "MINUS"); return MINUS }
/[mM][iI][sS][sS][iI][nN][gG]/			 { logToken(yylex.Text(), "MISSING"); return MISSING }
/[nN][aA][mM][eE][sS][pP][aA][cC][eE]/		 { logToken(yylex.Text(), "NAMESPACE"); return NAMESPACE }
/[nN][eE][sS][tT]/				 { logToken(yylex.Text(), "NEST"); return NEST }
/[nN][oO][tT]/					 { logToken(yylex.Text(), "NOT"); return NOT }
/[nN][uU][lL][lL]/				 { logToken(yylex.Text(), "NULL"); return NULL }
/[nN][uN][mM][bB][eE][rR]/			 { logToken(yylex.Text(), "NUMBER"); return NUMBER }
/[oO][bB][jJ][eE][cC][tT]/			 { logToken(yylex.Text(), "OBJECT"); return OBJECT }
/[oO][fF][fF][sS][eE][tT]/			 { logToken(yylex.Text(), "OFFSET"); return OFFSET }
/[oO][nN]/					 { logToken(yylex.Text(), "ON"); return ON }
/[oO][pP][tT][iI][oO][nN]/			 { logToken(yylex.Text(), "OPTION"); return OPTION }
/[oO][rR]/					 { logToken(yylex.Text(), "OR"); return OR }
/[oO][rR][dD][eE][rR]/				 { logToken(yylex.Text(), "ORDER"); return ORDER }
/[oO][uU][tT][eE][rR]/				 { logToken(yylex.Text(), "OUTER"); return OUTER }
/[oO][vV][eE][rR]/				 { logToken(yylex.Text(), "OVER"); return OVER }
/[pP][aA][rR][sS][eE]/				 { logToken(yylex.Text(), "PARSE"); return PARSE }
/[pP][aA][rR][tT][iI][tT][iI][oO][nN]/		 { logToken(yylex.Text(), "PARTITION"); return PARTITION }
/[pP][aA][sS][sS][wW][oO][rR][dD]/		 { logToken(yylex.Text(), "PASSWORD"); return PASSWORD }
/[pP][aA][tT][hH]/				 { logToken(yylex.Text(), "PATH"); return PATH }
/[pP][oO][oO][lL]/				 { logToken(yylex.Text(), "POOL"); return POOL }
/[pP][rR][eE][pP][aA][rR][eE]/			 {
							logToken(yylex.Text(), "PREPARE")
							lval.tokOffset = curOffset
							return PREPARE
						 }
/[pP][rR][iI][mM][aA][rR][yY]/			 { logToken(yylex.Text(), "PRIMARY"); return PRIMARY }
/[pP][rR][iI][vV][aA][tT][eE]/			 { logToken(yylex.Text(), "PRIVATE"); return PRIVATE }
/[pP][rR][iI][vV][iI][lL][eE][gG][eE]/		 { logToken(yylex.Text(), "PRIVILEGE"); return PRIVILEGE }
/[pP][rR][oO][cC][eE][dE][uU][rR][eE]/		 { logToken(yylex.Text(), "PROCEDURE"); return PROCEDURE }
/[pP][uU][bB][lL][iI][cC]/			 { logToken(yylex.Text(), "PUBLIC"); return PUBLIC }
/[rR][aA][wW]/					 { logToken(yylex.Text(), "RAW"); return RAW }
/[rR][eE][aA][lL][mM]/				 { logToken(yylex.Text(), "REALM"); return REALM }
/[rR][eE][dD][uU][cC][eE]/			 { logToken(yylex.Text(), "REDUCE"); return REDUCE }
/[rR][eE][nN][aA][mM][eE]/			 { logToken(yylex.Text(), "RENAME"); return RENAME }
/[rR][eE][tT][uU][rR][nN]/			 { logToken(yylex.Text(), "RETURN"); return RETURN }
/[rR][eE][tT][uU][rR][nN][iI][nN][gG]/		 { logToken(yylex.Text(), "RETURNING"); return RETURNING }
/[rR][eE][vV][oO][kK][eE]/			 { logToken(yylex.Text(), "REVOKE"); return REVOKE }
/[rR][iI][gG][hH][tT]/				 { logToken(yylex.Text(), "RIGHT"); return RIGHT }
/[rR][oO][lL][eE]/				 { logToken(yylex.Text(), "ROLE"); return ROLE }
/[rR][oO][lL][lL][bB][aA][cC][kK]/		 { logToken(yylex.Text(), "ROLLBACK"); return ROLLBACK }
/[sS][aA][tT][iI][sS][fF][iI][eE][sS]/		 { logToken(yylex.Text(), "SATISFIES"); return SATISFIES }
/[sS][cC][hH][eE][mM][aA]/			 { logToken(yylex.Text(), "SCHEMA"); return SCHEMA }
/[sS][eE][lL][eE][cC][tT]/			 { logToken(yylex.Text(), "SELECT"); return SELECT }
/[sS][eE][lL][fF]/				 { logToken(yylex.Text(), "SELF"); return SELF }
/[sS][eE][tT]/					 { logToken(yylex.Text(), "SET"); return SET }
/[sS][hH][oO][wW]/				 { logToken(yylex.Text(), "SHOW"); return SHOW }
/[sS][oO][mM][eE]/				 { logToken(yylex.Text(), "SOME"); return SOME }
/[sS][tT][aA][rR][tT]/				 { logToken(yylex.Text(), "START"); return START }
/[sS][tT][aA][tT][iI][sS][tT][iI][cC][sS]/	 { logToken(yylex.Text(), "STATISTICS"); return STATISTICS }
/[sS][tT][rR][iI][nN][gG]/			 { logToken(yylex.Text(), "STRING"); return STRING }
/[sS][yY][sS][tT][eE][mM]/			 { logToken(yylex.Text(), "SYSTEM"); return SYSTEM }
/[tT][hH][eE][nN]/				 { logToken(yylex.Text(), "THEN"); return THEN }
/[tT][oO]/					 { logToken(yylex.Text(), "TO"); return TO }
/[tT][rR][aA][nN][sS][aA][cC][tT][iI][oO][nN]/	 { logToken(yylex.Text(), "TRANSACTION"); return TRANSACTION }
/[tT][rR][iI][gG][gG][eE][rR]/			 { logToken(yylex.Text(), "TRIGGER"); return TRIGGER }
/[tT][rR][uU][eE]/				 { logToken(yylex.Text(), "TRUE"); return TRUE }
/[tT][rR][uU][nN][cC][aA][tT][eE]/		 { logToken(yylex.Text(), "TRUNCATE"); return TRUNCATE }
/[uU][nN][dD][eE][rR]/				 { logToken(yylex.Text(), "UNDER"); return UNDER }
/[uU][nN][iI][oO][nN]/				 { logToken(yylex.Text(), "UNION"); return UNION }
/[uU][nN][iI][qQ][uU][eE]/			 { logToken(yylex.Text(), "UNIQUE"); return UNIQUE }
/[uU][nN][kK][nN][oO][wW][nN]/			 { logToken(yylex.Text(), "UNKNOWN"); return UNKNOWN }
/[uU][nN][nN][eE][sS][tT]/			 { logToken(yylex.Text(), "UNNEST"); return UNNEST }
/[uU][nN][sS][eE][tT]/				 { logToken(yylex.Text(), "UNSET"); return UNSET }
/[uU][pP][dD][aA][tT][eE]/			 { logToken(yylex.Text(), "UPDATE"); return UPDATE }
/[uU][pP][sS][eE][rR][tT]/			 { logToken(yylex.Text(), "UPSERT"); return UPSERT }
/[uU][sS][eE]/					 { logToken(yylex.Text(), "USE"); return USE }
/[uU][sS][eE][rR]/				 { logToken(yylex.Text(), "USER"); return USER }
/[uU][sS][iI][nN][gG]/				 { logToken(yylex.Text(), "USING"); return USING }
/[vV][aA][lL][iI][dD][aA][tT][eE]/		 { logToken(yylex.Text(), "VALIDATE"); return VALIDATE }
/[vV][aA][lL][uU][eE]/				 { logToken(yylex.Text(), "VALUE"); return VALUE }
/[vV][aA][lL][uU][eE][dD]/			 { logToken(yylex.Text(), "VALUED"); return VALUED }
/[vV][aA][lL][uU][eE][sS]/			 { logToken(yylex.Text(), "VALUES"); return VALUES }
/[vV][iI][aA]/					 { logToken(yylex.Text(), "VIA"); return VIA }
/[vV][iI][eE][wW]/				 { logToken(yylex.Text(), "VIEW"); return VIEW }
/[wW][hH][eE][nN]/				 { logToken(yylex.Text(), "WHEN"); return WHEN }
/[wW][hH][eE][rR][eE]/				 { logToken(yylex.Text(), "WHERE"); return WHERE }
/[wW][hH][iI][lL][eE]/				 { logToken(yylex.Text(), "WHILE"); return WHILE }
/[wW][iI][tT][hH]/				 { logToken(yylex.Text(), "WITH"); return WITH }
/[wW][iI][tT][hH][iI][nN]/			 { logToken(yylex.Text(), "WITHIN"); return WITHIN }
/[wW][oO][rR][kK]/				 { logToken(yylex.Text(), "WORK"); return WORK }
/[xX][oO][rR]/					 { logToken(yylex.Text(), "XOR"); return XOR }

/[a-zA-Z_][a-zA-Z0-9_]*/     {
		    lval.s = yylex.Text()
		    logToken(yylex.Text(), "IDENT - %s", lval.s)
		    return IDENT
		  }

/\$[a-zA-Z_][a-zA-Z0-9_]*/     {
		    lval.s = yylex.Text()[1:]
		    logToken(yylex.Text(), "NAMED_PARAM - %s", lval.s)
		    return NAMED_PARAM
		  }

/\$[1-9][0-9]*/     {
		    lval.n, _ = strconv.ParseInt(yylex.Text()[1:], 10, 64)
		    logToken(yylex.Text(), "POSITIONAL_PARAM - %d", lval.n)
		    return POSITIONAL_PARAM
		  }

/\?/     {
		    lval.n = 0 // Handled by parser
		    logToken(yylex.Text(), "NEXT_PARAM - ?")
		    return NEXT_PARAM
		  }

/./		  {
			curOffset++
		  }

/\n/		  {
			curOffset++
		  }

//
package n1ql

import "strconv"
import "github.com/couchbase/clog"

var curOffset int

func logToken(text string, format string, v ...interface{}) {
    curOffset += len(text)
    clog.To("LEXER", format, v...)
}

func (this *Lexer) ResetOffset() {
	curOffset = 0
}
